/**
 * –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ë–ï–ó middleware
 * –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—à–∏–±–∫–æ–π 500
 */

import prisma, { withPrisma } from '../../lib/prisma';

export default async function handler(req, res) {
  console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
  console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', req.method);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (req.method === 'GET') {
    try {
      console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const settings = await withPrisma(async (prisma) => {
        return await prisma.interviewAssistantSettings.findFirst({
          where: {
            isActive: true,
          },
        });
      });

      console.log(
        'üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:',
        settings ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      );

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        return res.status(200).json({
          settings: {
            maxQuestionsPerDay: 10,
            maxTokensPerQuestion: 4000,
            isActive: true,
            apiType: 'openrouter',
            openRouterApiKey: '',
            openRouterBaseUrl: 'https://openrouter.ai/api/v1',
            openRouterModel: 'google/gemma-3-12b-it:free',
            openRouterTemperature: 0.7,
            openRouterMaxTokens: 4000,
          },
        });
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return res.status(200).json({
        settings,
      });
    } catch (error) {
      console.error('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      console.error('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack,
      });

      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        error: error.message,
        code: 'SETTINGS_FETCH_ERROR',
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (req.method === 'PUT') {
    try {
      console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PUT –∑–∞–ø—Ä–æ—Å–∞');
      console.log(
        'üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:',
        JSON.stringify(req.body, null, 2)
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const {
        maxQuestionsPerDay,
        maxTokensPerQuestion,
        isActive,
        openRouterApiKey,
        openRouterBaseUrl,
        openRouterModel,
        openRouterTemperature,
        openRouterMaxTokens,
      } = req.body;

      console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
      console.log(
        '  - maxQuestionsPerDay:',
        maxQuestionsPerDay,
        typeof maxQuestionsPerDay
      );
      console.log(
        '  - maxTokensPerQuestion:',
        maxTokensPerQuestion,
        typeof maxTokensPerQuestion
      );
      console.log('  - isActive:', isActive, typeof isActive);
      console.log(
        '  - openRouterApiKey:',
        openRouterApiKey ? '[–°–ö–†–´–¢]' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      );

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø API –∫–∞–∫ OpenRouter
      const apiType = 'openrouter';
      const apiKey = openRouterApiKey;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è OpenRouter
      if (!openRouterApiKey) {
        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterApiKey');
        return res.status(400).json({
          message: 'OpenRouter API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          code: 'MISSING_OPENROUTER_API_KEY',
        });
      }

      if (!openRouterModel) {
        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterModel');
        return res.status(400).json({
          message: '–ú–æ–¥–µ–ª—å OpenRouter –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
          code: 'MISSING_OPENROUTER_MODEL',
        });
      }

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      const convertedMaxQuestionsPerDay = parseInt(maxQuestionsPerDay, 10);
      const convertedMaxTokensPerQuestion = parseInt(maxTokensPerQuestion, 10);
      const convertedOpenRouterTemperature = parseFloat(openRouterTemperature);
      const convertedOpenRouterMaxTokens = parseInt(openRouterMaxTokens, 10);

      if (isNaN(convertedMaxQuestionsPerDay)) {
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxQuestionsPerDay',
          code: 'INVALID_MAX_QUESTIONS_PER_DAY',
        });
      }

      console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const existingSettings = await withPrisma(async (prisma) => {
        return await prisma.interviewAssistantSettings.findFirst({
          where: {
            isActive: true,
          },
        });
      });

      console.log(
        'üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
        existingSettings ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      );

      let updatedSettings;

      if (existingSettings) {
        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        updatedSettings = await withPrisma(async (prisma) => {
          return await prisma.interviewAssistantSettings.update({
            where: {
              id: existingSettings.id,
            },
            data: {
              apiKey,
              maxQuestionsPerDay: convertedMaxQuestionsPerDay,
              maxTokensPerQuestion: convertedMaxTokensPerQuestion,
              isActive,
              apiType,
              // –ü–æ–ª—è –¥–ª—è OpenRouter
              openRouterApiKey,
              openRouterBaseUrl,
              openRouterModel,
              openRouterTemperature: convertedOpenRouterTemperature,
              openRouterMaxTokens: convertedOpenRouterMaxTokens,
            },
          });
        });

        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        updatedSettings = await withPrisma(async (prisma) => {
          return await prisma.interviewAssistantSettings.create({
            data: {
              apiKey,
              maxQuestionsPerDay: convertedMaxQuestionsPerDay,
              maxTokensPerQuestion: convertedMaxTokensPerQuestion,
              isActive,
              apiType,
              // –ü–æ–ª—è –¥–ª—è OpenRouter
              openRouterApiKey,
              openRouterBaseUrl,
              openRouterModel,
              openRouterTemperature: convertedOpenRouterTemperature,
              openRouterMaxTokens: convertedOpenRouterMaxTokens,
            },
          });
        });

        console.log('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return res.status(200).json({
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        settings: updatedSettings,
      });
    } catch (error) {
      console.error('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      console.error('üîç –¢–ï–°–¢ –ë–ï–ó AUTH: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack,
      });

      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        error: error.message,
        code: 'SETTINGS_UPDATE_ERROR',
      });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}
