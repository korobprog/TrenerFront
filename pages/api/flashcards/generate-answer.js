import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]';
import prisma from '../../../lib/prisma';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OpenRouter API
import openRouterApiModule from '../../../lib/utils/openRouterApi';
const {
  getAnswer: getOpenRouterAnswer,
  getCachedResponse,
  cacheResponse,
} = openRouterApiModule;

/**
 * API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ OpenRouter AI
 * POST /api/flashcards/generate-answer
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:
 * - questionId: number - ID –≤–æ–ø—Ä–æ—Å–∞
 * - questionText: string - —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
 * - context: object - –∫–æ–Ω—Ç–µ–∫—Å—Ç (topic, difficulty, tags)
 */
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const session = await getServerSession(req, res, authOptions);
    if (!session) {
      return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { questionId, questionText, context = {} } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!questionId) {
      return res
        .status(400)
        .json({ message: '–ü–∞—Ä–∞–º–µ—Ç—Ä questionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!questionText || questionText.trim() === '') {
      return res
        .status(400)
        .json({ message: '–ü–∞—Ä–∞–º–µ—Ç—Ä questionText –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const userId = session.user.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
    const question = await prisma.question.findUnique({
      where: { id: parseInt(questionId) },
      include: {
        userProgress: {
          where: { userId },
          take: 1,
        },
      },
    });

    if (!question) {
      return res.status(404).json({ message: '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (question.answer && question.answer.trim() !== '') {
      console.log(`–ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);

      return res.status(200).json({
        answer: question.answer,
        generatedAt: question.updatedAt || question.createdAt,
        cached: true,
        tokensUsed: 0,
        source: 'database',
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    const { topic, difficulty, tags } = context;

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
    let enhancedQuestion = questionText;

    if (topic || difficulty || tags) {
      enhancedQuestion += '\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:';
      if (topic) enhancedQuestion += `\n–¢–µ–º–∞: ${topic}`;
      if (difficulty) enhancedQuestion += `\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}`;
      if (tags && Array.isArray(tags) && tags.length > 0) {
        enhancedQuestion += `\n–¢–µ–≥–∏: ${tags.join(', ')}`;
      }
    }

    enhancedQuestion +=
      '\n\n–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–¥–∞—É–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–∫–ª—é—á–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.';

    console.log(
      `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    const cachedResult = await getCachedResponse(enhancedQuestion);

    if (cachedResult.answer) {
      console.log(`–ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
      try {
        await prisma.question.update({
          where: { id: parseInt(questionId) },
          data: { answer: cachedResult.answer },
        });
      } catch (updateError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', updateError);
      }

      return res.status(200).json({
        answer: cachedResult.answer,
        generatedAt: new Date().toISOString(),
        cached: true,
        tokensUsed: 0,
        source: 'cache',
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter API
    const result = await getOpenRouterAnswer(
      enhancedQuestion,
      userId,
      'flashcard', // –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      null, // company
      null // interviewDate
    );

    if (!result.answer) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      await prisma.question.update({
        where: { id: parseInt(questionId) },
        data: {
          answer: result.answer,
          updatedAt: new Date(),
        },
      });
      console.log(`–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
    } catch (updateError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', updateError);
    }

    // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    try {
      await cacheResponse(enhancedQuestion, result.answer);
      console.log(`–û—Ç–≤–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
    } catch (cacheError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç:', cacheError);
    }

    console.log(
      `–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}, —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${
        result.tokensUsed || 0
      }`
    );

    return res.status(200).json({
      answer: result.answer,
      generatedAt: new Date().toISOString(),
      cached: false,
      tokensUsed: result.tokensUsed || 0,
      source: 'ai_generated',
    });
  } catch (error) {
    console.error('=== –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê ===');
    console.error('üö® –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    console.error('üö® –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    console.error('üö® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      questionId,
      questionText: questionText?.substring(0, 100) + '...',
      context,
    });
    console.error('üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', session?.user?.id || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    console.error('=== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ===');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ OpenRouter API
    if (error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤')) {
      return res.status(429).json({
        message:
          '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.',
        error: 'DAILY_LIMIT_EXCEEDED',
      });
    }

    if (
      error.message.includes('API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω') ||
      error.message.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    ) {
      return res.status(500).json({
        message:
          '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        error: 'API_CONFIG_ERROR',
      });
    }

    if (error.message.includes('QUOTA_EXCEEDED_ERROR')) {
      return res.status(429).json({
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        error: 'QUOTA_EXCEEDED',
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
      return res.status(503).json({
        message: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        error: 'SERVICE_UNAVAILABLE',
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞
    if (error.code === 'ETIMEDOUT' || error.message.includes('timeout')) {
      return res.status(408).json({
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        error: 'TIMEOUT_ERROR',
      });
    }

    return res.status(500).json({
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞',
      error:
        process.env.NODE_ENV === 'development'
          ? error.message
          : 'INTERNAL_SERVER_ERROR',
    });
  } finally {
    await prisma.$disconnect();
  }
}
