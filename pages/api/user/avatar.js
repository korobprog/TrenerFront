import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]';
import prisma from '../../../lib/prisma';

/**
 * API —Ä–æ—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/user/avatar - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * PUT /api/user/avatar - –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * DELETE /api/user/avatar - —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É (–≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π)
 * POST /api/user/avatar - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
 *   - action: 'generate' - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
 *   - action: 'upload' - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
 *   - action: 'url' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∫–∏
 */
export default async function handler(req, res) {
  try {
    console.log('üîç Avatar API –≤—ã–∑–≤–∞–Ω:', {
      method: req.method,
      url: req.url,
      headers: {
        'content-type': req.headers['content-type'],
        'user-agent': req.headers['user-agent']?.substring(0, 50) + '...',
      },
      body: req.method === 'POST' ? req.body : 'N/A',
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = await getServerSession(req, res, authOptions);

    if (!session?.user?.id) {
      console.log('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      });
    }

    const userId = session.user.id;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', {
      userId,
      userName: session.user.name,
    });

    if (req.method === 'GET') {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
      try {
        const user = await prisma.user.findUnique({
          where: { id: userId },
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        });

        if (!user) {
          return res.status(404).json({
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        let avatarUrl = user.image;
        if (!avatarUrl) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ DiceBear API
          const initials = getInitials(user.name || user.email);
          avatarUrl = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(
            initials
          )}&backgroundColor=3b82f6&textColor=ffffff`;
        }

        return res.status(200).json({
          success: true,
          avatar: avatarUrl,
          hasCustomAvatar: !!user.image,
          user: {
            id: user.id,
            name: user.name,
            email: user.email,
          },
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏',
        });
      }
    }

    if (req.method === 'PUT') {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
      try {
        const { avatar } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!avatar || typeof avatar !== 'string') {
          return res.status(400).json({
            success: false,
            error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∫–∏',
          });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if (!isValidAvatarUrl(avatar)) {
          return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏',
          });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ URL (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤)
        if (avatar.length > 2000) {
          return res.status(400).json({
            success: false,
            error: 'URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)',
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedUser = await prisma.user.update({
          where: { id: userId },
          data: { image: avatar },
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        });

        return res.status(200).json({
          success: true,
          message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
          avatar: updatedUser.image,
          user: {
            id: updatedUser.id,
            name: updatedUser.name,
            email: updatedUser.email,
          },
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏',
        });
      }
    }

    if (req.method === 'DELETE') {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ (–≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π)
      try {
        const updatedUser = await prisma.user.update({
          where: { id: userId },
          data: { image: null },
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
        const initials = getInitials(updatedUser.name || updatedUser.email);
        const defaultAvatar = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(
          initials
        )}&backgroundColor=3b82f6&textColor=ffffff`;

        return res.status(200).json({
          success: true,
          message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è',
          avatar: defaultAvatar,
          hasCustomAvatar: false,
          user: {
            id: updatedUser.id,
            name: updatedUser.name,
            email: updatedUser.email,
          },
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏',
        });
      }
    }

    if (req.method === 'POST') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL)
      try {
        console.log('üìù POST –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:', req.body);

        const { action } = req.body;

        if (action === 'generate') {
          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
          const user = await prisma.user.findUnique({
            where: { id: userId },
            select: { name: true, email: true },
          });

          if (!user) {
            return res.status(404).json({
              success: false,
              error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            });
          }

          const name = req.body.name || user.name || user.email;
          const initials = getInitials(name);
          const avatarUrl = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(
            initials
          )}&backgroundColor=3b82f6&textColor=ffffff`;

          console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', { initials, avatarUrl });

          return res.status(200).json({
            success: true,
            message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            avatarUrl: avatarUrl,
            initials: initials,
          });
        } else if (action === 'upload') {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
          return res.status(400).json({
            success: false,
            error: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL.',
          });
        } else if (action === 'url') {
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏
          const { avatarUrl } = req.body;

          if (!avatarUrl || typeof avatarUrl !== 'string') {
            return res.status(400).json({
              success: false,
              error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∫–∏',
            });
          }

          if (!isValidAvatarUrl(avatarUrl)) {
            return res.status(400).json({
              success: false,
              error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏',
            });
          }

          if (avatarUrl.length > 2000) {
            return res.status(400).json({
              success: false,
              error: 'URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)',
            });
          }

          const updatedUser = await prisma.user.update({
            where: { id: userId },
            data: { image: avatarUrl },
            select: {
              id: true,
              name: true,
              email: true,
              image: true,
            },
          });

          return res.status(200).json({
            success: true,
            message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
            avatar: updatedUser.image,
            user: {
              id: updatedUser.id,
              name: updatedUser.name,
              email: updatedUser.email,
            },
          });
        } else {
          return res.status(400).json({
            success: false,
            error:
              '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: generate, upload, url',
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ POST –∑–∞–ø—Ä–æ—Å–∞:', error);
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
        });
      }
    }

    // –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    console.log('‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', {
      method: req.method,
      supportedMethods: ['GET', 'PUT', 'DELETE', 'POST'],
      body: req.body,
    });
    return res.status(405).json({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
    });
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ API –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    return res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    });
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ email
 * @param {string} nameOrEmail - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email
 * @returns {string} –ò–Ω–∏—Ü–∏–∞–ª—ã (–º–∞–∫—Å–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)
 */
function getInitials(nameOrEmail) {
  if (!nameOrEmail) return 'U';

  // –ï—Å–ª–∏ —ç—Ç–æ email, –±–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ @
  if (nameOrEmail.includes('@')) {
    nameOrEmail = nameOrEmail.split('@')[0];
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã
  const words = nameOrEmail.trim().split(/\s+/);
  if (words.length === 1) {
    // –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞
    return words[0].substring(0, 2).toUpperCase();
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–ª–æ–≤
    return (words[0].charAt(0) + words[1].charAt(0)).toUpperCase();
  }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} true –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
 */
function isValidAvatarUrl(url) {
  try {
    const urlObj = new URL(url);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    if (!['http:', 'https:', 'data:'].includes(urlObj.protocol)) {
      return false;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ data URL, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (urlObj.protocol === 'data:') {
      return url.startsWith('data:image/');
    }

    // –î–ª—è HTTP/HTTPS URL –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    return true;
  } catch (error) {
    return false;
  }
}
