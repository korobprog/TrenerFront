import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]';
import prisma from '../../../lib/prisma';

/**
 * API —Ä–æ—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/user/profile - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * PUT /api/user/profile - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export default async function handler(req, res) {
  // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –ù–ê–ß–ê–õ–û
  console.log('üîç [PROFILE API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', {
    method: req.method,
    url: req.url,
    headers: {
      'user-agent': req.headers['user-agent'],
      'content-type': req.headers['content-type'],
      cookie: req.headers.cookie ? '–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢',
    },
  });
  // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –ö–û–ù–ï–¶

  // –í–∞–ª–∏–¥–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
  if (!prisma) {
    console.error(
      '‚ùå [PROFILE API] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Prisma –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
    );
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
  }

  try {
    const session = await getServerSession(req, res, authOptions);

    // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –°–ï–°–°–ò–Ø
    console.log('üîç [PROFILE API] –°–µ—Å—Å–∏—è:', {
      exists: !!session,
      user: session?.user
        ? {
            email: session.user.email,
            name: session.user.name,
            id: session.user.id,
          }
        : null,
    });

    if (!session || !session.user) {
      return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log(
      'üîç [PROFILE API] –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:',
      session.user.email
    );

    const user = await prisma.user.findUnique({
      where: {
        email: session.user.email,
      },
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        pointsTransactions: {
          select: {
            amount: true,
            type: true,
            createdAt: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
          take: 5, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    console.log('üîç [PROFILE API] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      found: !!user,
      userId: user?.id,
      userEmail: user?.email,
      userRole: user?.role,
    });

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.method === 'GET') {
      return await handleGetProfile(req, res, user);
    } else if (req.method === 'PUT') {
      return await handleUpdateProfile(req, res, user);
    } else {
      return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    }
  } catch (error) {
    console.error('‚ùå [PROFILE API] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      code: error.code,
    });
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleGetProfile(req, res, user) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profileData = {
      id: user.id,
      name: user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      email: user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      image: user.image,
      role: user.role,
      createdAt: user.createdAt,
      lastLoginAt: user.lastLoginAt,
      conductedInterviewsCount: user.conductedInterviewsCount,

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      stats: {
        currentPoints: user.userPoints?.points || 0,
        totalInterviews:
          user._count.interviewerSessions + user._count.intervieweeSessions,
        conductedInterviews: user._count.interviewerSessions,
        participatedInterviews: user._count.intervieweeSessions,
        totalTransactions: user._count.pointsTransactions,
      },

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–ª–æ–≤
      recentTransactions: user.pointsTransactions.map((transaction) => ({
        amount: transaction.amount,
        type: transaction.type,
        createdAt: transaction.createdAt,
      })),
    };

    return res.status(200).json({
      success: true,
      data: profileData,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleUpdateProfile(req, res, user) {
  try {
    const { name, image } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (
      name !== undefined &&
      (typeof name !== 'string' || name.trim().length === 0)
    ) {
      return res
        .status(400)
        .json({ error: '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π' });
    }

    if (image !== undefined && typeof image !== 'string') {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {};
    if (name !== undefined) {
      updateData.name = name.trim();
    }
    if (image !== undefined) {
      updateData.image = image || null;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(updateData).length === 0) {
      return res.status(400).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: {
        id: user.id,
      },
      data: updateData,
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const profileData = {
      id: updatedUser.id,
      name: updatedUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      email: updatedUser.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      image: updatedUser.image,
      role: updatedUser.role,
      createdAt: updatedUser.createdAt,
      lastLoginAt: updatedUser.lastLoginAt,
      conductedInterviewsCount: updatedUser.conductedInterviewsCount,

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      stats: {
        currentPoints: updatedUser.userPoints?.points || 0,
        totalInterviews:
          updatedUser._count.interviewerSessions +
          updatedUser._count.intervieweeSessions,
        conductedInterviews: updatedUser._count.interviewerSessions,
        participatedInterviews: updatedUser._count.intervieweeSessions,
        totalTransactions: updatedUser._count.pointsTransactions,
      },
    };

    return res.status(200).json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: profileData,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
}
