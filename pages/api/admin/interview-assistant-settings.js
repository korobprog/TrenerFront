import {
  withAdminAuth,
  logAdminAction,
} from '../../../lib/middleware/adminAuth';
import prisma, { withPrisma } from '../../../lib/prisma';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
 * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
 */
async function handler(req, res) {
  console.log(
    'API interview-assistant-settings: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏'
  );
  console.log('API interview-assistant-settings: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', req.method);
  console.log(
    'API interview-assistant-settings: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ:',
    req.admin
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (req.method === 'GET') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const settings = await withPrisma(async (prisma) => {
        return await prisma.interviewAssistantSettings.findFirst({
          where: {
            isActive: true,
          },
        });
      });

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        return res.status(200).json({
          settings: {
            maxQuestionsPerDay: 10,
            maxTokensPerQuestion: 4000,
            isActive: true,
            apiType: 'openrouter', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter
            openRouterApiKey: '',
            openRouterBaseUrl: 'https://openrouter.ai/api/v1',
            openRouterModel: 'google/gemma-3-12b-it:free',
            openRouterTemperature: 0.7,
            openRouterMaxTokens: 4000,
          },
        });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await logAdminAction(
        req.admin.id,
        'view_interview_assistant_settings',
        'settings',
        settings.id,
        {}
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return res.status(200).json({
        settings,
      });
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
        error
      );
      console.error(
        '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
        {
          message: error.message,
          stack: error.stack,
        }
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        error: error.message,
        code: 'SETTINGS_FETCH_ERROR',
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (req.method === 'PUT') {
    try {
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PUT –∑–∞–ø—Ä–æ—Å–∞');
      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:',
        JSON.stringify(req.body, null, 2)
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const {
        maxQuestionsPerDay,
        maxTokensPerQuestion,
        isActive,
        // –ü–æ–ª—è –¥–ª—è OpenRouter
        openRouterApiKey,
        openRouterBaseUrl,
        openRouterModel,
        openRouterTemperature,
        openRouterMaxTokens,
      } = req.body;

      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
      console.log(
        '  - maxQuestionsPerDay:',
        maxQuestionsPerDay,
        typeof maxQuestionsPerDay
      );
      console.log(
        '  - maxTokensPerQuestion:',
        maxTokensPerQuestion,
        typeof maxTokensPerQuestion
      );
      console.log('  - isActive:', isActive, typeof isActive);
      console.log(
        '  - openRouterApiKey:',
        openRouterApiKey ? '[–°–ö–†–´–¢]' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        typeof openRouterApiKey
      );
      console.log(
        '  - openRouterBaseUrl:',
        openRouterBaseUrl,
        typeof openRouterBaseUrl
      );
      console.log(
        '  - openRouterModel:',
        openRouterModel,
        typeof openRouterModel
      );
      console.log(
        '  - openRouterTemperature:',
        openRouterTemperature,
        typeof openRouterTemperature
      );
      console.log(
        '  - openRouterMaxTokens:',
        openRouterMaxTokens,
        typeof openRouterMaxTokens
      );

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø API –∫–∞–∫ OpenRouter
      const apiType = 'openrouter';
      const apiKey = openRouterApiKey;

      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
      console.log('  - apiType:', apiType);
      console.log('  - apiKey:', apiKey ? '[–°–ö–†–´–¢]' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è OpenRouter
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π...');

      if (!openRouterApiKey) {
        console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterApiKey');
        return res.status(400).json({
          message: 'OpenRouter API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          code: 'MISSING_OPENROUTER_API_KEY',
        });
      }

      if (!openRouterModel) {
        console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterModel');
        return res.status(400).json({
          message: '–ú–æ–¥–µ–ª—å OpenRouter –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
          code: 'MISSING_OPENROUTER_MODEL',
        });
      }

      console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');

      let convertedMaxQuestionsPerDay,
        convertedMaxTokensPerQuestion,
        convertedOpenRouterTemperature,
        convertedOpenRouterMaxTokens;

      try {
        convertedMaxQuestionsPerDay = parseInt(maxQuestionsPerDay, 10);
        if (isNaN(convertedMaxQuestionsPerDay)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxQuestionsPerDay');
        }
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: maxQuestionsPerDay –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedMaxQuestionsPerDay
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ maxQuestionsPerDay:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxQuestionsPerDay',
          code: 'INVALID_MAX_QUESTIONS_PER_DAY',
        });
      }

      try {
        convertedMaxTokensPerQuestion = parseInt(maxTokensPerQuestion, 10);
        if (isNaN(convertedMaxTokensPerQuestion)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxTokensPerQuestion');
        }
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: maxTokensPerQuestion –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedMaxTokensPerQuestion
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ maxTokensPerQuestion:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxTokensPerQuestion',
          code: 'INVALID_MAX_TOKENS_PER_QUESTION',
        });
      }

      try {
        convertedOpenRouterTemperature = parseFloat(openRouterTemperature);
        if (isNaN(convertedOpenRouterTemperature)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterTemperature');
        }
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: openRouterTemperature –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedOpenRouterTemperature
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ openRouterTemperature:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterTemperature',
          code: 'INVALID_OPENROUTER_TEMPERATURE',
        });
      }

      try {
        convertedOpenRouterMaxTokens = parseInt(openRouterMaxTokens, 10);
        if (isNaN(convertedOpenRouterMaxTokens)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterMaxTokens');
        }
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: openRouterMaxTokens –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedOpenRouterMaxTokens
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ openRouterMaxTokens:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterMaxTokens',
          code: 'INVALID_OPENROUTER_MAX_TOKENS',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const existingSettings = await withPrisma(async (prisma) => {
        return await prisma.interviewAssistantSettings.findFirst({
          where: {
            isActive: true,
          },
        });
      });

      let updatedSettings;

      if (existingSettings) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        updatedSettings = await withPrisma(async (prisma) => {
          return await prisma.interviewAssistantSettings.update({
            where: {
              id: existingSettings.id,
            },
            data: {
              apiKey,
              maxQuestionsPerDay: convertedMaxQuestionsPerDay,
              maxTokensPerQuestion: convertedMaxTokensPerQuestion,
              isActive,
              apiType,
              // –ü–æ–ª—è –¥–ª—è OpenRouter
              openRouterApiKey,
              openRouterBaseUrl,
              openRouterModel,
              openRouterTemperature: convertedOpenRouterTemperature,
              openRouterMaxTokens: convertedOpenRouterMaxTokens,
            },
          });
        });

        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        updatedSettings = await withPrisma(async (prisma) => {
          return await prisma.interviewAssistantSettings.create({
            data: {
              apiKey,
              maxQuestionsPerDay: convertedMaxQuestionsPerDay,
              maxTokensPerQuestion: convertedMaxTokensPerQuestion,
              isActive,
              apiType,
              // –ü–æ–ª—è –¥–ª—è OpenRouter
              openRouterApiKey,
              openRouterBaseUrl,
              openRouterModel,
              openRouterTemperature: convertedOpenRouterTemperature,
              openRouterMaxTokens: convertedOpenRouterMaxTokens,
            },
          });
        });

        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await logAdminAction(
        req.admin.id,
        'update_interview_assistant_settings',
        'settings',
        updatedSettings.id,
        {
          maxQuestionsPerDay,
          maxTokensPerQuestion,
          isActive,
          apiType,
          // –ü–æ–ª—è –¥–ª—è OpenRouter (–±–µ–∑ API –∫–ª—é—á–∞)
          openRouterBaseUrl,
          openRouterModel,
          openRouterTemperature,
          openRouterMaxTokens,
          // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        }
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return res.status(200).json({
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        settings: updatedSettings,
      });
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
        error
      );
      console.error(
        '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:',
        {
          message: error.message,
          stack: error.stack,
        }
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        error: error.message,
        code: 'SETTINGS_UPDATE_ERROR',
      });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}

export default withAdminAuth(handler);
