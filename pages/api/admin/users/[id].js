import {
  withAdminAuth,
  logAdminAction,
} from '../../../../lib/middleware/adminAuth';
import { withPrisma } from '../../../../lib/prisma';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
 * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
 */
async function handler(req, res) {
  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
  const { id } = req.query;

  console.log(
    `Admin User Details API: –ó–∞–ø—Ä–æ—Å ${req.method} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${req.admin.id}`
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  if (!id) {
    console.error('Admin User Details API: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
    return res.status(400).json({
      success: false,
      message: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω',
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (req.method === 'GET') {
    try {
      console.log(
        `Admin User Details API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${id}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const user = await withPrisma(async (prisma) => {
        return await prisma.user.findUnique({
          where: { id },
          include: {
            userPoints: true,
            interviewerSessions: {
              take: 5,
              orderBy: { scheduledTime: 'desc' },
              include: {
                interviewee: {
                  select: {
                    id: true,
                    name: true,
                    email: true,
                    image: true,
                  },
                },
                interviewFeedback: true,
              },
            },
            intervieweeSessions: {
              take: 5,
              orderBy: { scheduledTime: 'desc' },
              include: {
                interviewer: {
                  select: {
                    id: true,
                    name: true,
                    email: true,
                    image: true,
                  },
                },
                interviewFeedback: true,
              },
            },
            violations: {
              orderBy: { createdAt: 'desc' },
            },
            pointsTransactions: {
              take: 10,
              orderBy: { createdAt: 'desc' },
            },
            _count: {
              select: {
                interviewerSessions: true,
                intervieweeSessions: true,
                violations: true,
                pointsTransactions: true,
              },
            },
          },
        });
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (!user) {
        console.error(`Admin User Details API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await logAdminAction(req.admin.id, 'view_user_details', 'user', id, {});

      console.log(
        `Admin User Details API: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞`
      );

      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user –æ–±—ä–µ–∫—Ç–∞:', {
        id: user.id,
        name: user.name,
        email: user.email,
        hasName: !!user.name,
        nameType: typeof user.name,
        nameValue: user.name,
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      return res.status(200).json({
        success: true,
        data: user,
      });
    } catch (error) {
      console.error(
        'Admin User Details API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:',
        error
      );
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ PATCH –∑–∞–ø—Ä–æ—Å–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (req.method === 'PATCH') {
    try {
      const { name, email, role, isBlocked } = req.body;

      console.log(`Admin User Details API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, {
        name,
        email,
        role,
        isBlocked,
      });

      const result = await withPrisma(async (prisma) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingUser = await prisma.user.findUnique({
          where: { id },
          select: {
            id: true,
            role: true,
            isBlocked: true,
            name: true,
            email: true,
          },
        });

        if (!existingUser) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ–±—è
        if (id === req.admin.id) {
          if (role !== undefined && role !== existingUser.role) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å');
          }
          if (isBlocked === true) {
            throw new Error('–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
          }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {};

        if (name !== undefined) updateData.name = name;
        if (email !== undefined) updateData.email = email;
        if (role !== undefined) updateData.role = role;
        if (isBlocked !== undefined) updateData.isBlocked = isBlocked;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedUser = await prisma.user.update({
          where: { id },
          data: updateData,
          include: {
            userPoints: true,
          },
        });

        return { updatedUser, existingUser };
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await logAdminAction(
        req.admin.id,
        isBlocked !== undefined
          ? isBlocked
            ? 'block_user'
            : 'unblock_user'
          : 'update_user',
        'user',
        id,
        {
          previousData: {
            role: result.existingUser.role,
            isBlocked: result.existingUser.isBlocked,
            name: result.existingUser.name,
            email: result.existingUser.email,
          },
          updatedData: { name, email, role, isBlocked },
        }
      );

      console.log(
        `Admin User Details API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      return res.status(200).json({
        success: true,
        data: result.updatedUser,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      });
    } catch (error) {
      console.error(
        'Admin User Details API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        error
      );
      return res.status(500).json({
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (req.method === 'DELETE') {
    try {
      console.log(`Admin User Details API: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}`);

      // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (id === req.admin.id) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç',
        });
      }

      const deletedUser = await withPrisma(async (prisma) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingUser = await prisma.user.findUnique({
          where: { id },
          select: { id: true, name: true, email: true, role: true },
        });

        if (!existingUser) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.delete({
          where: { id },
        });

        return existingUser;
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await logAdminAction(req.admin.id, 'delete_user', 'user', id, {
        deletedUser: {
          id: deletedUser.id,
          name: deletedUser.name,
          email: deletedUser.email,
          role: deletedUser.role,
        },
      });

      console.log(`Admin User Details API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      return res.status(200).json({
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      });
    } catch (error) {
      console.error(
        'Admin User Details API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        error
      );
      return res.status(500).json({
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  console.error(`Admin User Details API: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ ${req.method}`);
  return res.status(405).json({
    success: false,
    message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
  });
}

export default withAdminAuth(handler);
