import {
  withAdminAuth,
  logAdminAction,
} from '../../../lib/middleware/adminAuth';
import { withPrisma } from '../../../lib/prisma';

/**
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 * –î–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 */
async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ middleware —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    if (!req.admin || !req.admin.id) {
      console.error('Admin Statistics API: req.admin –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω middleware');
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      });
    }

    console.log(
      'Admin Statistics API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
      req.admin.id
    );

    const statistics = await withPrisma(async (prisma) => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const totalUsers = await prisma.user.count();

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
      const activeInterviews = await prisma.mockInterview.count({
        where: {
          status: {
            in: ['pending', 'confirmed', 'in_progress'],
          },
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
      const roleStats = await prisma.user.groupBy({
        by: ['role'],
        _count: {
          role: true,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const interviewStats = await prisma.mockInterview.groupBy({
        by: ['status'],
        _count: {
          status: true,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const newUsersLast30Days = await prisma.user.count({
        where: {
          createdAt: {
            gte: thirtyDaysAgo,
          },
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const blockedUsers = await prisma.user.count({
        where: {
          isBlocked: true,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–∫–∞–º
      const pointsStats = await prisma.userPoints.aggregate({
        _sum: {
          points: true,
        },
        _avg: {
          points: true,
        },
        _count: {
          points: true,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

      const recentAdminActions = await prisma.adminActionLog.count({
        where: {
          createdAt: {
            gte: sevenDaysAgo,
          },
        },
      });

      return {
        users: {
          total: totalUsers,
          newLast30Days: newUsersLast30Days,
          blocked: blockedUsers,
          byRole: roleStats.reduce((acc, stat) => {
            acc[stat.role] = stat._count.role;
            return acc;
          }, {}),
        },
        interviews: {
          active: activeInterviews,
          byStatus: interviewStats.reduce((acc, stat) => {
            acc[stat.status] = stat._count.status;
            return acc;
          }, {}),
        },
        points: {
          totalIssued: pointsStats._sum.points || 0,
          averagePerUser: Math.round(pointsStats._avg.points || 0),
          usersWithPoints: pointsStats._count.points || 0,
        },
        adminActivity: {
          actionsLast7Days: recentAdminActions,
        },
      };
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await logAdminAction(
      req.admin.id,
      'VIEW_STATISTICS',
      'SYSTEM',
      'statistics',
      { timestamp: new Date().toISOString() }
    );

    console.log('Admin Statistics API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', {
      success: true,
      data: statistics,
    });
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: statistics –æ–±—ä–µ–∫—Ç:', statistics);
    console.log(
      'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–ª—é—á–∏ statistics:',
      Object.keys(statistics)
    );

    return res.status(200).json({
      success: true,
      data: statistics,
    });
  } catch (error) {
    console.error(
      'Admin Statistics API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
      error
    );
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
    });
  }
}

export default withAdminAuth(handler);
