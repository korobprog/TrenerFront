/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * –±–µ–∑ middleware –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

import prisma from '../../lib/prisma';

export default async function handler(req, res) {
  console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å');
  console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –ú–µ—Ç–æ–¥:', req.method);
  console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: URL:', req.url);

  if (req.method === 'GET') {
    try {
      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      const testQuery = await prisma.$queryRaw`SELECT 1 as test`;
      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å–ø–µ—à–µ–Ω:', testQuery);

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      const settings = await prisma.interviewAssistantSettings.findFirst({
        where: { isActive: true },
      });
      console.log(
        'üß™ –¢–ï–°–¢–û–í–´–ô API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:',
        settings ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      );

      return res.status(200).json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        dbConnection: 'OK',
        settingsFound: !!settings,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      console.error('üß™ –¢–ï–°–¢–û–í–´–ô API: –û—à–∏–±–∫–∞:', error.message);
      console.error('üß™ –¢–ï–°–¢–û–í–´–ô API: Stack trace:', error.stack);

      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º API',
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  if (req.method === 'POST') {
    try {
      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
      console.log(
        'üß™ –¢–ï–°–¢–û–í–´–ô API: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:',
        JSON.stringify(req.body, null, 2)
      );

      const testSettings = {
        apiKey: 'test-minimal-key',
        maxQuestionsPerDay: 5,
        maxTokensPerQuestion: 2000,
        isActive: false, // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        apiType: 'openrouter',
        openRouterApiKey: req.body.openRouterApiKey || 'test-key',
        openRouterBaseUrl: 'https://openrouter.ai/api/v1',
        openRouterModel: 'google/gemma-3-12b-it:free',
        openRouterTemperature: 0.7,
        openRouterMaxTokens: 2000,
      };

      const created = await prisma.interviewAssistantSettings.create({
        data: testSettings,
      });

      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —Å ID:', created.id);

      // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await prisma.interviewAssistantSettings.delete({
        where: { id: created.id },
      });

      console.log('üß™ –¢–ï–°–¢–û–í–´–ô API: –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã');

      return res.status(200).json({
        success: true,
        message: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        createdId: created.id,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      console.error('üß™ –¢–ï–°–¢–û–í–´–ô API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error.message);
      console.error('üß™ –¢–ï–°–¢–û–í–´–ô API: Stack trace:', error.stack);

      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º API',
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  return res.status(405).json({
    success: false,
    message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
    allowedMethods: ['GET', 'POST'],
  });
}
