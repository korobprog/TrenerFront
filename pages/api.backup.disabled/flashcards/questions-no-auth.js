import prisma from '../../../lib/prisma';
import { v4 as uuidv4 } from 'uuid';

/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * GET /api/flashcards/questions-no-auth
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:
 * - topic: string - —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - difficulty: string - —Å–ª–æ–∂–Ω–æ—Å—Ç—å ('easy'|'medium'|'hard') (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - mode: string - —Ä–µ–∂–∏–º ('study'|'review'|'exam') (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'study')
 * - limit: number - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10, –º–∞–∫—Å–∏–º—É–º 50)
 */
export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('=== –¢–ï–°–¢ API –§–õ–ï–®–ö–ê–†–¢ –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { topic, difficulty, mode = 'study', limit = '10' } = req.query;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const limitNum = Math.min(parseInt(limit, 10) || 10, 50); // –ú–∞–∫—Å–∏–º—É–º 50 –≤–æ–ø—Ä–æ—Å–æ–≤

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    const validModes = ['study', 'review', 'exam'];
    if (!validModes.includes(mode)) {
      return res.status(400).json({
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: study, review, exam',
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const validDifficulties = ['easy', 'medium', 'hard'];
    if (difficulty && !validDifficulties.includes(difficulty)) {
      return res.status(400).json({
        message:
          '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: easy, medium, hard',
      });
    }

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions = {};

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
    if (topic) {
      whereConditions.topic = topic;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (difficulty) {
      whereConditions.difficulty = difficulty;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    whereConditions.text = {
      not: {
        equals: '',
      },
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let orderBy = {};
    switch (mode) {
      case 'study':
        orderBy = [{ createdAt: 'desc' }];
        break;
      case 'review':
        orderBy = [{ updatedAt: 'asc' }];
        break;
      case 'exam':
        orderBy = [{ id: 'asc' }];
        break;
      default:
        orderBy = [{ createdAt: 'desc' }];
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const totalAvailable = await prisma.question.count({
      where: whereConditions,
    });

    console.log('üîç –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:', JSON.stringify(whereConditions, null, 2));
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', totalAvailable);

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã (–±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const questions = await prisma.question.findMany({
      where: whereConditions,
      orderBy,
      take: limitNum,
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const sessionId = uuidv4();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const formattedQuestions = questions.map((question) => ({
      id: question.id,
      questionText: question.text,
      topic: question.topic,
      difficulty: question.difficulty,
      tags: question.tags,
      estimatedTime: question.estimatedTime,
      category: question.category,
      hasAnswer: !!question.answer,
      // –ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      userProgress: null,
      isFavorite: false,
    }));

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', formattedQuestions.length);
    console.log(
      'üîç –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:',
      formattedQuestions.slice(0, 3).map((q) => ({
        id: q.id,
        text: q.questionText?.substring(0, 50) + '...',
        topic: q.topic,
        difficulty: q.difficulty,
      }))
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if (formattedQuestions.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏');

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const fallbackQuestions = await prisma.question.findMany({
        where: {
          text: { not: '' },
        },
        orderBy: { createdAt: 'desc' },
        take: Math.min(limitNum, 5),
      });

      const fallbackFormatted = fallbackQuestions.map((question) => ({
        id: question.id,
        questionText: question.text,
        topic: question.topic,
        difficulty: question.difficulty,
        tags: question.tags,
        estimatedTime: question.estimatedTime,
        category: question.category,
        hasAnswer: !!question.answer,
        userProgress: null,
        isFavorite: false,
      }));

      if (fallbackFormatted.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${fallbackFormatted.length} fallback –≤–æ–ø—Ä–æ—Å–æ–≤`);
        return res.status(200).json({
          questions: fallbackFormatted,
          sessionId,
          totalAvailable: fallbackFormatted.length,
          mode,
          filters: {
            topic,
            difficulty,
          },
          fallback: true,
          message:
            '–ü–æ–∫–∞–∑–∞–Ω—ã –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∫–∞–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          authRequired: false,
        });
      }
    }

    return res.status(200).json({
      questions: formattedQuestions,
      sessionId,
      totalAvailable,
      mode,
      filters: {
        topic,
        difficulty,
      },
      authRequired: false,
    });
  } catch (error) {
    console.error('=== –û–®–ò–ë–ö–ê –í API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
    console.error('üö® –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    console.error('üö® –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    console.error('üö® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', req.query);
    console.error('=== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ===');

    return res.status(500).json({
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  } finally {
    await prisma.$disconnect();
  }
}
