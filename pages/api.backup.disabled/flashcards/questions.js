import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]';
import prisma from '../../../lib/prisma';
import { v4 as uuidv4 } from 'uuid';

/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
 * GET /api/flashcards/questions
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:
 * - topic: string - —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - difficulty: string - —Å–ª–æ–∂–Ω–æ—Å—Ç—å ('easy'|'medium'|'hard') (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - mode: string - —Ä–µ–∂–∏–º ('study'|'review'|'exam') (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'study')
 * - limit: number - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10, –º–∞–∫—Å–∏–º—É–º 50)
 * - excludeAnswered: boolean - –∏—Å–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 */
export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let session = null;
    let userId = null;

    try {
      session = await getServerSession(req, res, authOptions);
      console.log(
        'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç getServerSession:',
        session ? '—Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞' : '—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      );

      if (session && session.user && session.user.id) {
        userId = session.user.id;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userId);
      } else {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (authError) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    }

    // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    // TODO: –í–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    if (!session) {
      console.log(
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∂–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)'
      );
      // return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const {
      topic,
      difficulty,
      mode = 'study',
      limit = '10',
      excludeAnswered = 'false',
    } = req.query;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const limitNum = Math.min(parseInt(limit, 10) || 10, 50); // –ú–∞–∫—Å–∏–º—É–º 50 –≤–æ–ø—Ä–æ—Å–æ–≤
    const excludeAnsweredBool = excludeAnswered === 'true';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    const validModes = ['study', 'review', 'exam'];
    if (!validModes.includes(mode)) {
      return res.status(400).json({
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: study, review, exam',
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const validDifficulties = ['easy', 'medium', 'hard'];
    if (difficulty && !validDifficulties.includes(difficulty)) {
      return res.status(400).json({
        message:
          '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: easy, medium, hard',
      });
    }

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions = {};

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
    if (topic) {
      whereConditions.topic = topic;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (difficulty) {
      whereConditions.difficulty = difficulty;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–ª–µ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –≤ —Å—Ö–µ–º–µ)
    whereConditions.text = {
      not: {
        equals: '',
      },
    };

    // –§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    if (excludeAnsweredBool && userId) {
      whereConditions.NOT = {
        userProgress: {
          some: {
            userId: userId,
            status: {
              in: ['known', 'completed'],
            },
          },
        },
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let orderBy = {};
    switch (mode) {
      case 'study':
        // –î–ª—è –∏–∑—É—á–µ–Ω–∏—è - —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ç–µ–º —Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        orderBy = [{ createdAt: 'desc' }];
        break;
      case 'review':
        // –î–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        orderBy = [{ updatedAt: 'asc' }];
        break;
      case 'exam':
        // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ - —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ID)
        orderBy = [{ id: 'asc' }];
        break;
      default:
        orderBy = [{ createdAt: 'desc' }];
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const totalAvailable = await prisma.question.count({
      where: whereConditions,
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã (—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    const includeUserData = userId
      ? {
          userProgress: {
            where: {
              userId: userId,
            },
            orderBy: {
              lastReviewed: 'desc',
            },
            take: 1,
          },
          favoriteQuestions: {
            where: {
              userId: userId,
            },
          },
        }
      : {};

    const questions = await prisma.question.findMany({
      where: whereConditions,
      orderBy,
      take: limitNum,
      include: includeUserData,
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const sessionId = uuidv4();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const formattedQuestions = questions.map((question) => ({
      id: question.id,
      questionText: question.text,
      topic: question.topic,
      difficulty: question.difficulty,
      tags: question.tags,
      estimatedTime: question.estimatedTime,
      category: question.category,
      hasAnswer: !!question.answer, // –£–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
      userProgress: question.userProgress[0] || null,
      isFavorite:
        question.favoriteQuestions && question.favoriteQuestions.length > 0,
      // –ù–µ –≤–∫–ª—é—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –æ—Ç–≤–µ—Ç - –æ–Ω –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    }));

    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');
    console.log(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}`);
    console.log(`üîç –°–µ—Å—Å–∏—è: ${session ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
    console.log(`üîç –†–µ–∂–∏–º: ${mode}`);
    console.log(`üîç –§–∏–ª—å—Ç—Ä—ã:`, {
      topic,
      difficulty,
      excludeAnswered: excludeAnsweredBool,
    });
    console.log(`üîç –£—Å–ª–æ–≤–∏—è WHERE:`, JSON.stringify(whereConditions, null, 2));
    console.log(`üîç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:`, JSON.stringify(orderBy, null, 2));
    console.log(`üîç –õ–∏–º–∏—Ç: ${limitNum}`);
    console.log(`üîç –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalAvailable}`);
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${formattedQuestions.length}`);
    console.log(
      `üîç –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:`,
      formattedQuestions.slice(0, 3).map((q) => ({
        id: q.id,
        text: q.questionText?.substring(0, 50) + '...',
        topic: q.topic,
        difficulty: q.difficulty,
      }))
    );
    console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if (formattedQuestions.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏');

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const fallbackQuestions = await prisma.question.findMany({
        where: {
          text: { not: '' },
        },
        orderBy: { createdAt: 'desc' },
        take: Math.min(limitNum, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è fallback
        include: userId
          ? {
              userProgress: {
                where: {
                  userId: userId,
                },
                orderBy: {
                  lastReviewed: 'desc',
                },
                take: 1,
              },
              favoriteQuestions: {
                where: {
                  userId: userId,
                },
              },
            }
          : {},
      });

      const fallbackFormatted = fallbackQuestions.map((question) => ({
        id: question.id,
        questionText: question.text,
        topic: question.topic,
        difficulty: question.difficulty,
        tags: question.tags,
        estimatedTime: question.estimatedTime,
        category: question.category,
        hasAnswer: !!question.answer,
        userProgress: question.userProgress[0] || null,
        isFavorite:
          question.favoriteQuestions && question.favoriteQuestions.length > 0,
      }));

      if (fallbackFormatted.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${fallbackFormatted.length} fallback –≤–æ–ø—Ä–æ—Å–æ–≤`);
        return res.status(200).json({
          questions: fallbackFormatted,
          sessionId,
          totalAvailable: fallbackFormatted.length,
          mode,
          filters: {
            topic,
            difficulty,
            excludeAnswered: excludeAnsweredBool,
          },
          fallback: true,
          message:
            '–ü–æ–∫–∞–∑–∞–Ω—ã –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∫–∞–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        });
      }
    }

    return res.status(200).json({
      questions: formattedQuestions,
      sessionId,
      totalAvailable,
      mode,
      filters: {
        topic,
        difficulty,
        excludeAnswered: excludeAnsweredBool,
      },
    });
  } catch (error) {
    console.error('=== –û–®–ò–ë–ö–ê –í API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');
    console.error('üö® –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    console.error('üö® –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    console.error('üö® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', req.query);
    console.error('üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    console.error('=== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ===');

    return res.status(500).json({
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  } finally {
    await prisma.$disconnect();
  }
}
