generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id                Int                     @id @default(autoincrement())
  text              String
  question          String?                 // Дублируем для совместимости
  answer            String?
  options           Json?                   // Массив вариантов ответов
  topic             String?
  difficulty        String?
  tags              Json?                   // Массив тегов
  estimatedTime     Int?                    // Время в секундах
  category          String?
  createdAt         DateTime                @default(now())
  userProgress      UserProgress[]
  favoriteQuestions UserFavoriteQuestion[]
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  conductedInterviewsCount Int                       @default(0)
  createdAt                DateTime                  @default(now())
  isBlocked                Boolean                   @default(false)
  lastLoginAt              DateTime?
  role                     String                    @default("user")
  updatedAt                DateTime                  @updatedAt
  password                 String?
  accounts                 Account[]
  adminActions             AdminActionLog[]
  interviewAssistantQAs    InterviewAssistantQA[]
  interviewAssistantUsages InterviewAssistantUsage[]
  intervieweeSessions      MockInterview[]           @relation("IntervieweeRelation")
  interviewerSessions      MockInterview[]           @relation("InterviewerRelation")
  pointsTransactions       PointsTransaction[]
  sessions                 Session[]
  apiSettings              UserApiSettings?
  userPoints               UserPoints?
  userProgress             UserProgress[]
  violations               UserViolation[]
  favoriteQuestions        UserFavoriteQuestion[]
  
  // Новые связи для видео-календаря
  preferences              UserPreferences?
  calendarEvents           CustomCalendarEvent[]
  hostedRooms              VideoRoom[]
  roomParticipations       VideoRoomParticipant[]
  chatMessages             VideoRoomChatMessage[]
  notificationSubscriptions NotificationSubscription[]
  authSettings              UserAuthSettings?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProgress {
  id           Int      @id @default(autoincrement())
  questionId   Int
  status       String
  lastReviewed DateTime @default(now())
  reviewCount  Int      @default(0)
  knownCount   Int      @default(0)
  repeatCount  Int      @default(0)
  searchCount  Int      @default(0)
  unknownCount Int      @default(0)
  userId       String
  isCorrect    Boolean?
  timeSpent    Int?     // Время в секундах
  lastAnswer   String?  // Последний ответ пользователя
  needsReview  Boolean  @default(false)
  createdAt    DateTime @default(now())
  question     Question @relation(fields: [questionId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([questionId, userId])
}

model UserFavoriteQuestion {
  id         Int      @id @default(autoincrement())
  userId     String
  questionId Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model UserPoints {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model MockInterview {
  id                String             @id @default(cuid())
  interviewerId     String
  intervieweeId     String?
  scheduledTime     DateTime
  meetingLink       String
  status            String             @default("pending")
  
  // Обновленные поля для интеграции с видеосистемой
  videoType         String?            @default("google_meet") // google_meet, built_in, external
  videoRoomId       String?
  videoRoom         VideoRoom?         @relation(fields: [videoRoomId], references: [id])
  calendarEvents    CustomCalendarEvent[]
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  calendarEventId   String?
  interviewFeedback InterviewFeedback?
  interviewee       User?              @relation("IntervieweeRelation", fields: [intervieweeId], references: [id])
  interviewer       User               @relation("InterviewerRelation", fields: [interviewerId], references: [id])
}

model InterviewFeedback {
  id                String        @id @default(cuid())
  mockInterviewId   String        @unique
  technicalScore    Int
  feedback          String
  isAccepted        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  interviewerRating Int?
  mockInterview     MockInterview @relation(fields: [mockInterviewId], references: [id])
}

model AdminActionLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  entityType String
  entityId   String
  details    Json?
  createdAt  DateTime @default(now())
  admin      User     @relation(fields: [adminId], references: [id])
}

model InterviewAssistantQA {
  id            String    @id @default(cuid())
  userId        String
  question      String
  answer        String
  createdAt     DateTime  @default(now())
  category      String?
  tags          String?
  company       String?
  interviewDate DateTime?
  user          User      @relation(fields: [userId], references: [id])
}

model InterviewAssistantCache {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model InterviewAssistantUsage {
  id             String    @id @default(cuid())
  userId         String
  date           DateTime
  questionsCount Int       @default(0)
  tokensUsed     Int       @default(0)
  apiCost        Float     @default(0)
  company        String?
  interviewDate  DateTime?
  user           User      @relation(fields: [userId], references: [id])
}

model InterviewAssistantCompany {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewAssistantSettings {
  id                     String  @id @default(cuid())
  apiKey                 String
  maxQuestionsPerDay     Int     @default(10)
  maxTokensPerQuestion   Int     @default(4000)
  isActive               Boolean @default(true)
  apiType                String  @default("gemini")
  langdockAssistantId    String?
  langdockBaseUrl        String  @default("https://api.langdock.com/assistant/v1/chat/completions")
  langdockRegion         String  @default("eu")
  geminiApiKey           String?
  geminiBaseUrl          String  @default("https://generativelanguage.googleapis.com")
  geminiModel            String  @default("gemini-1.5-pro")
  geminiTemperature      Float   @default(0.7)
  enabledModels          String  @default("gemini,anthropic,langdock,huggingface")
  huggingfaceApiKey      String?
  huggingfaceBaseUrl     String  @default("https://api-inference.huggingface.co/models")
  huggingfaceMaxTokens   Int     @default(2000)
  huggingfaceModel       String  @default("mistralai/Mistral-7B-Instruct-v0.2")
  huggingfaceTemperature Float   @default(0.7)
  
  // Поля для OpenRouter
  openRouterApiKey       String?
  openRouterBaseUrl      String? @default("https://openrouter.ai/api/v1")
  openRouterModel        String? @default("google/gemma-3-12b-it:free")
  openRouterTemperature  Float?  @default(0.7)
  openRouterMaxTokens    Int?    @default(4000)
}

model SystemStatistics {
  id                    String   @id @default(cuid())
  date                  DateTime @unique
  totalUsers            Int      @default(0)
  newUsers              Int      @default(0)
  totalInterviews       Int      @default(0)
  completedInterviews   Int      @default(0)
  cancelledInterviews   Int      @default(0)
  noShowInterviews      Int      @default(0)
  averageTechnicalScore Float    @default(0)
  totalPointsIssued     Int      @default(0)
  totalPointsSpent      Int      @default(0)
}

model UserViolation {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model PointsTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String?
  createdAt   DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id])
}

// Обновленные модели для видео-календаря

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Настройки календаря
  defaultCalendarView   String   @default("month") // month, week, day
  workingHoursStart     Int      @default(9)       // 9:00
  workingHoursEnd       Int      @default(18)      // 18:00
  timezone              String   @default("Europe/Moscow")
  
  // Настройки уведомлений
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  reminderMinutes       Int      @default(15)      // за сколько минут напоминать
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model CustomCalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  
  // Связи
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Тип события
  eventType   String   @default("meeting") // meeting, interview, personal, other
  
  // Видеоконференция (опционально)
  videoRoomId String?
  videoRoom   VideoRoom? @relation(fields: [videoRoomId], references: [id])
  
  // Интеграция с собеседованиями
  mockInterviewId String?
  mockInterview   MockInterview? @relation(fields: [mockInterviewId], references: [id])
  
  // Повторяющиеся события
  isRecurring Boolean  @default(false)
  recurringPattern String? // daily, weekly, monthly
  recurringEndDate DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, startTime])
  @@index([eventType])
}

model VideoRoom {
  id          String   @id @default(cuid())
  code        String   @unique // уникальный код комнаты
  name        String
  description String?
  
  // Создатель комнаты
  hostId      String
  host        User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  
  // Настройки комнаты
  isActive    Boolean  @default(true)
  maxParticipants Int  @default(10)
  requiresPassword Boolean @default(false)
  password    String?
  
  // Время жизни комнаты
  scheduledStart DateTime?
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  
  // Связи
  participants VideoRoomParticipant[]
  chatMessages VideoRoomChatMessage[]
  calendarEvents CustomCalendarEvent[]
  mockInterviews MockInterview[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([code])
  @@index([hostId])
  @@index([isActive])
}

model VideoRoomParticipant {
  id          String   @id @default(cuid())
  
  // Связи
  roomId      String
  room        VideoRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Гостевые участники (без регистрации)
  guestName   String?
  
  // Статус участника
  status      String   @default("joined") // joined, left, kicked, banned
  role        String   @default("participant") // host, moderator, participant
  
  // Медиа настройки
  audioEnabled Boolean @default(true)
  videoEnabled Boolean @default(true)
  screenSharing Boolean @default(false)
  
  // Время участия
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model VideoRoomChatMessage {
  id          String   @id @default(cuid())
  
  // Связи
  roomId      String
  room        VideoRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Содержимое
  message     String
  messageType String   @default("text") // text, system, file
  
  // Гостевые сообщения
  guestName   String?
  
  createdAt   DateTime @default(now())
  
  @@index([roomId, createdAt])
  @@index([userId])
}

model NotificationSubscription {
  id          String   @id @default(cuid())
  
  // Связи
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Push уведомления
  endpoint    String
  p256dh      String
  auth        String
  
  // Метаданные
  userAgent   String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, endpoint])
  @@index([userId])
}

model UserApiSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  apiKey                 String?
  baseUrl                String?
  useCustomApi           Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  apiType                String   @default("gemini")
  langdockApiKey         String?
  langdockAssistantId    String?
  langdockBaseUrl        String?
  langdockRegion         String?  @default("eu")
  geminiApiKey           String?
  geminiBaseUrl          String?
  geminiModel            String?
  geminiTemperature      Float?
  huggingfaceApiKey      String?
  huggingfaceBaseUrl     String?  @default("https://api-inference.huggingface.co/models")
  huggingfaceMaxTokens   Int?     @default(100)
  huggingfaceModel       String?  @default("distilgpt2")
  huggingfaceTemperature Float?   @default(0.7)
  selectedModel          String?
  
  // Поля для OpenRouter
  openRouterApiKey         String?
  openRouterBaseUrl        String?  @default("https://openrouter.ai/api")
  openRouterModel          String?  @default("google/gemma-3-12b-it:free")
  openRouterTemperature    Float?   @default(0.7)
  openRouterMaxTokens      Int?     @default(4000)
  
  user                   User     @relation(fields: [userId], references: [id])
}

model UserAuthSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Настройки способов входа
  enableEmailAuth       Boolean  @default(true)   // Магические ссылки
  enableGoogleAuth      Boolean  @default(true)   // Google OAuth
  enableGithubAuth      Boolean  @default(true)   // GitHub OAuth
  enableCredentialsAuth Boolean  @default(true)   // Логин/пароль
  
  // Настройки безопасности
  requireTwoFactor      Boolean  @default(false)  // Двухфакторная аутентификация
  sessionTimeout        Int      @default(24)     // Время жизни сессии в часах
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
