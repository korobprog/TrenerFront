// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id           Int            @id @default(autoincrement())
  text         String
  category     String?
  createdAt    DateTime       @default(now())
  userProgress UserProgress[]
}

model User {
  id                   String             @id @default(cuid())
  name                 String?
  email                String?            @unique
  emailVerified        DateTime?
  image                String?
  role                 String             @default("user") // Новое поле: "user" или "admin"
  isBlocked            Boolean            @default(false)  // Новое поле для блокировки пользователей
  accounts             Account[]
  sessions             Session[]
  userProgress         UserProgress[]
  userPoints           UserPoints?
  interviewerSessions  MockInterview[]    @relation("InterviewerRelation")
  intervieweeSessions  MockInterview[]    @relation("IntervieweeRelation")
  violations           UserViolation[]
  pointsTransactions   PointsTransaction[]
  conductedInterviewsCount Int            @default(0)
  lastLoginAt          DateTime?          // Новое поле для отслеживания последнего входа
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  adminActions         AdminActionLog[]   // Связь с логами административных действий
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProgress {
  id           Int      @id @default(autoincrement())
  question     Question @relation(fields: [questionId], references: [id])
  questionId   Int
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  status       String   // "known", "unknown", "repeat"
  lastReviewed DateTime @default(now())
  reviewCount  Int      @default(0)
  knownCount   Int      @default(0)
  unknownCount Int      @default(0)
  repeatCount  Int      @default(0)
  searchCount  Int      @default(0)

  @@unique([questionId, userId])
}

// Модель для хранения баллов пользователя
model UserPoints {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Модель для мок-собеседований
model MockInterview {
  id                 String             @id @default(cuid())
  interviewer        User               @relation("InterviewerRelation", fields: [interviewerId], references: [id])
  interviewerId      String
  interviewee        User?              @relation("IntervieweeRelation", fields: [intervieweeId], references: [id])
  intervieweeId      String?
  scheduledTime      DateTime
  meetingLink        String
  status             String             @default("pending") // pending, booked, completed, cancelled, no_show
  calendarEventId    String?            // ID события в Google Calendar для возможности обновления
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  interviewFeedback  InterviewFeedback?
}

// Модель для отзывов о собеседовании
model InterviewFeedback {
  id               String        @id @default(cuid())
  mockInterview    MockInterview @relation(fields: [mockInterviewId], references: [id])
  mockInterviewId  String        @unique
  technicalScore   Int           // от 1 до 5
  feedback         String
  interviewerRating Int?         // от 1 до 5, оценка интервьюера отвечающим
  isAccepted       Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

// Модель для логирования административных действий
model AdminActionLog {
  id          String   @id @default(cuid())
  adminId     String
  admin       User     @relation(fields: [adminId], references: [id])
  action      String   // Тип действия: "block_user", "edit_interview", "delete_interview", и т.д.
  entityType  String   // Тип сущности: "user", "interview", "feedback", и т.д.
  entityId    String   // ID сущности, над которой выполнено действие
  details     Json?    // Дополнительные детали действия
  createdAt   DateTime @default(now())
}

// Модель для хранения системной статистики
model SystemStatistics {
  id                    String   @id @default(cuid())
  date                  DateTime @unique
  totalUsers            Int      @default(0)
  newUsers              Int      @default(0)
  totalInterviews       Int      @default(0)
  completedInterviews   Int      @default(0)
  cancelledInterviews   Int      @default(0)
  noShowInterviews      Int      @default(0)
  averageTechnicalScore Float    @default(0)
  totalPointsIssued     Int      @default(0)
  totalPointsSpent      Int      @default(0)
}

// Модель для отслеживания нарушений пользователей
model UserViolation {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        String   // "no_show", "cancellation", etc.
  description String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime // Когда истекает срок действия нарушения
}

// Модель для истории транзакций с баллами
model PointsTransaction {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amount      Int      // Может быть положительным (начисление) или отрицательным (списание)
  type        String   // "booking", "feedback", "cancellation", "no_show", "bonus", etc.
  description String?
  createdAt   DateTime @default(now())
}