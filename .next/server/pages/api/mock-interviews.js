"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/mock-interviews";
exports.ids = ["pages/api/mock-interviews"];
exports.modules = {

/***/ "@next-auth/prisma-adapter":
/*!********************************************!*\
  !*** external "@next-auth/prisma-adapter" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@next-auth/prisma-adapter");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/google":
/*!*********************************************!*\
  !*** external "next-auth/providers/google" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/google");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmock-interviews&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cmock-interviews%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmock-interviews&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cmock-interviews%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_mock_interviews_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\mock-interviews\\index.js */ \"(api)/./pages/api/mock-interviews/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_mock_interviews_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_mock_interviews_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/mock-interviews\",\n        pathname: \"/api/mock-interviews\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_mock_interviews_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRm1vY2staW50ZXJ2aWV3cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDbW9jay1pbnRlcnZpZXdzJTVDaW5kZXguanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDb0U7QUFDcEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGdFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxnRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlcnZpZXctcHJlcC8/ZmFhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXG1vY2staW50ZXJ2aWV3c1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL21vY2staW50ZXJ2aWV3c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21vY2staW50ZXJ2aWV3c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmock-interviews&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cmock-interviews%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/prisma.js":
/*!***********************!*\
  !*** ./lib/prisma.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\n// Предотвращаем создание множества экземпляров Prisma Client в режиме разработки\n// https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#prevent-multiple-instances-in-development\n// Создаем новый экземпляр PrismaClient с включенным логированием запросов\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ]\n});\n// Добавляем логирование для отладки\nconsole.log(\"Prisma Client инициализирован:\", prisma ? \"успешно\" : \"ошибка\");\n// Проверяем доступность моделей\nconsole.log(\"Доступные модели в Prisma Client:\", Object.keys(prisma));\n// Проверяем наличие модели UserPoints\ntry {\n    console.log(\"Проверка модели UserPoints...\");\n    // Выполняем тестовый запрос к модели UserPoints\n    prisma.$queryRaw`SELECT EXISTS (\r\n    SELECT FROM information_schema.tables\r\n    WHERE table_schema = 'public'\r\n    AND table_name = 'UserPoints'\r\n  )`.then((result)=>{\n        console.log(\"Результат проверки таблицы UserPoints:\", result);\n    }).catch((error)=>{\n        console.error(\"Ошибка при проверке таблицы UserPoints:\", error);\n    });\n} catch (error) {\n    console.error(\"Ошибка при проверке модели UserPoints:\", error);\n}\n// Проверяем таблицу Session\ntry {\n    console.log(\"Проверка таблицы Session...\");\n    // Выполняем тестовый запрос к таблице Session\n    prisma.$queryRaw`SELECT EXISTS (\r\n    SELECT FROM information_schema.tables\r\n    WHERE table_schema = 'public'\r\n    AND table_name = 'Session'\r\n  )`.then((result)=>{\n        console.log(\"Результат проверки таблицы Session:\", result);\n        // Если таблица существует, проверяем количество записей\n        if (result[0].exists) {\n            prisma.session.count().then((count)=>{\n                console.log(\"Количество записей в таблице Session:\", count);\n            }).catch((error)=>{\n                console.error(\"Ошибка при подсчете записей в таблице Session:\", error);\n            });\n        }\n    }).catch((error)=>{\n        console.error(\"Ошибка при проверке таблицы Session:\", error);\n    });\n} catch (error) {\n    console.error(\"Ошибка при проверке таблицы Session:\", error);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5QyxpRkFBaUY7QUFDakYsaUlBQWlJO0FBRWpJLDBFQUEwRTtBQUMxRSxNQUFNQyxTQUFTLElBQUlELHdEQUFZQSxDQUFDO0lBQzlCRSxLQUFLO1FBQUM7UUFBUztRQUFRO1FBQVE7S0FBUTtBQUN6QztBQUVBLG9DQUFvQztBQUNwQ0MsUUFBUUQsR0FBRyxDQUFDLGtDQUFrQ0QsU0FBUyxZQUFZO0FBRW5FLGdDQUFnQztBQUNoQ0UsUUFBUUQsR0FBRyxDQUFDLHFDQUFxQ0UsT0FBT0MsSUFBSSxDQUFDSjtBQUU3RCxzQ0FBc0M7QUFDdEMsSUFBSTtJQUNGRSxRQUFRRCxHQUFHLENBQUM7SUFDWixnREFBZ0Q7SUFDaERELE9BQU9LLFNBQVMsQ0FBQzs7OztHQUloQixDQUFDLENBQ0NDLElBQUksQ0FBQyxDQUFDQztRQUNMTCxRQUFRRCxHQUFHLENBQUMsMENBQTBDTTtJQUN4RCxHQUNDQyxLQUFLLENBQUMsQ0FBQ0M7UUFDTlAsUUFBUU8sS0FBSyxDQUFDLDJDQUEyQ0E7SUFDM0Q7QUFDSixFQUFFLE9BQU9BLE9BQU87SUFDZFAsUUFBUU8sS0FBSyxDQUFDLDBDQUEwQ0E7QUFDMUQ7QUFFQSw0QkFBNEI7QUFDNUIsSUFBSTtJQUNGUCxRQUFRRCxHQUFHLENBQUM7SUFDWiw4Q0FBOEM7SUFDOUNELE9BQU9LLFNBQVMsQ0FBQzs7OztHQUloQixDQUFDLENBQ0NDLElBQUksQ0FBQyxDQUFDQztRQUNMTCxRQUFRRCxHQUFHLENBQUMsdUNBQXVDTTtRQUVuRCx3REFBd0Q7UUFDeEQsSUFBSUEsTUFBTSxDQUFDLEVBQUUsQ0FBQ0csTUFBTSxFQUFFO1lBQ3BCVixPQUFPVyxPQUFPLENBQ1hDLEtBQUssR0FDTE4sSUFBSSxDQUFDLENBQUNNO2dCQUNMVixRQUFRRCxHQUFHLENBQUMseUNBQXlDVztZQUN2RCxHQUNDSixLQUFLLENBQUMsQ0FBQ0M7Z0JBQ05QLFFBQVFPLEtBQUssQ0FDWCxrREFDQUE7WUFFSjtRQUNKO0lBQ0YsR0FDQ0QsS0FBSyxDQUFDLENBQUNDO1FBQ05QLFFBQVFPLEtBQUssQ0FBQyx3Q0FBd0NBO0lBQ3hEO0FBQ0osRUFBRSxPQUFPQSxPQUFPO0lBQ2RQLFFBQVFPLEtBQUssQ0FBQyx3Q0FBd0NBO0FBQ3hEO0FBRUEsaUVBQWVULE1BQU1BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlcnZpZXctcHJlcC8uL2xpYi9wcmlzbWEuanM/NzUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XHJcblxyXG4vLyDQn9GA0LXQtNC+0YLQstGA0LDRidCw0LXQvCDRgdC+0LfQtNCw0L3QuNC1INC80L3QvtC20LXRgdGC0LLQsCDRjdC60LfQtdC80L/Qu9GP0YDQvtCyIFByaXNtYSBDbGllbnQg0LIg0YDQtdC20LjQvNC1INGA0LDQt9GA0LDQsdC+0YLQutC4XHJcbi8vIGh0dHBzOi8vd3d3LnByaXNtYS5pby9kb2NzL2d1aWRlcy9wZXJmb3JtYW5jZS1hbmQtb3B0aW1pemF0aW9uL2Nvbm5lY3Rpb24tbWFuYWdlbWVudCNwcmV2ZW50LW11bHRpcGxlLWluc3RhbmNlcy1pbi1kZXZlbG9wbWVudFxyXG5cclxuLy8g0KHQvtC30LTQsNC10Lwg0L3QvtCy0YvQuSDRjdC60LfQtdC80L/Qu9GP0YAgUHJpc21hQ2xpZW50INGBINCy0LrQu9GO0YfQtdC90L3Ri9C8INC70L7Qs9C40YDQvtCy0LDQvdC40LXQvCDQt9Cw0L/RgNC+0YHQvtCyXHJcbmNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoe1xyXG4gIGxvZzogWydxdWVyeScsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcclxufSk7XHJcblxyXG4vLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LvQvtCz0LjRgNC+0LLQsNC90LjQtSDQtNC70Y8g0L7RgtC70LDQtNC60LhcclxuY29uc29sZS5sb2coJ1ByaXNtYSBDbGllbnQg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9OicsIHByaXNtYSA/ICfRg9GB0L/QtdGI0L3QvicgOiAn0L7RiNC40LHQutCwJyk7XHJcblxyXG4vLyDQn9GA0L7QstC10YDRj9C10Lwg0LTQvtGB0YLRg9C/0L3QvtGB0YLRjCDQvNC+0LTQtdC70LXQuVxyXG5jb25zb2xlLmxvZygn0JTQvtGB0YLRg9C/0L3Ri9C1INC80L7QtNC10LvQuCDQsiBQcmlzbWEgQ2xpZW50OicsIE9iamVjdC5rZXlzKHByaXNtYSkpO1xyXG5cclxuLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC90LDQu9C40YfQuNC1INC80L7QtNC10LvQuCBVc2VyUG9pbnRzXHJcbnRyeSB7XHJcbiAgY29uc29sZS5sb2coJ9Cf0YDQvtCy0LXRgNC60LAg0LzQvtC00LXQu9C4IFVzZXJQb2ludHMuLi4nKTtcclxuICAvLyDQktGL0L/QvtC70L3Rj9C10Lwg0YLQtdGB0YLQvtCy0YvQuSDQt9Cw0L/RgNC+0YEg0Log0LzQvtC00LXQu9C4IFVzZXJQb2ludHNcclxuICBwcmlzbWEuJHF1ZXJ5UmF3YFNFTEVDVCBFWElTVFMgKFxyXG4gICAgU0VMRUNUIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlc1xyXG4gICAgV0hFUkUgdGFibGVfc2NoZW1hID0gJ3B1YmxpYydcclxuICAgIEFORCB0YWJsZV9uYW1lID0gJ1VzZXJQb2ludHMnXHJcbiAgKWBcclxuICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ9Cg0LXQt9GD0LvRjNGC0LDRgiDQv9GA0L7QstC10YDQutC4INGC0LDQsdC70LjRhtGLIFVzZXJQb2ludHM6JywgcmVzdWx0KTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0L/RgNC+0LLQtdGA0LrQtSDRgtCw0LHQu9C40YbRiyBVc2VyUG9pbnRzOicsIGVycm9yKTtcclxuICAgIH0pO1xyXG59IGNhdGNoIChlcnJvcikge1xyXG4gIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0L/RgNC+0LLQtdGA0LrQtSDQvNC+0LTQtdC70LggVXNlclBvaW50czonLCBlcnJvcik7XHJcbn1cclxuXHJcbi8vINCf0YDQvtCy0LXRgNGP0LXQvCDRgtCw0LHQu9C40YbRgyBTZXNzaW9uXHJcbnRyeSB7XHJcbiAgY29uc29sZS5sb2coJ9Cf0YDQvtCy0LXRgNC60LAg0YLQsNCx0LvQuNGG0YsgU2Vzc2lvbi4uLicpO1xyXG4gIC8vINCS0YvQv9C+0LvQvdGP0LXQvCDRgtC10YHRgtC+0LLRi9C5INC30LDQv9GA0L7RgSDQuiDRgtCw0LHQu9C40YbQtSBTZXNzaW9uXHJcbiAgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgRVhJU1RTIChcclxuICAgIFNFTEVDVCBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXNcclxuICAgIFdIRVJFIHRhYmxlX3NjaGVtYSA9ICdwdWJsaWMnXHJcbiAgICBBTkQgdGFibGVfbmFtZSA9ICdTZXNzaW9uJ1xyXG4gIClgXHJcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfQoNC10LfRg9C70YzRgtCw0YIg0L/RgNC+0LLQtdGA0LrQuCDRgtCw0LHQu9C40YbRiyBTZXNzaW9uOicsIHJlc3VsdCk7XHJcblxyXG4gICAgICAvLyDQldGB0LvQuCDRgtCw0LHQu9C40YbQsCDRgdGD0YnQtdGB0YLQstGD0LXRgiwg0L/RgNC+0LLQtdGA0Y/QtdC8INC60L7Qu9C40YfQtdGB0YLQstC+INC30LDQv9C40YHQtdC5XHJcbiAgICAgIGlmIChyZXN1bHRbMF0uZXhpc3RzKSB7XHJcbiAgICAgICAgcHJpc21hLnNlc3Npb25cclxuICAgICAgICAgIC5jb3VudCgpXHJcbiAgICAgICAgICAudGhlbigoY291bnQpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ9Ca0L7Qu9C40YfQtdGB0YLQstC+INC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1IFNlc3Npb246JywgY291bnQpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICAn0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LTRgdGH0LXRgtC1INC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1IFNlc3Npb246JyxcclxuICAgICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0L/RgNC+0LLQtdGA0LrQtSDRgtCw0LHQu9C40YbRiyBTZXNzaW9uOicsIGVycm9yKTtcclxuICAgIH0pO1xyXG59IGNhdGNoIChlcnJvcikge1xyXG4gIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0L/RgNC+0LLQtdGA0LrQtSDRgtCw0LHQu9C40YbRiyBTZXNzaW9uOicsIGVycm9yKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJpc21hO1xyXG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicHJpc21hIiwibG9nIiwiY29uc29sZSIsIk9iamVjdCIsImtleXMiLCIkcXVlcnlSYXciLCJ0aGVuIiwicmVzdWx0IiwiY2F0Y2giLCJlcnJvciIsImV4aXN0cyIsInNlc3Npb24iLCJjb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.js\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].js":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"next-auth/providers/google\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @next-auth/prisma-adapter */ \"@next-auth/prisma-adapter\");\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./lib/prisma.js\");\n\n\n\n\n// Добавляем логирование переменных окружения для отладки\nconsole.log(\"NextAuth: Проверка переменных окружения\");\nconsole.log(\"NextAuth: NEXTAUTH_URL =\", process.env.NEXTAUTH_URL);\nconsole.log(\"NextAuth: NEXTAUTH_SECRET существует =\", !!process.env.NEXTAUTH_SECRET);\nconsole.log(\"NextAuth: GOOGLE_CLIENT_ID существует =\", !!process.env.GOOGLE_CLIENT_ID);\nconsole.log(\"NextAuth: GOOGLE_CLIENT_SECRET существует =\", !!process.env.GOOGLE_CLIENT_SECRET);\nconst authOptions = {\n    adapter: (0,_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2__.PrismaAdapter)(_lib_prisma__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n    providers: [\n        next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n            allowDangerousEmailAccountLinking: true\n        })\n    ],\n    callbacks: {\n        async session ({ session, user }) {\n            console.log(\"NextAuth callback: session вызван\");\n            console.log(\"NextAuth callback: session параметры:\", {\n                session,\n                user\n            });\n            // Добавляем id пользователя в объект сессии\n            session.user.id = user.id;\n            console.log(\"NextAuth callback: обновленная сессия:\", session);\n            return session;\n        },\n        async signIn ({ user, account, profile, email, credentials }) {\n            console.log(\"NextAuth callback: signIn вызван\");\n            console.log(\"NextAuth callback: signIn параметры:\", {\n                user: user ? {\n                    id: user.id,\n                    email: user.email\n                } : null,\n                account: account ? {\n                    provider: account.provider\n                } : null,\n                profile: profile ? {\n                    email: profile.email\n                } : null\n            });\n            // Всегда разрешаем вход, даже если аккаунт не связан\n            // Это позволит создать новый аккаунт, если старый был удален\n            return true;\n        }\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    },\n    secret: process.env.NEXTAUTH_SECRET\n};\n// Добавляем логирование перед экспортом\nconsole.log(\"NextAuth: Конфигурация загружена\");\nconsole.log(\"NextAuth: Провайдеры:\", authOptions.providers.map((p)=>p.id).join(\", \"));\nconsole.log(\"NextAuth: Адаптер настроен:\", !!authOptions.adapter);\nconsole.log(\"NextAuth: Секрет настроен:\", !!authOptions.secret);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUNFO0FBQ2pCO0FBRXpDLHlEQUF5RDtBQUN6REksUUFBUUMsR0FBRyxDQUFDO0FBQ1pELFFBQVFDLEdBQUcsQ0FBQyw0QkFBNEJDLFFBQVFDLEdBQUcsQ0FBQ0MsWUFBWTtBQUNoRUosUUFBUUMsR0FBRyxDQUNULDBDQUNBLENBQUMsQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDRSxlQUFlO0FBRS9CTCxRQUFRQyxHQUFHLENBQ1QsMkNBQ0EsQ0FBQyxDQUFDQyxRQUFRQyxHQUFHLENBQUNHLGdCQUFnQjtBQUVoQ04sUUFBUUMsR0FBRyxDQUNULCtDQUNBLENBQUMsQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDSSxvQkFBb0I7QUFHN0IsTUFBTUMsY0FBYztJQUN6QkMsU0FBU1gsd0VBQWFBLENBQUNDLG1EQUFNQTtJQUM3QlcsV0FBVztRQUNUYixpRUFBY0EsQ0FBQztZQUNiYyxVQUFVVCxRQUFRQyxHQUFHLENBQUNHLGdCQUFnQjtZQUN0Q00sY0FBY1YsUUFBUUMsR0FBRyxDQUFDSSxvQkFBb0I7WUFDOUNNLG1DQUFtQztRQUNyQztLQUNEO0lBQ0RDLFdBQVc7UUFDVCxNQUFNQyxTQUFRLEVBQUVBLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1lBQzdCaEIsUUFBUUMsR0FBRyxDQUFDO1lBQ1pELFFBQVFDLEdBQUcsQ0FBQyx5Q0FBeUM7Z0JBQUVjO2dCQUFTQztZQUFLO1lBRXJFLDRDQUE0QztZQUM1Q0QsUUFBUUMsSUFBSSxDQUFDQyxFQUFFLEdBQUdELEtBQUtDLEVBQUU7WUFDekJqQixRQUFRQyxHQUFHLENBQUMsMENBQTBDYztZQUV0RCxPQUFPQTtRQUNUO1FBQ0EsTUFBTUcsUUFBTyxFQUFFRixJQUFJLEVBQUVHLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRTtZQUN6RHRCLFFBQVFDLEdBQUcsQ0FBQztZQUNaRCxRQUFRQyxHQUFHLENBQUMsd0NBQXdDO2dCQUNsRGUsTUFBTUEsT0FBTztvQkFBRUMsSUFBSUQsS0FBS0MsRUFBRTtvQkFBRUksT0FBT0wsS0FBS0ssS0FBSztnQkFBQyxJQUFJO2dCQUNsREYsU0FBU0EsVUFBVTtvQkFBRUksVUFBVUosUUFBUUksUUFBUTtnQkFBQyxJQUFJO2dCQUNwREgsU0FBU0EsVUFBVTtvQkFBRUMsT0FBT0QsUUFBUUMsS0FBSztnQkFBQyxJQUFJO1lBQ2hEO1lBRUEscURBQXFEO1lBQ3JELDZEQUE2RDtZQUM3RCxPQUFPO1FBQ1Q7SUFDRjtJQUNBRyxPQUFPO1FBQ0xOLFFBQVE7SUFHVjtJQUNBTyxRQUFRdkIsUUFBUUMsR0FBRyxDQUFDRSxlQUFlO0FBQ3JDLEVBQUU7QUFFRix3Q0FBd0M7QUFDeENMLFFBQVFDLEdBQUcsQ0FBQztBQUNaRCxRQUFRQyxHQUFHLENBQ1QseUJBQ0FPLFlBQVlFLFNBQVMsQ0FBQ2dCLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFVixFQUFFLEVBQUVXLElBQUksQ0FBQztBQUU5QzVCLFFBQVFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDTyxZQUFZQyxPQUFPO0FBQ2hFVCxRQUFRQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQ08sWUFBWWlCLE1BQU07QUFFOUQsaUVBQWU3QixnREFBUUEsQ0FBQ1ksWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludGVydmlldy1wcmVwLy4vcGFnZXMvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS5qcz81MjdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZXh0QXV0aCBmcm9tICduZXh0LWF1dGgnO1xyXG5pbXBvcnQgR29vZ2xlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnO1xyXG5pbXBvcnQgeyBQcmlzbWFBZGFwdGVyIH0gZnJvbSAnQG5leHQtYXV0aC9wcmlzbWEtYWRhcHRlcic7XHJcbmltcG9ydCBwcmlzbWEgZnJvbSAnLi4vLi4vLi4vbGliL3ByaXNtYSc7XHJcblxyXG4vLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LvQvtCz0LjRgNC+0LLQsNC90LjQtSDQv9C10YDQtdC80LXQvdC90YvRhSDQvtC60YDRg9C20LXQvdC40Y8g0LTQu9GPINC+0YLQu9Cw0LTQutC4XHJcbmNvbnNvbGUubG9nKCdOZXh0QXV0aDog0J/RgNC+0LLQtdGA0LrQsCDQv9C10YDQtdC80LXQvdC90YvRhSDQvtC60YDRg9C20LXQvdC40Y8nKTtcclxuY29uc29sZS5sb2coJ05leHRBdXRoOiBORVhUQVVUSF9VUkwgPScsIHByb2Nlc3MuZW52Lk5FWFRBVVRIX1VSTCk7XHJcbmNvbnNvbGUubG9nKFxyXG4gICdOZXh0QXV0aDogTkVYVEFVVEhfU0VDUkVUINGB0YPRidC10YHRgtCy0YPQtdGCID0nLFxyXG4gICEhcHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUXHJcbik7XHJcbmNvbnNvbGUubG9nKFxyXG4gICdOZXh0QXV0aDogR09PR0xFX0NMSUVOVF9JRCDRgdGD0YnQtdGB0YLQstGD0LXRgiA9JyxcclxuICAhIXByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSURcclxuKTtcclxuY29uc29sZS5sb2coXHJcbiAgJ05leHRBdXRoOiBHT09HTEVfQ0xJRU5UX1NFQ1JFVCDRgdGD0YnQtdGB0YLQstGD0LXRgiA9JyxcclxuICAhIXByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnMgPSB7XHJcbiAgYWRhcHRlcjogUHJpc21hQWRhcHRlcihwcmlzbWEpLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgR29vZ2xlUHJvdmlkZXIoe1xyXG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCxcclxuICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVCxcclxuICAgICAgYWxsb3dEYW5nZXJvdXNFbWFpbEFjY291bnRMaW5raW5nOiB0cnVlLCAvLyDQoNCw0LfRgNC10YjQsNC10Lwg0YHQstGP0LfRi9Cy0LDQvdC40LUg0LDQutC60LDRg9C90YLQvtCyINC/0L4gZW1haWxcclxuICAgIH0pLFxyXG4gIF0sXHJcbiAgY2FsbGJhY2tzOiB7XHJcbiAgICBhc3luYyBzZXNzaW9uKHsgc2Vzc2lvbiwgdXNlciB9KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOZXh0QXV0aCBjYWxsYmFjazogc2Vzc2lvbiDQstGL0LfQstCw0L0nKTtcclxuICAgICAgY29uc29sZS5sb2coJ05leHRBdXRoIGNhbGxiYWNrOiBzZXNzaW9uINC/0LDRgNCw0LzQtdGC0YDRizonLCB7IHNlc3Npb24sIHVzZXIgfSk7XHJcblxyXG4gICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10LwgaWQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINCyINC+0LHRitC10LrRgiDRgdC10YHRgdC40LhcclxuICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdXNlci5pZDtcclxuICAgICAgY29uc29sZS5sb2coJ05leHRBdXRoIGNhbGxiYWNrOiDQvtCx0L3QvtCy0LvQtdC90L3QsNGPINGB0LXRgdGB0LjRjzonLCBzZXNzaW9uKTtcclxuXHJcbiAgICAgIHJldHVybiBzZXNzaW9uO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIHNpZ25Jbih7IHVzZXIsIGFjY291bnQsIHByb2ZpbGUsIGVtYWlsLCBjcmVkZW50aWFscyB9KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOZXh0QXV0aCBjYWxsYmFjazogc2lnbkluINCy0YvQt9Cy0LDQvScpO1xyXG4gICAgICBjb25zb2xlLmxvZygnTmV4dEF1dGggY2FsbGJhY2s6IHNpZ25JbiDQv9Cw0YDQsNC80LXRgtGA0Ys6Jywge1xyXG4gICAgICAgIHVzZXI6IHVzZXIgPyB7IGlkOiB1c2VyLmlkLCBlbWFpbDogdXNlci5lbWFpbCB9IDogbnVsbCxcclxuICAgICAgICBhY2NvdW50OiBhY2NvdW50ID8geyBwcm92aWRlcjogYWNjb3VudC5wcm92aWRlciB9IDogbnVsbCxcclxuICAgICAgICBwcm9maWxlOiBwcm9maWxlID8geyBlbWFpbDogcHJvZmlsZS5lbWFpbCB9IDogbnVsbCxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDQktGB0LXQs9C00LAg0YDQsNC30YDQtdGI0LDQtdC8INCy0YXQvtC0LCDQtNCw0LbQtSDQtdGB0LvQuCDQsNC60LrQsNGD0L3RgiDQvdC1INGB0LLRj9C30LDQvVxyXG4gICAgICAvLyDQrdGC0L4g0L/QvtC30LLQvtC70LjRgiDRgdC+0LfQtNCw0YLRjCDQvdC+0LLRi9C5INCw0LrQutCw0YPQvdGCLCDQtdGB0LvQuCDRgdGC0LDRgNGL0Lkg0LHRi9C7INGD0LTQsNC70LXQvVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBwYWdlczoge1xyXG4gICAgc2lnbkluOiAnL2F1dGgvc2lnbmluJywgLy8g0JrQsNGB0YLQvtC80L3QsNGPINGB0YLRgNCw0L3QuNGG0LAg0LLRhdC+0LTQsFxyXG4gICAgLy8gZXJyb3I6ICcvYXV0aC9lcnJvcicsIC8vINCe0L/RhtC40L7QvdCw0LvRjNC90L46INGB0YLRgNCw0L3QuNGG0LAg0L7RiNC40LHQutC4XHJcbiAgICAvLyBzaWduT3V0OiAnL2F1dGgvc2lnbm91dCcsIC8vINCe0L/RhtC40L7QvdCw0LvRjNC90L46INGB0YLRgNCw0L3QuNGG0LAg0LLRi9GF0L7QtNCwXHJcbiAgfSxcclxuICBzZWNyZXQ6IHByb2Nlc3MuZW52Lk5FWFRBVVRIX1NFQ1JFVCxcclxufTtcclxuXHJcbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQu9C+0LPQuNGA0L7QstCw0L3QuNC1INC/0LXRgNC10LQg0Y3QutGB0L/QvtGA0YLQvtC8XHJcbmNvbnNvbGUubG9nKCdOZXh0QXV0aDog0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINC30LDQs9GA0YPQttC10L3QsCcpO1xyXG5jb25zb2xlLmxvZyhcclxuICAnTmV4dEF1dGg6INCf0YDQvtCy0LDQudC00LXRgNGLOicsXHJcbiAgYXV0aE9wdGlvbnMucHJvdmlkZXJzLm1hcCgocCkgPT4gcC5pZCkuam9pbignLCAnKVxyXG4pO1xyXG5jb25zb2xlLmxvZygnTmV4dEF1dGg6INCQ0LTQsNC/0YLQtdGAINC90LDRgdGC0YDQvtC10L06JywgISFhdXRoT3B0aW9ucy5hZGFwdGVyKTtcclxuY29uc29sZS5sb2coJ05leHRBdXRoOiDQodC10LrRgNC10YIg0L3QsNGB0YLRgNC+0LXQvTonLCAhIWF1dGhPcHRpb25zLnNlY3JldCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOZXh0QXV0aChhdXRoT3B0aW9ucyk7XHJcbiJdLCJuYW1lcyI6WyJOZXh0QXV0aCIsIkdvb2dsZVByb3ZpZGVyIiwiUHJpc21hQWRhcHRlciIsInByaXNtYSIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiTkVYVEFVVEhfVVJMIiwiTkVYVEFVVEhfU0VDUkVUIiwiR09PR0xFX0NMSUVOVF9JRCIsIkdPT0dMRV9DTElFTlRfU0VDUkVUIiwiYXV0aE9wdGlvbnMiLCJhZGFwdGVyIiwicHJvdmlkZXJzIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJhbGxvd0Rhbmdlcm91c0VtYWlsQWNjb3VudExpbmtpbmciLCJjYWxsYmFja3MiLCJzZXNzaW9uIiwidXNlciIsImlkIiwic2lnbkluIiwiYWNjb3VudCIsInByb2ZpbGUiLCJlbWFpbCIsImNyZWRlbnRpYWxzIiwicHJvdmlkZXIiLCJwYWdlcyIsInNlY3JldCIsIm1hcCIsInAiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].js\n");

/***/ }),

/***/ "(api)/./pages/api/mock-interviews/index.js":
/*!********************************************!*\
  !*** ./pages/api/mock-interviews/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./lib/prisma.js\");\n\n\n\nasync function handler(req, res) {\n    console.log(\"API: Получен запрос на создание/получение собеседований\");\n    console.log(\"API: Метод запроса:\", req.method);\n    console.log(\"API: Тело запроса:\", req.body);\n    // Проверяем заголовки запроса для отладки\n    console.log(\"API: Заголовки запроса:\", req.headers);\n    // Используем unstable_getServerSession вместо getSession\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.unstable_getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    console.log(\"API: Сессия пользователя (unstable_getServerSession):\", session);\n    // Проверяем cookie для отладки\n    console.log(\"API: Cookie:\", req.headers.cookie);\n    if (!session) {\n        console.log(\"API: Сессия отсутствует, возвращаем 401\");\n        return res.status(401).json({\n            message: \"Необходима авторизация\"\n        });\n    }\n    // Обработка GET запроса - получение списка собеседований\n    if (req.method === \"GET\") {\n        try {\n            console.log(\"API: Получение списка собеседований\");\n            console.log(\"API: ID текущего пользователя:\", session.user.id);\n            // Проверим, есть ли собеседования, на которые записался текущий пользователь\n            const bookedInterviews = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__[\"default\"].mockInterview.findMany({\n                where: {\n                    intervieweeId: session.user.id,\n                    status: \"booked\"\n                },\n                include: {\n                    interviewer: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true,\n                            image: true\n                        }\n                    }\n                }\n            });\n            console.log(\"API: Собеседования, на которые записался текущий пользователь:\", bookedInterviews.map((interview)=>({\n                    id: interview.id,\n                    scheduledTime: interview.scheduledTime,\n                    status: interview.status,\n                    interviewerId: interview.interviewerId\n                })));\n            // Сначала получим все собеседования, созданные текущим пользователем\n            const userCreatedInterviews = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__[\"default\"].mockInterview.findMany({\n                where: {\n                    interviewerId: session.user.id\n                },\n                include: {\n                    interviewer: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true,\n                            image: true\n                        }\n                    }\n                }\n            });\n            console.log(\"API: Собеседования, созданные текущим пользователем:\", userCreatedInterviews.map((interview)=>({\n                    id: interview.id,\n                    scheduledTime: interview.scheduledTime,\n                    status: interview.status\n                })));\n            console.log(\"API: ID текущего пользователя для проверки:\", session.user.id);\n            // Получаем все собеседования со статусом \"pending\" (ожидающие)\n            // и информацией об интервьюере\n            const otherInterviews = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__[\"default\"].mockInterview.findMany({\n                where: {\n                    status: \"pending\",\n                    // Получаем собеседования, созданные другими пользователями\n                    interviewerId: {\n                        not: session.user.id\n                    }\n                },\n                include: {\n                    interviewer: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true,\n                            image: true\n                        }\n                    }\n                },\n                orderBy: {\n                    scheduledTime: \"asc\"\n                }\n            });\n            console.log(\"API: Количество собеседований других пользователей:\", otherInterviews.length);\n            // Добавляем маркер isCreatedByCurrentUser к каждому собеседованию\n            const userInterviewsWithMarker = userCreatedInterviews.map((interview)=>({\n                    ...interview,\n                    isCreatedByCurrentUser: true\n                }));\n            const otherInterviewsWithMarker = otherInterviews.map((interview)=>({\n                    ...interview,\n                    isCreatedByCurrentUser: false\n                }));\n            // Добавляем маркер к собеседованиям, на которые записался пользователь\n            const bookedInterviewsWithMarker = bookedInterviews.map((interview)=>({\n                    ...interview,\n                    isCreatedByCurrentUser: false,\n                    isBookedByCurrentUser: true\n                }));\n            // Объединяем все типы собеседований\n            const allInterviews = [\n                ...userInterviewsWithMarker,\n                ...otherInterviewsWithMarker,\n                ...bookedInterviewsWithMarker\n            ];\n            // Сортируем все собеседования по времени\n            allInterviews.sort((a, b)=>new Date(a.scheduledTime) - new Date(b.scheduledTime));\n            console.log(\"API: Общее количество собеседований для отображения:\", allInterviews.length);\n            // Выводим первые несколько собеседований для проверки маркера isCreatedByCurrentUser\n            console.log(\"API: Примеры собеседований с маркером:\", allInterviews.slice(0, 3).map((interview)=>({\n                    id: interview.id,\n                    scheduledTime: interview.scheduledTime,\n                    interviewerId: interview.interviewerId,\n                    isCreatedByCurrentUser: interview.isCreatedByCurrentUser\n                })));\n            return res.status(200).json(allInterviews);\n        } catch (error) {\n            console.error(\"Ошибка при получении собеседований:\", error);\n            return res.status(500).json({\n                message: \"Ошибка сервера при получении собеседований\"\n            });\n        }\n    }\n    // Обработка POST запроса - создание нового собеседования\n    if (req.method === \"POST\") {\n        const { scheduledTime, meetingLink } = req.body;\n        // Проверка наличия обязательных полей\n        if (!scheduledTime || !meetingLink) {\n            return res.status(400).json({\n                message: \"Необходимо указать время и ссылку на встречу\"\n            });\n        }\n        // Проверка валидности ссылки на Google Meet\n        if (!meetingLink.includes(\"meet.google.com\")) {\n            return res.status(400).json({\n                message: \"Ссылка должна быть на Google Meet\"\n            });\n        }\n        try {\n            // Создаем новое собеседование\n            const newInterview = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__[\"default\"].mockInterview.create({\n                data: {\n                    interviewer: {\n                        connect: {\n                            id: session.user.id\n                        }\n                    },\n                    scheduledTime: new Date(scheduledTime),\n                    meetingLink,\n                    status: \"pending\"\n                }\n            });\n            return res.status(201).json(newInterview);\n        } catch (error) {\n            console.error(\"Ошибка при создании собеседования:\", error);\n            return res.status(500).json({\n                message: \"Ошибка сервера при создании собеседования\"\n            });\n        }\n    }\n    // Если метод запроса не поддерживается\n    return res.status(405).json({\n        message: \"Метод не поддерживается\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/mock-interviews/index.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmock-interviews&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cmock-interviews%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();