/**
 * –¢–µ—Å—Ç –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è API –ø—Ä–æ—Ñ–∏–ª—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É 500
 */

const { PrismaClient } = require('@prisma/client');
const http = require('http');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : null;
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonData,
            rawData: data,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: null,
            rawData: data,
            parseError: error.message,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (postData) {
      req.write(postData);
    }

    req.end();
  });
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø–∏—Å–∏ UserPoints
async function testUserWithoutPoints() {
  log('\n=== –¢–ï–°–¢ 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ë–ï–ó –ó–ê–ü–ò–°–ò USERPOINTS ===', 'cyan');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ UserPoints
    log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ UserPoints...', 'blue');

    const testUser = await prisma.user.create({
      data: {
        email: 'test-no-points@example.com',
        name: '–¢–µ—Å—Ç –±–µ–∑ –±–∞–ª–ª–æ–≤',
        role: 'user',
      },
    });

    log(
      `‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email} (ID: ${testUser.id})`,
      'green'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç UserPoints
    const userPoints = await prisma.userPoints.findUnique({
      where: { userId: testUser.id },
    });

    if (userPoints) {
      log('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å UserPoints, —É–¥–∞–ª—è–µ–º...', 'yellow');
      await prisma.userPoints.delete({
        where: { userId: testUser.id },
      });
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å API –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('üîç –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ UserPoints...', 'blue');

    const user = await prisma.user.findUnique({
      where: { email: testUser.email },
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        pointsTransactions: {
          select: {
            amount: true,
            type: true,
            createdAt: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
          take: 5,
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', 'yellow');
    log(`   userPoints: ${user.userPoints ? '–µ—Å—Ç—å' : 'null'}`, 'yellow');
    log(
      `   pointsTransactions: ${user.pointsTransactions.length} –∑–∞–ø–∏—Å–µ–π`,
      'yellow'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const profileData = {
      id: user.id,
      name: user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      email: user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      image: user.image,
      role: user.role,
      createdAt: user.createdAt,
      lastLoginAt: user.lastLoginAt,
      conductedInterviewsCount: user.conductedInterviewsCount,
      stats: {
        currentPoints: user.userPoints?.points || 0,
        totalInterviews:
          user._count.interviewerSessions + user._count.intervieweeSessions,
        conductedInterviews: user._count.interviewerSessions,
        participatedInterviews: user._count.intervieweeSessions,
        totalTransactions: user._count.pointsTransactions,
      },
      recentTransactions: user.pointsTransactions.map((transaction) => ({
        amount: transaction.amount,
        type: transaction.type,
        createdAt: transaction.createdAt,
      })),
    };

    log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'green');
    log(`   currentPoints: ${profileData.stats.currentPoints}`, 'green');

    // –û—á–∏—Å—Ç–∫–∞
    await prisma.user.delete({
      where: { id: testUser.id },
    });

    return true;
  } catch (error) {
    log(
      `‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ UserPoints: ${error.message}`,
      'red'
    );
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testUserWithCorruptedData() {
  log('\n=== –¢–ï–°–¢ 2: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –° –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===', 'cyan');

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...', 'blue');

    const testUser = await prisma.user.create({
      data: {
        email: 'test-corrupted@example.com',
        // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º name
        role: 'user',
      },
    });

    log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`, 'green');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    const user = await prisma.user.findUnique({
      where: { email: testUser.email },
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        pointsTransactions: {
          select: {
            amount: true,
            type: true,
            createdAt: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
          take: 5,
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ null/undefined –∑–Ω–∞—á–µ–Ω–∏–π:', 'yellow');
    log(`   name: ${user.name === null ? 'null' : user.name}`, 'yellow');
    log(`   image: ${user.image === null ? 'null' : user.image}`, 'yellow');
    log(
      `   lastLoginAt: ${
        user.lastLoginAt === null ? 'null' : user.lastLoginAt
      }`,
      'yellow'
    );
    log(
      `   conductedInterviewsCount: ${user.conductedInterviewsCount}`,
      'yellow'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É null –∑–Ω–∞—á–µ–Ω–∏–π
    const profileData = {
      id: user.id,
      name: user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      email: user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      image: user.image,
      role: user.role,
      createdAt: user.createdAt,
      lastLoginAt: user.lastLoginAt,
      conductedInterviewsCount: user.conductedInterviewsCount,
      stats: {
        currentPoints: user.userPoints?.points || 0,
        totalInterviews:
          user._count.interviewerSessions + user._count.intervieweeSessions,
        conductedInterviews: user._count.interviewerSessions,
        participatedInterviews: user._count.intervieweeSessions,
        totalTransactions: user._count.pointsTransactions,
      },
      recentTransactions: user.pointsTransactions.map((transaction) => ({
        amount: transaction.amount,
        type: transaction.type,
        createdAt: transaction.createdAt,
      })),
    };

    log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ null –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', 'green');

    // –û—á–∏—Å—Ç–∫–∞
    await prisma.user.delete({
      where: { id: testUser.id },
    });

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'red');
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Prisma
async function testPrismaImport() {
  log('\n=== –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ê PRISMA ===', 'cyan');

  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ API —Ñ–∞–π–ª–µ...', 'blue');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const fs = require('fs');
    const path = require('path');

    const apiFilePath = path.join(
      __dirname,
      'pages',
      'api',
      'user',
      'profile.js'
    );
    const apiContent = fs.readFileSync(apiFilePath, 'utf8');

    log('üìã –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ profile.js:', 'yellow');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç prisma
    if (apiContent.includes("import { prisma } from '../../../lib/prisma'")) {
      log('   ‚úÖ –ò–º–ø–æ—Ä—Ç prisma: named import', 'green');
    } else if (
      apiContent.includes("import prisma from '../../../lib/prisma'")
    ) {
      log('   ‚úÖ –ò–º–ø–æ—Ä—Ç prisma: default import', 'green');
    } else {
      log('   ‚ùå –ò–º–ø–æ—Ä—Ç prisma: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', 'red');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç NextAuth
    if (
      apiContent.includes("import { getServerSession } from 'next-auth/next'")
    ) {
      log('   ‚úÖ –ò–º–ø–æ—Ä—Ç getServerSession: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', 'green');
    } else {
      log('   ‚ùå –ò–º–ø–æ—Ä—Ç getServerSession: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', 'red');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç authOptions
    if (
      apiContent.includes("import { authOptions } from '../auth/[...nextauth]'")
    ) {
      log('   ‚úÖ –ò–º–ø–æ—Ä—Ç authOptions: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', 'green');
    } else {
      log('   ‚ùå –ò–º–ø–æ—Ä—Ç authOptions: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', 'red');
      return false;
    }

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ/–¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
async function testPrismaImportConflict() {
  log('\n=== –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–ê –ò–ú–ü–û–†–¢–ê PRISMA ===', 'cyan');

  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...', 'blue');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º lib/prisma.js
    const fs = require('fs');
    const path = require('path');

    const prismaLibPath = path.join(__dirname, 'lib', 'prisma.js');
    const prismaLibContent = fs.readFileSync(prismaLibPath, 'utf8');

    log('üìã –ê–Ω–∞–ª–∏–∑ lib/prisma.js:', 'yellow');

    if (prismaLibContent.includes('export default prisma')) {
      log('   ‚úÖ lib/prisma.js —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç default export', 'green');
    } else if (prismaLibContent.includes('export { prisma }')) {
      log('   ‚ö†Ô∏è lib/prisma.js —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç named export', 'yellow');
    } else {
      log('   ‚ùå lib/prisma.js: —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∂–µ named export
    if (
      prismaLibContent.includes('export { prisma }') ||
      prismaLibContent.includes('export const prisma')
    ) {
      log('   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–∫–∂–µ named export - –≤–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç!', 'yellow');

      // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—à–∏–±–∫–∏ 500
      log('   üö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–ø–æ—Ä—Ç–æ–≤!', 'red');
      log(
        '   üí° API —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç named import, –Ω–æ lib —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç default',
        'red'
      );
      return false;
    }

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function testSessionWithNonExistentUser() {
  log('\n=== –¢–ï–°–¢ 5: –°–ï–°–°–ò–Ø –° –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú ===', 'cyan');

  try {
    log('üîç –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email...', 'blue');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç email –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fakeEmail = 'nonexistent@example.com';

    const user = await prisma.user.findUnique({
      where: { email: fakeEmail },
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        pointsTransactions: {
          select: {
            amount: true,
            type: true,
            createdAt: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
          take: 5,
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    if (!user) {
      log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ', 'green');
      log('üí° API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404 –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ', 'blue');
      return true;
    } else {
      log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª', 'yellow');
      return false;
    }
  } catch (error) {
    log(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
      'red'
    );
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤
async function runEdgeCasesDiagnostics() {
  log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í API –ü–†–û–§–ò–õ–Ø', 'magenta');
  log('=' * 60, 'magenta');

  const results = {
    userWithoutPoints: false,
    userWithCorruptedData: false,
    prismaImport: false,
    prismaImportConflict: false,
    sessionWithNonExistentUser: false,
  };

  try {
    results.userWithoutPoints = await testUserWithoutPoints();
    results.userWithCorruptedData = await testUserWithCorruptedData();
    results.prismaImport = await testPrismaImport();
    results.prismaImportConflict = await testPrismaImportConflict();
    results.sessionWithNonExistentUser = await testSessionWithNonExistentUser();

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log('\n' + '=' * 60, 'magenta');
    log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í', 'magenta');
    log('=' * 60, 'magenta');

    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù';
      const color = passed ? 'green' : 'red';
      log(`${test}: ${status}`, color);
    });

    const passedCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;

    log(
      `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`,
      passedCount === totalCount ? 'green' : 'yellow'
    );

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!results.prismaImportConflict) {
      log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê –û–®–ò–ë–ö–ò 500!', 'red');
      log('üí° –ü—Ä–æ–±–ª–µ–º–∞: –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ Prisma', 'red');
      log('üîß –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç –≤ pages/api/user/profile.js', 'yellow');
    } else if (passedCount === totalCount) {
      log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!', 'green');
    } else {
      log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤.', 'yellow');
    }

    return results;
  } catch (error) {
    log(
      `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤: ${error.message}`,
      'red'
    );
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return results;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (require.main === module) {
  runEdgeCasesDiagnostics().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  runEdgeCasesDiagnostics,
  testUserWithoutPoints,
  testUserWithCorruptedData,
  testPrismaImport,
  testPrismaImportConflict,
  testSessionWithNonExistentUser,
};
