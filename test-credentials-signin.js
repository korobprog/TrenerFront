const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCredentialsSignIn() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é...\n');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é authorize –∏–∑ NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const { authOptions } = require('./pages/api/auth/[...nextauth].js');

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä credentials
    const credentialsProvider = authOptions.providers.find(
      (provider) => provider.id === 'credentials'
    );

    if (!credentialsProvider) {
      console.log('‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä credentials –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä credentials –Ω–∞–π–¥–µ–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
    const validCredentials = {
      username: 'test@example.com',
      password: 'testpassword123',
    };

    console.log(`   üìß Email: ${validCredentials.username}`);
    console.log(`   üîê –ü–∞—Ä–æ–ª—å: ${validCredentials.password}`);

    try {
      const validResult = await credentialsProvider.authorize(validCredentials);
      if (validResult) {
        console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        console.log(
          `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${validResult.name} (${validResult.email})`
        );
        console.log(`   üÜî ID: ${validResult.id}`);
        console.log(`   üëë –†–æ–ª—å: ${validResult.role}`);
      } else {
        console.log('   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
    const invalidCredentials = {
      username: 'test@example.com',
      password: 'wrongpassword',
    };

    console.log(`   üìß Email: ${invalidCredentials.username}`);
    console.log(`   üîê –ü–∞—Ä–æ–ª—å: ${invalidCredentials.password}`);

    try {
      const invalidResult = await credentialsProvider.authorize(
        invalidCredentials
      );
      if (invalidResult) {
        console.log('   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–π—Ç–∏!');
      } else {
        console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.log(
        '   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:',
        error.message
      );
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:');
    const nonExistentCredentials = {
      username: 'nonexistent@example.com',
      password: 'anypassword',
    };

    console.log(`   üìß Email: ${nonExistentCredentials.username}`);
    console.log(`   üîê –ü–∞—Ä–æ–ª—å: ${nonExistentCredentials.password}`);

    try {
      const nonExistentResult = await credentialsProvider.authorize(
        nonExistentCredentials
      );
      if (nonExistentResult) {
        console.log('   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–π—Ç–∏!');
      } else {
        console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.log(
        '   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:',
        error.message
      );
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
    const emptyCredentials = {
      username: '',
      password: '',
    };

    console.log(`   üìß Email: "${emptyCredentials.username}"`);
    console.log(`   üîê –ü–∞—Ä–æ–ª—å: "${emptyCredentials.password}"`);

    try {
      const emptyResult = await credentialsProvider.authorize(emptyCredentials);
      if (emptyResult) {
        console.log('   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–π—Ç–∏!');
      } else {
        console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.log(
        '   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:',
        error.message
      );
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    console.log('   ‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
    console.log('   ‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    console.log('   ‚úÖ –ü—É—Å—Ç—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCredentialsSignIn()
  .then(() => {
    console.log('\nüåê –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/auth/signin');
    console.log('   2. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º"');
    console.log('   3. –í–≤–µ–¥–∏—Ç–µ: test@example.com / testpassword123');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
  })
  .catch(console.error);
