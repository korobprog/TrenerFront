const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function makeKorobprogSuperAdmin() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è korobprog@gmail.com...');

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await prisma.user.findUnique({
      where: {
        email: 'korobprog@gmail.com',
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        createdAt: true,
      },
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å korobprog@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!');
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   –ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${user.role}`);
    console.log(`   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (user.role === 'superadmin') {
      console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å superadmin');
      return;
    }

    console.log('\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ superadmin...');

    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: {
        email: 'korobprog@gmail.com',
      },
      data: {
        role: 'superadmin',
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });

    console.log('‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!');
    console.log(`   ID: ${updatedUser.id}`);
    console.log(`   Email: ${updatedUser.email}`);
    console.log(`   –ò–º—è: ${updatedUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   –ù–æ–≤–∞—è —Ä–æ–ª—å: ${updatedUser.role}`);
    console.log(`   –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updatedUser.updatedAt}`);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ AdminActionLog
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    await prisma.adminActionLog.create({
      data: {
        adminId: updatedUser.id, // –°–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
        action: 'ROLE_CHANGE',
        entityType: 'User',
        entityId: updatedUser.id,
        details: {
          previousRole: user.role,
          newRole: 'superadmin',
          email: updatedUser.email,
          changedBy: 'system_script',
          reason: 'Manual superadmin assignment via script',
        },
      },
    });

    console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');

    console.log('\nüéâ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updatedUser.email} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å superadmin`
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.error(error);

    if (error.code === 'P2002') {
      console.error('–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    } else if (error.code === 'P2025') {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } finally {
    // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.$disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è superadmin —Ä–æ–ª–∏...');
console.log('üìß –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: korobprog@gmail.com');
console.log('üéØ –¶–µ–ª–µ–≤–∞—è —Ä–æ–ª—å: superadmin');
console.log('='.repeat(50));

makeKorobprogSuperAdmin()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:');
    console.error(error);
    process.exit(1);
  });
