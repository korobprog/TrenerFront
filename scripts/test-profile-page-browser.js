/**
 * –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã /user/profile —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */

const puppeteer = require('puppeteer');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testProfilePageInBrowser() {
  let browser;

  try {
    log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –ü–†–û–§–ò–õ–Ø –í –ë–†–ê–£–ó–ï–†–ï', 'magenta');
    log('=' * 60, 'magenta');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    log('\n1. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...', 'cyan');
    browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      devtools: true, // –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    const page = await browser.newPage();

    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', (msg) => {
      const type = msg.type();
      const text = msg.text();

      if (text.includes('[PROFILE API]')) {
        log(`üîç [BROWSER CONSOLE] ${text}`, 'blue');
      } else if (type === 'error') {
        log(`‚ùå [BROWSER ERROR] ${text}`, 'red');
      } else if (type === 'warn') {
        log(`‚ö†Ô∏è [BROWSER WARN] ${text}`, 'yellow');
      }
    });

    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    page.on('response', (response) => {
      const url = response.url();
      const status = response.status();

      if (url.includes('/api/user/profile')) {
        const statusColor = status >= 200 && status < 300 ? 'green' : 'red';
        log(
          `üåê [NETWORK] ${response.request().method()} ${url} - ${status}`,
          statusColor
        );
      }
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    log('\n2. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...', 'cyan');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...', 'cyan');

    const isLoggedIn = await page.evaluate(() => {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const loginButton = document.querySelector('a[href*="signin"]');
      const userMenu =
        document.querySelector('[data-testid="user-menu"]') ||
        document.querySelector('.user-menu') ||
        document.querySelector('button:contains("–ü—Ä–æ—Ñ–∏–ª—å")');

      return !loginButton || !!userMenu;
    });

    if (!isLoggedIn) {
      log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...', 'yellow');

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      await page.goto('http://localhost:3000/auth/signin', {
        waitUntil: 'networkidle2',
      });

      // –ò—â–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ —Å credentials
      const credentialsForm = await page.$('form');
      if (credentialsForm) {
        log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...', 'blue');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        await page.type('input[name="email"]', 'default@example.com');
        await page.type('input[name="password"]', 'password123');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        await Promise.all([
          page.waitForNavigation({ waitUntil: 'networkidle2' }),
          page.click('button[type="submit"]'),
        ]);

        log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 'green');
      } else {
        log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red');
        return false;
      }
    } else {
      log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'green');
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    log('\n4. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è...', 'cyan');
    await page.goto('http://localhost:3000/user/profile', {
      waitUntil: 'networkidle2',
    });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    log('\n5. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...', 'cyan');

    const pageAnalysis = await page.evaluate(() => {
      const title = document.title;
      const h1 = document.querySelector('h1')?.textContent;
      const errorMessage = document.querySelector(
        '.error-message, .errorMessage, [class*="error"]'
      )?.textContent;
      const loadingMessage = document.querySelector(
        '.loading, [class*="loading"]'
      )?.textContent;
      const profileData = document.querySelector(
        '.profile-content, .profileContent, [class*="profile"]'
      );
      const userName = document.querySelector(
        '.user-name, .userName, [class*="userName"]'
      )?.textContent;
      const userEmail = document.querySelector(
        '.user-email, .userEmail, [class*="userEmail"]'
      )?.textContent;

      return {
        title,
        h1,
        errorMessage,
        loadingMessage,
        hasProfileData: !!profileData,
        userName,
        userEmail,
        bodyText: document.body.textContent.substring(0, 500),
      };
    });

    log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', 'blue');
    log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageAnalysis.title}`, 'yellow');
    log(`H1: ${pageAnalysis.h1}`, 'yellow');
    log(
      `–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: ${pageAnalysis.hasProfileData}`,
      pageAnalysis.hasProfileData ? 'green' : 'red'
    );
    log(`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${pageAnalysis.userName}`, 'yellow');
    log(`Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${pageAnalysis.userEmail}`, 'yellow');

    if (pageAnalysis.errorMessage) {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageAnalysis.errorMessage}`, 'red');
    }

    if (pageAnalysis.loadingMessage) {
      log(`‚è≥ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: ${pageAnalysis.loadingMessage}`, 'yellow');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
    log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤...', 'cyan');

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞–ø—Ä—è–º—É—é
    const apiResponse = await page.evaluate(async () => {
      try {
        const response = await fetch('/api/user/profile');
        const data = await response.json();
        return {
          status: response.status,
          ok: response.ok,
          data: data,
        };
      } catch (error) {
        return {
          error: error.message,
        };
      }
    });

    log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞:', 'blue');
    log(JSON.stringify(apiResponse, null, 2), 'yellow');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    log('\n7. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...', 'cyan');
    await page.screenshot({
      path: 'profile-page-test.png',
      fullPage: true,
    });
    log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: profile-page-test.png', 'green');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log('\nüìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:', 'magenta');
    log('=' * 40, 'magenta');

    const success =
      apiResponse.ok &&
      apiResponse.data?.success &&
      pageAnalysis.hasProfileData;

    if (success) {
      log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', 'green');
      log(
        `‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(
          apiResponse.data.data,
          null,
          2
        )}`,
        'green'
      );
    } else {
      log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã', 'red');

      if (!apiResponse.ok) {
        log(`‚ùå API –æ—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å ${apiResponse.status}`, 'red');
        log(`‚ùå –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(apiResponse.data)}`, 'red');
      }

      if (!pageAnalysis.hasProfileData) {
        log('‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'red');
      }
    }

    return success;
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'red');
    log(`–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return false;
  } finally {
    if (browser) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      log(
        '\nüîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.',
        'cyan'
      );
      // await browser.close();
    }
  }
}

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
async function testProfileAPIDirectly() {
  log('\nüîß –ü–†–Ø–ú–û–ô –¢–ï–°–¢ API –ë–ï–ó –ë–†–ê–£–ó–ï–†–ê', 'magenta');
  log('=' * 40, 'magenta');

  const http = require('http');

  return new Promise((resolve) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/user/profile',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    const req = http.request(options, (res) => {
      let body = '';

      res.on('data', (chunk) => {
        body += chunk;
      });

      res.on('end', () => {
        try {
          const data = JSON.parse(body);
          log(
            `üìä –ü—Ä—è–º–æ–π API —Ç–µ—Å—Ç - —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`,
            res.statusCode === 401 ? 'green' : 'red'
          );
          log(`üìä –û—Ç–≤–µ—Ç: ${JSON.stringify(data, null, 2)}`, 'yellow');
          resolve(res.statusCode === 401); // –û–∂–∏–¥–∞–µ–º 401 –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`, 'red');
          resolve(false);
        }
      });
    });

    req.on('error', (error) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
      resolve(false);
    });

    req.end();
  });
}

async function main() {
  log('üîç –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–ù–ò–¶–´ –ü–†–û–§–ò–õ–Ø', 'magenta');

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
  const directTest = await testProfileAPIDirectly();

  // –ó–∞—Ç–µ–º —Ç–µ—Å—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω puppeteer)
  let browserTest = false;
  try {
    browserTest = await testProfilePageInBrowser();
  } catch (error) {
    if (error.message.includes('puppeteer')) {
      log('‚ö†Ô∏è Puppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç', 'yellow');
      log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ puppeteer: npm install puppeteer', 'cyan');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`, 'red');
    }
  }

  log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:', 'magenta');
  log('=' * 30, 'magenta');
  log(
    `–ü—Ä—è–º–æ–π API —Ç–µ—Å—Ç: ${directTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}`,
    directTest ? 'green' : 'red'
  );
  log(
    `–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç: ${browserTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}`,
    browserTest ? 'green' : 'red'
  );

  return directTest;
}

if (require.main === module) {
  main().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { testProfilePageInBrowser, testProfileAPIDirectly };
