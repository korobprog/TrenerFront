/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ z-index –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */

console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É z-index –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ z-index —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function checkZIndexHierarchy() {
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ z-index –∏–µ—Ä–∞—Ä—Ö–∏–∏:');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const rootStyles = getComputedStyle(document.documentElement);
  const userModalZIndex = rootStyles.getPropertyValue('--z-user-modal').trim();
  const userModalHeaderZIndex = rootStyles
    .getPropertyValue('--z-user-modal-header')
    .trim();

  console.log('üéØ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ z-index:');
  console.log(`  --z-user-modal: ${userModalZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
  console.log(
    `  --z-user-modal-header: ${userModalHeaderZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`
  );

  // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userModal = document.querySelector(
    '[class*="UserSettingsModal_overlay"]'
  );
  if (userModal) {
    const modalStyles = getComputedStyle(userModal);
    const actualZIndex = modalStyles.zIndex;
    const position = modalStyles.position;

    console.log('\nüé≠ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–æ:');
    console.log(`  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π z-index: ${actualZIndex}`);
    console.log(`  Position: ${position}`);
    console.log(`  –í–∏–¥–∏–º–æ—Å—Ç—å: ${modalStyles.visibility}`);
    console.log(`  Display: ${modalStyles.display}`);
  } else {
    console.log('\n‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index
  const allElements = document.querySelectorAll('*');
  const highZIndexElements = [];

  allElements.forEach((element) => {
    const styles = getComputedStyle(element);
    const zIndex = parseInt(styles.zIndex);

    if (!isNaN(zIndex) && zIndex > 1000) {
      highZIndexElements.push({
        element,
        zIndex,
        className: element.className,
        tagName: element.tagName,
        position: styles.position,
      });
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ z-index
  highZIndexElements.sort((a, b) => b.zIndex - a.zIndex);

  console.log('\nüèîÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index (>1000):');
  highZIndexElements.forEach((item) => {
    console.log(
      `  ${item.tagName}.${item.className} - z-index: ${item.zIndex}, position: ${item.position}`
    );
  });

  return {
    userModalZIndex,
    userModalHeaderZIndex,
    userModal,
    highZIndexElements,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ z-index
function checkZIndexConflicts() {
  console.log('\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ z-index:');

  const analysis = checkZIndexHierarchy();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å z-index –≤—ã—à–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const userModalZIndex = parseInt(analysis.userModalZIndex) || 9999;
  const conflictingElements = analysis.highZIndexElements.filter(
    (item) =>
      item.zIndex >= userModalZIndex &&
      !item.className.includes('UserSettingsModal')
  );

  if (conflictingElements.length > 0) {
    console.log('üö® –ù–ê–ô–î–ï–ù–´ –ö–û–ù–§–õ–ò–ö–¢–£–Æ–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:');
    conflictingElements.forEach((item) => {
      console.log(
        `  ‚ùå ${item.tagName}.${item.className} - z-index: ${item.zIndex} (>= ${userModalZIndex})`
      );
    });
  } else {
    console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  return conflictingElements;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è z-index
function applyZIndexFix() {
  console.log('\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ z-index...');

  // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const userModal = document.querySelector(
    '[class*="UserSettingsModal_overlay"]'
  );
  if (!userModal) {
    console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    return false;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π z-index
  const newZIndex = 99999;
  userModal.style.zIndex = newZIndex;

  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalContent = userModal.querySelector(
    '[class*="UserSettingsModal_modal"]'
  );
  if (modalContent) {
    modalContent.style.zIndex = newZIndex + 1;
  }

  const modalHeader = userModal.querySelector(
    '[class*="UserSettingsModal_header"]'
  );
  if (modalHeader) {
    modalHeader.style.zIndex = newZIndex + 2;
  }

  console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω z-index: ${newZIndex} –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  setTimeout(() => {
    const updatedStyles = getComputedStyle(userModal);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–π z-index = ${updatedStyles.zIndex}`);
  }, 100);

  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
function monitorModalChanges() {
  console.log('\nüëÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (
            node.nodeType === 1 &&
            node.className &&
            node.className.includes('UserSettingsModal_overlay')
          ) {
            console.log('üé≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            setTimeout(() => {
              checkZIndexConflicts();
              applyZIndexFix();
            }, 100);
          }
        });
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  return observer;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
function runDiagnostics() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const analysis = checkZIndexHierarchy();

  // 2. –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
  const conflicts = checkZIndexConflicts();

  // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (analysis.userModal) {
    applyZIndexFix();
  }

  // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  const observer = monitorModalChanges();

  console.log('\nüìã –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log(`  –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: ${analysis.userModal ? '‚úÖ' : '‚ùå'}`);
  console.log(
    `  CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${analysis.userModalZIndex ? '‚úÖ' : '‚ùå'}`
  );
  console.log(`  –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${conflicts.length}`);
  console.log(`  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: ‚úÖ`);

  return {
    analysis,
    conflicts,
    observer,
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.userModalDiagnostics = {
  checkZIndexHierarchy,
  checkZIndexConflicts,
  applyZIndexFix,
  monitorModalChanges,
  runDiagnostics,
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', runDiagnostics);
} else {
  runDiagnostics();
}

console.log('\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:');
console.log('  userModalDiagnostics.runDiagnostics() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
console.log(
  '  userModalDiagnostics.checkZIndexConflicts() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤'
);
console.log('  userModalDiagnostics.applyZIndexFix() - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
