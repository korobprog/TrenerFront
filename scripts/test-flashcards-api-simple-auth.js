/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API —Ñ–ª–µ—à–∫–∞—Ä—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

const http = require('http');
const https = require('https');
const url = require('url');

async function makeRequest(endpoint, options = {}) {
  return new Promise((resolve, reject) => {
    const requestUrl = `http://localhost:3000${endpoint}`;
    const parsedUrl = url.parse(requestUrl);

    const requestOptions = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port || 80,
      path: parsedUrl.path,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    };

    const req = http.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: data,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function testFlashcardsAPI() {
  console.log('=== –¢–ï–°–¢ API –§–õ–ï–®–ö–ê–†–¢ –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');

  try {
    // 1. –¢–µ—Å—Ç GET /api/flashcards/questions
    console.log('\nüîç 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/flashcards/questions');

    const questionsResponse = await makeRequest('/api/flashcards/questions');
    console.log('   - –°—Ç–∞—Ç—É—Å –∫–æ–¥:', questionsResponse.statusCode);
    console.log('   - –û—Ç–≤–µ—Ç:', JSON.stringify(questionsResponse.data, null, 2));

    if (questionsResponse.statusCode === 401) {
      console.log('   ‚ùå –ü–æ–ª—É—á–µ–Ω 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
    } else if (questionsResponse.statusCode === 200) {
      console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥');
    }

    // 2. –¢–µ—Å—Ç POST /api/flashcards/generate-answer
    console.log('\nüîç 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/flashcards/generate-answer');

    const generateResponse = await makeRequest(
      '/api/flashcards/generate-answer',
      {
        method: 'POST',
        body: {
          questionId: 1,
          questionText: '–ß—Ç–æ —Ç–∞–∫–æ–µ JavaScript?',
          context: {
            topic: 'JavaScript',
            difficulty: 'easy',
          },
        },
      }
    );

    console.log('   - –°—Ç–∞—Ç—É—Å –∫–æ–¥:', generateResponse.statusCode);
    console.log('   - –û—Ç–≤–µ—Ç:', JSON.stringify(generateResponse.data, null, 2));

    if (generateResponse.statusCode === 401) {
      console.log('   ‚ùå –ü–æ–ª—É—á–µ–Ω 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
    } else if (generateResponse.statusCode === 200) {
      console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥');
    }

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–∞–±–æ—á–∏–º API
    console.log(
      '\nüîç 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π API /api/training/questions –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'
    );

    const trainingResponse = await makeRequest('/api/training/questions');
    console.log('   - –°—Ç–∞—Ç—É—Å –∫–æ–¥:', trainingResponse.statusCode);
    console.log('   - –û—Ç–≤–µ—Ç:', JSON.stringify(trainingResponse.data, null, 2));

    if (trainingResponse.statusCode === 401) {
      console.log('   ‚ùå Training API —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    } else if (trainingResponse.statusCode === 200) {
      console.log('   ‚úÖ Training API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –≤ Training API');
    }
  } catch (error) {
    console.error('üö® –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);

    if (error.code === 'ECONNREFUSED') {
      console.log(
        '\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Next.js –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'
      );
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    }
  }

  console.log('\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFlashcardsAPI().catch(console.error);
