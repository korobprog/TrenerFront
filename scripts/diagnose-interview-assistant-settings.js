/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—à–∏–±–∫–∏ 500
 */

const { PrismaClient } = require('@prisma/client');

async function diagnoseInterviewAssistantSettings() {
  console.log(
    'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞'
  );
  console.log('='.repeat(80));

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•');
  console.log('-'.repeat(50));

  let prisma;
  try {
    prisma = new PrismaClient({
      log: ['error', 'warn', 'info', 'query'],
    });

    console.log('‚úÖ PrismaClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const testQuery = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', testQuery);
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ InterviewAssistantSettings
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò InterviewAssistantSettings');
  console.log('-'.repeat(50));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'InterviewAssistantSettings'
      );
    `;
    console.log(
      '‚úÖ –¢–∞–±–ª–∏—Ü–∞ InterviewAssistantSettings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:',
      tableExists[0].exists
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const tableStructure = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'InterviewAssistantSettings' 
      ORDER BY ordinal_position;
    `;
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã InterviewAssistantSettings:');
    tableStructure.forEach((col) => {
      console.log(
        `   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`
      );
    });
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π CRUD —Å –º–æ–¥–µ–ª—å—é
  console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¶–ò–ô CRUD');
  console.log('-'.repeat(50));

  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const existingSettings = await prisma.interviewAssistantSettings.findFirst({
      where: { isActive: true },
    });
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å findFirst –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(
      '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
      existingSettings ? '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã' : '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
    );

    if (existingSettings) {
      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
      console.log('  - ID:', existingSettings.id);
      console.log('  - API Type:', existingSettings.apiType);
      console.log(
        '  - Max Questions Per Day:',
        existingSettings.maxQuestionsPerDay
      );
      console.log('  - Is Active:', existingSettings.isActive);
    }

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\n–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const testSettings = {
      apiKey: 'test-key-for-diagnosis',
      maxQuestionsPerDay: 10,
      maxTokensPerQuestion: 4000,
      isActive: false, // –î–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏
      apiType: 'openrouter',
      openRouterApiKey: 'test-openrouter-key',
      openRouterBaseUrl: 'https://openrouter.ai/api/v1',
      openRouterModel: 'google/gemma-3-12b-it:free',
      openRouterTemperature: 0.7,
      openRouterMaxTokens: 4000,
    };

    const createdSettings = await prisma.interviewAssistantSettings.create({
      data: testSettings,
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ID:', createdSettings.id);

    // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\n–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const updatedSettings = await prisma.interviewAssistantSettings.update({
      where: { id: createdSettings.id },
      data: {
        maxQuestionsPerDay: 15,
        openRouterTemperature: 0.8,
      },
    });
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
    console.log(
      '  - Max Questions Per Day:',
      updatedSettings.maxQuestionsPerDay
    );
    console.log(
      '  - OpenRouter Temperature:',
      updatedSettings.openRouterTemperature
    );

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('\n–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    await prisma.interviewAssistantSettings.delete({
      where: { id: createdSettings.id },
    });
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    console.error('Stack trace:', error.stack);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô');
  console.log('-'.repeat(50));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç withAdminAuth
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ withAdminAuth...');
    const { withAdminAuth } = require('./lib/middleware/adminAuth');
    console.log('‚úÖ withAdminAuth –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:', typeof withAdminAuth);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç logAdminAction
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ logAdminAction...');
    const { logAdminAction } = require('./lib/middleware/adminAuth');
    console.log(
      '‚úÖ logAdminAction –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:',
      typeof logAdminAction
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç withPrisma
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ withPrisma...');
    const { withPrisma } = require('./lib/prismaCommonJS');
    console.log('‚úÖ withPrisma –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:', typeof withPrisma);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º withPrisma
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ withPrisma...');
    const testResult = await withPrisma(async (prisma) => {
      return await prisma.$queryRaw`SELECT 'withPrisma test' as result`;
    });
    console.log('‚úÖ withPrisma —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', testResult);
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }

  // 5. –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
  console.log('\n5Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø API –ó–ê–ü–†–û–°–ê');
  console.log('-'.repeat(50));

  try {
    console.log('–°–∏–º—É–ª—è—Ü–∏—è PUT –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    const testRequestBody = {
      maxQuestionsPerDay: 10,
      maxTokensPerQuestion: 4000,
      isActive: true,
      openRouterApiKey: 'test-api-key',
      openRouterBaseUrl: 'https://openrouter.ai/api/v1',
      openRouterModel: 'google/gemma-3-12b-it:free',
      openRouterTemperature: 0.7,
      openRouterMaxTokens: 4000,
    };

    console.log(
      '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:',
      JSON.stringify(testRequestBody, null, 2)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!testRequestBody.openRouterApiKey) {
      throw new Error('OpenRouter API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    if (!testRequestBody.openRouterModel) {
      throw new Error('–ú–æ–¥–µ–ª—å OpenRouter –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ç–∏–ø–æ–≤
    const convertedMaxQuestionsPerDay = parseInt(
      testRequestBody.maxQuestionsPerDay,
      10
    );
    const convertedMaxTokensPerQuestion = parseInt(
      testRequestBody.maxTokensPerQuestion,
      10
    );
    const convertedOpenRouterTemperature = parseFloat(
      testRequestBody.openRouterTemperature
    );
    const convertedOpenRouterMaxTokens = parseInt(
      testRequestBody.openRouterMaxTokens,
      10
    );

    if (isNaN(convertedMaxQuestionsPerDay)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxQuestionsPerDay');
    }
    if (isNaN(convertedMaxTokensPerQuestion)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxTokensPerQuestion');
    }
    if (isNaN(convertedOpenRouterTemperature)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterTemperature');
    }
    if (isNaN(convertedOpenRouterMaxTokens)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterMaxTokens');
    }

    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
    console.log(
      '  - maxQuestionsPerDay:',
      convertedMaxQuestionsPerDay,
      typeof convertedMaxQuestionsPerDay
    );
    console.log(
      '  - maxTokensPerQuestion:',
      convertedMaxTokensPerQuestion,
      typeof convertedMaxTokensPerQuestion
    );
    console.log(
      '  - openRouterTemperature:',
      convertedOpenRouterTemperature,
      typeof convertedOpenRouterTemperature
    );
    console.log(
      '  - openRouterMaxTokens:',
      convertedOpenRouterMaxTokens,
      typeof convertedOpenRouterMaxTokens
    );
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø');
  console.log('-'.repeat(50));

  console.log('DATABASE_URL –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', !!process.env.DATABASE_URL);
  console.log('NODE_ENV:', process.env.NODE_ENV);
  console.log('NEXTAUTH_SECRET –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', !!process.env.NEXTAUTH_SECRET);
  console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await prisma.$disconnect();
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');

  console.log('\n' + '='.repeat(80));
  console.log('üéØ –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('='.repeat(80));
  console.log('–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
  console.log('1. Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (withAdminAuth)');
  console.log('2. –õ–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ Next.js (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å npm run dev)');
  console.log('3. –ö–æ–Ω—Ñ–ª–∏–∫—Ç–µ –º–µ–∂–¥—É ES –∏ CommonJS –º–æ–¥—É–ª—è–º–∏');
  console.log('4. –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log(
    '\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.'
  );
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseInterviewAssistantSettings().catch((error) => {
  console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  process.exit(1);
});
