/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
 * –ó–∞–ø—É—Å–∫: node test-points-functionality-final.js
 */

const puppeteer = require('puppeteer');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function testPointsFunctionality() {
  console.log(
    'üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤...\n'
  );

  let browser;
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      defaultViewport: { width: 1280, height: 720 },
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    const page = await browser.newPage();

    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    page.on('console', (msg) => {
      console.log(`üåê Browser Console [${msg.type()}]:`, msg.text());
    });

    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    page.on('response', (response) => {
      if (
        response.url().includes('/api/admin/users/') &&
        response.url().includes('/points')
      ) {
        console.log(`üì° API Response: ${response.status()} ${response.url()}`);
      }
    });

    console.log('1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await page.setCookie({
      name: 'next-auth.session-token',
      value: '3621ebb0-8151-4e84-9b65-7e6ec958852a',
      domain: 'localhost',
      path: '/',
      httpOnly: true,
      secure: false,
    });

    await page.setCookie({
      name: 'next-auth.csrf-token',
      value:
        '7c040149f8f8c461298f65bcdda923027ec6f4a5eacf7f4208e646bb78b7400e%7C4f6fcff4d02c3f1ecd8d61ceeb691ef076eab85aa4a8fffbe96e962472265c46',
      domain: 'localhost',
      path: '/',
      httpOnly: false,
      secure: false,
    });

    await page.setCookie({
      name: 'next-auth.callback-url',
      value: 'http%3A%2F%2Flocalhost%3A3000%2F',
      domain: 'localhost',
      path: '/',
      httpOnly: false,
      secure: false,
    });

    console.log('2Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await page.goto(
      'http://localhost:3000/admin/users/cmb9k4mtb0000mkc4b5uwfgtz',
      {
        waitUntil: 'networkidle2',
      }
    );

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await wait(3000);

    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å...');
    const pageTitle = await page.title();
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageTitle}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await page.waitForSelector('h2', { timeout: 5000 });
      const userName = await page.$eval('h2', (el) => el.textContent);
      console.log(`   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    console.log('4Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ë–∞–ª–ª—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"...');
    try {
      // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ç–µ–∫—Å—Ç
      const buttons = await page.$$('button');
      let pointsTabFound = false;

      for (let button of buttons) {
        const text = await page.evaluate((el) => el.textContent, button);
        if (text && (text.includes('–ë–∞–ª–ª—ã') || text.includes('—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'))) {
          console.log(`   –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: "${text}"`);
          await button.click();
          pointsTabFound = true;
          break;
        }
      }

      if (pointsTabFound) {
        await wait(2000);
        console.log('   ‚úÖ –í–∫–ª–∞–¥–∫–∞ "–ë–∞–ª–ª—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" –æ—Ç–∫—Ä—ã—Ç–∞');
      } else {
        console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∫–ª–∞–¥–∫—É "–ë–∞–ª–ª—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
        const tabButtons = await page.$$(
          '[class*="tabButton"], [class*="tab"]'
        );
        for (let tab of tabButtons) {
          const text = await page.evaluate((el) => el.textContent, tab);
          console.log(`   –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: "${text}"`);
          if (text && (text.includes('–ë–∞–ª–ª—ã') || text.includes('—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'))) {
            await tab.click();
            pointsTabFound = true;
            break;
          }
        }
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∫–ª–∞–¥–∫–∏ –±–∞–ª–ª–æ–≤:', error.message);
    }

    console.log('5Ô∏è‚É£ –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã"...');
    try {
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
      await wait(2000);

      // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ç–µ–∫—Å—Ç
      const buttons = await page.$$('button');
      let editPointsButton = null;

      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${buttons.length}`);

      for (let button of buttons) {
        const text = await page.evaluate((el) => el.textContent, button);
        console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É: "${text}"`);
        if (text && text.includes('–ò–∑–º–µ–Ω–∏—Ç—å') && text.includes('–±–∞–ª–ª—ã')) {
          editPointsButton = button;
          console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${text}"`);
          break;
        }
      }

      if (editPointsButton) {
        console.log('6Ô∏è‚É£ –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã"...');
        await editPointsButton.click();
        await wait(1000);

        console.log('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å...');

        // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        const modalSelectors = [
          '[class*="modal"]',
          '[class*="Modal"]',
          '.modal',
          '[role="dialog"]',
          '[aria-modal="true"]',
          '[class*="overlay"]',
        ];

        let modalFound = false;
        for (let selector of modalSelectors) {
          try {
            await page.waitForSelector(selector, { timeout: 2000 });
            console.log(
              `   ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`
            );
            modalFound = true;
            break;
          } catch (e) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }
        }

        if (!modalFound) {
          console.log(
            '   ‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã...'
          );

          // –ò—â–µ–º —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é
          const forms = await page.$$('form');
          console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: ${forms.length}`);
        }

        console.log('8Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤...');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
        try {
          const amountInput = await page.$('input[name="amount"]');
          if (amountInput) {
            await amountInput.click({ clickCount: 3 }); // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            await amountInput.type('50');
            console.log('   ‚úÖ –í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: 50');
          } else {
            console.log('   ‚ö†Ô∏è –ü–æ–ª–µ amount –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            const inputs = await page.$$(
              'input[type="number"], input[type="text"]'
            );
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: ${inputs.length}`);

            for (let input of inputs) {
              const placeholder = await page.evaluate(
                (el) => el.placeholder,
                input
              );
              const name = await page.evaluate((el) => el.name, input);
              console.log(
                `   –ü–æ–ª–µ: name="${name}", placeholder="${placeholder}"`
              );
            }
          }
        } catch (error) {
          console.log(
            '   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª—è amount:',
            error.message
          );
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        try {
          const typeSelect = await page.$('select[name="type"]');
          if (typeSelect) {
            await typeSelect.select('bonus');
            console.log('   ‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: bonus');
          } else {
            console.log('   ‚ö†Ô∏è –ü–æ–ª–µ type –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

            // –ò—â–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã
            const selects = await page.$$('select');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ–≤: ${selects.length}`);

            for (let select of selects) {
              const name = await page.evaluate((el) => el.name, select);
              console.log(`   –°–µ–ª–µ–∫—Ç: name="${name}"`);
            }
          }
        } catch (error) {
          console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.message);
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        try {
          const descriptionTextarea = await page.$(
            'textarea[name="description"]'
          );
          if (descriptionTextarea) {
            await descriptionTextarea.click();
            await descriptionTextarea.type(
              '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä'
            );
            console.log('   ‚úÖ –í–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
          } else {
            console.log('   ‚ö†Ô∏è –ü–æ–ª–µ description –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

            // –ò—â–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–∞—Ä–µ–∞
            const textareas = await page.$$('textarea');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞—Ä–µ–∞: ${textareas.length}`);
          }
        } catch (error) {
          console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', error.message);
        }

        console.log('9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
        try {
          const submitButton = await page.$('button[type="submit"]');
          if (submitButton) {
            await submitButton.click();
            console.log('   ‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
          } else {
            console.log('   ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

            // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ —Ç.–¥.
            const buttons = await page.$$('button');
            for (let button of buttons) {
              const text = await page.evaluate((el) => el.textContent, button);
              if (
                text &&
                (text.includes('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') ||
                  text.includes('–û—Ç–ø—Ä–∞–≤–∏—Ç—å') ||
                  text.includes('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'))
              ) {
                console.log(`   –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: "${text}"`);
                await button.click();
                break;
              }
            }
          }
        } catch (error) {
          console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error.message);
        }

        // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        await wait(3000);

        console.log('üîü –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª–æ—Å—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        try {
          const modal = await page.$('[class*="modal"]');
          if (!modal) {
            console.log('   ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');
          } else {
            console.log('   ‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ');
          }
        } catch (error) {
          console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        }
      } else {
        console.log('   ‚ùå –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        console.log('   üìã –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
        const allButtons = await page.$$('button');
        for (let i = 0; i < allButtons.length; i++) {
          const text = await page.evaluate(
            (el) => el.textContent,
            allButtons[i]
          );
          console.log(`   ${i + 1}. "${text}"`);
        }
      }
    } catch (error) {
      console.log(
        '   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã":',
        error.message
      );
    }

    console.log('1Ô∏è‚É£1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–ª–æ–≤...');
    try {
      // –ò—â–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤
      const allElements = await page.$$('*');
      let foundPoints = false;

      for (let element of allElements.slice(0, 50)) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–µ—Ä–≤—ã–º–∏ 50 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        try {
          const text = await page.evaluate((el) => el.textContent, element);
          if (text && text.match(/\d+.*–±–∞–ª–ª/i)) {
            console.log(`   üí∞ –ù–∞–π–¥–µ–Ω—ã –±–∞–ª–ª—ã: ${text.trim()}`);
            foundPoints = true;
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }

      if (!foundPoints) {
        console.log('   ‚ö†Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await page.screenshot({ path: 'test-points-result.png', fullPage: true });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test-points-result.png');

    // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...');
    await wait(5000);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testPointsFunctionality().catch(console.error);
