/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter API
 *
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
 * - API –∫–ª—é—á: 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
 * - –ë–∞–∑–æ–≤—ã–π URL: https://openrouter.ai/api/v1
 * - –ú–æ–¥–µ–ª—å: google/gemma-3-12b-it:free
 * - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.7
 * - –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: 4000
 */

const https = require('https');
const http = require('http');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è OpenRouter
const testData = {
  maxQuestionsPerDay: 10,
  maxTokensPerQuestion: 4000,
  isActive: true,
  openRouterApiKey:
    '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',
  openRouterBaseUrl: 'https://openrouter.ai/api/v1',
  openRouterModel: 'google/gemma-3-12b-it:free',
  openRouterTemperature: 0.7,
  openRouterMaxTokens: 4000,
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  host: 'localhost',
  port: 3000,
  path: '/api/admin/interview-assistant-settings',
  headers: {
    'Content-Type': 'application/json',
    Cookie: 'next-auth.session-token=test-admin-token', // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
  },
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 */
function makeRequest(method, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      ...config,
      method: method,
    };

    if (data) {
      const postData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(postData);
    }

    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runFinalTest() {
  console.log('üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø OPENROUTER API');
  console.log('='.repeat(60));

  const results = {
    tests: [],
    summary: {
      total: 0,
      passed: 0,
      failed: 0,
    },
  };

  // –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  console.log('\nüìã –¢–ï–°–¢ 1: GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  console.log('-'.repeat(50));

  try {
    const getResponse = await makeRequest('GET');

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', getResponse.statusCode);
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(getResponse.data, null, 2));

    const test1 = {
      name: 'GET –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      passed: getResponse.statusCode === 200,
      details: {
        statusCode: getResponse.statusCode,
        hasSettings: !!getResponse.data.settings,
        settingsStructure: getResponse.data.settings
          ? Object.keys(getResponse.data.settings)
          : [],
      },
    };

    results.tests.push(test1);
    results.summary.total++;

    if (test1.passed) {
      console.log('‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
      results.summary.passed++;
    } else {
      console.log('‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: GET –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω');
      results.summary.failed++;
    }
  } catch (error) {
    console.log('‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ GET –∑–∞–ø—Ä–æ—Å–∞');
    console.error('–û—à–∏–±–∫–∞:', error.message);

    results.tests.push({
      name: 'GET –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      passed: false,
      error: error.message,
    });
    results.summary.total++;
    results.summary.failed++;
  }

  // –¢–µ—Å—Ç 2: PUT –∑–∞–ø—Ä–æ—Å - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter
  console.log('\nüíæ –¢–ï–°–¢ 2: PUT –∑–∞–ø—Ä–æ—Å - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter');
  console.log('-'.repeat(50));
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(testData, null, 2));

  try {
    const putResponse = await makeRequest('PUT', testData);

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', putResponse.statusCode);
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(putResponse.data, null, 2));

    const test2 = {
      name: 'PUT –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      passed: putResponse.statusCode === 200,
      details: {
        statusCode: putResponse.statusCode,
        hasMessage: !!putResponse.data.message,
        hasSettings: !!putResponse.data.settings,
        errorCode: putResponse.data.code || null,
      },
    };

    results.tests.push(test2);
    results.summary.total++;

    if (test2.passed) {
      console.log(
        '‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: PUT –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –æ—à–∏–±–∫–∞ 500 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      );
      results.summary.passed++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (putResponse.data.settings) {
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–´–• –î–ê–ù–ù–´–•:');
        const settings = putResponse.data.settings;

        console.log('- API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', !!settings.openRouterApiKey);
        console.log('- –ë–∞–∑–æ–≤—ã–π URL:', settings.openRouterBaseUrl);
        console.log('- –ú–æ–¥–µ–ª—å:', settings.openRouterModel);
        console.log('- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:', settings.openRouterTemperature);
        console.log('- –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤:', settings.openRouterMaxTokens);
        console.log('- –¢–∏–ø API:', settings.apiType);
      }
    } else {
      console.log('‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: PUT –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω');
      results.summary.failed++;

      if (putResponse.statusCode === 500) {
        console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ 500 –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      }
    }
  } catch (error) {
    console.log('‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ PUT –∑–∞–ø—Ä–æ—Å–∞');
    console.error('–û—à–∏–±–∫–∞:', error.message);

    results.tests.push({
      name: 'PUT –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      passed: false,
      error: error.message,
    });
    results.summary.total++;
    results.summary.failed++;
  }

  // –¢–µ—Å—Ç 3: GET –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  console.log('\nüîÑ –¢–ï–°–¢ 3: GET –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
  console.log('-'.repeat(50));

  try {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await new Promise((resolve) => setTimeout(resolve, 1000));

    const getAfterPutResponse = await makeRequest('GET');

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', getAfterPutResponse.statusCode);

    const test3 = {
      name: 'GET –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
      passed: getAfterPutResponse.statusCode === 200,
      details: {
        statusCode: getAfterPutResponse.statusCode,
        hasSettings: !!getAfterPutResponse.data.settings,
      },
    };

    if (getAfterPutResponse.data.settings) {
      const settings = getAfterPutResponse.data.settings;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const dataMatches = {
        apiKey: settings.openRouterApiKey === testData.openRouterApiKey,
        baseUrl: settings.openRouterBaseUrl === testData.openRouterBaseUrl,
        model: settings.openRouterModel === testData.openRouterModel,
        temperature:
          Math.abs(
            settings.openRouterTemperature - testData.openRouterTemperature
          ) < 0.01,
        maxTokens:
          settings.openRouterMaxTokens === testData.openRouterMaxTokens,
        apiType: settings.apiType === 'openrouter',
      };

      test3.details.dataMatches = dataMatches;
      test3.details.allDataMatches = Object.values(dataMatches).every(
        (match) => match
      );

      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–ê–ù–ù–´–•:');
      Object.entries(dataMatches).forEach(([key, matches]) => {
        console.log(`- ${key}: ${matches ? '‚úÖ' : '‚ùå'}`);
      });

      if (test3.details.allDataMatches) {
        console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        test3.passed = false;
      }
    }

    results.tests.push(test3);
    results.summary.total++;

    if (test3.passed) {
      console.log('‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      results.summary.passed++;
    } else {
      console.log(
        '‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö'
      );
      results.summary.failed++;
    }
  } catch (error) {
    console.log('‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.error('–û—à–∏–±–∫–∞:', error.message);

    results.tests.push({
      name: 'GET –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
      passed: false,
      error: error.message,
    });
    results.summary.total++;
    results.summary.failed++;
  }

  // –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π - —Ç–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  console.log('\nüõ°Ô∏è –¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  console.log('-'.repeat(50));

  const invalidData = {
    ...testData,
    openRouterApiKey: '', // –ü—É—Å—Ç–æ–π API –∫–ª—é—á
    openRouterTemperature: 'invalid', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    maxQuestionsPerDay: 'not_a_number', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
  };

  try {
    const validationResponse = await makeRequest('PUT', invalidData);

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', validationResponse.statusCode);
    console.log(
      '–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:',
      JSON.stringify(validationResponse.data, null, 2)
    );

    const test4 = {
      name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π',
      passed: validationResponse.statusCode === 400, // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      details: {
        statusCode: validationResponse.statusCode,
        errorCode: validationResponse.data.code || null,
        message: validationResponse.data.message || null,
      },
    };

    results.tests.push(test4);
    results.summary.total++;

    if (test4.passed) {
      console.log('‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      results.summary.passed++;
    } else {
      console.log('‚ùå –¢–ï–°–¢ 4 –ù–ï –ü–†–û–ô–î–ï–ù: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      results.summary.failed++;
    }
  } catch (error) {
    console.log('‚ùå –¢–ï–°–¢ 4 –ù–ï –ü–†–û–ô–î–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    console.error('–û—à–∏–±–∫–∞:', error.message);

    results.tests.push({
      name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π',
      passed: false,
      error: error.message,
    });
    results.summary.total++;
    results.summary.failed++;
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));

  console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.summary.total}`);
  console.log(`- –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.summary.passed} ‚úÖ`);
  console.log(`- –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${results.summary.failed} ‚ùå`);
  console.log(
    `- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(
      (results.summary.passed / results.summary.total) * 100
    )}%`
  );

  console.log(`\nüìã –î–ï–¢–ê–õ–ò –¢–ï–°–¢–û–í:`);
  results.tests.forEach((test, index) => {
    console.log(
      `${index + 1}. ${test.name}: ${
        test.passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'
      }`
    );
    if (test.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${test.error}`);
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const isFixed = results.summary.passed >= 3; // –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 4 —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
  const has500Error = results.tests.some(
    (test) => test.details && test.details.statusCode === 500
  );

  console.log(`\nüéØ –°–¢–ê–¢–£–° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
  if (isFixed && !has500Error) {
    console.log(
      '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û: –û—à–∏–±–∫–∞ 500 —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞, API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    );
  } else if (has500Error) {
    console.log('‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –ó–ê–í–ï–†–®–ï–ù–û: –û—à–∏–±–∫–∞ 500 –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    console.log(
      '‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–ß–ù–û: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    );
  }

  console.log(`\nüîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–´–ú –ö–õ–Æ–ß–û–ú:`);
  console.log(
    `- API –∫–ª—é—á: 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`
  );
  console.log(
    `- –°—Ç–∞—Ç—É—Å: ${
      isFixed ? '–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ' : '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚ùå'
    }`
  );

  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runFinalTest()
    .then((results) => {
      console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
      process.exit(results.summary.failed === 0 ? 0 : 1);
    })
    .catch((error) => {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
      process.exit(1);
    });
}

module.exports = { runFinalTest, testData };
