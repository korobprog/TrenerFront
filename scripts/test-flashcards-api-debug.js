const { PrismaClient } = require('@prisma/client');

async function testFlashcardsAPI() {
  const prisma = new PrismaClient();

  try {
    console.log('=== –¢–ï–°–¢ API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤...');
    const totalQuestions = await prisma.question.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    const questionsWithText = await prisma.question.count({
      where: {
        AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
      },
    });
    console.log(`üìù –í–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: ${questionsWithText}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã User
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const userCount = await prisma.user.count();
    console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);

    if (userCount > 0) {
      const sampleUser = await prisma.user.findFirst({
        select: {
          id: true,
          email: true,
          name: true,
          createdAt: true,
        },
      });
      console.log('üë§ –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sampleUser);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');

    try {
      const progressCount = await prisma.userProgress.count();
      console.log(`üìà –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progressCount}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UserProgress:', error.message);
    }

    try {
      const favoritesCount = await prisma.favoriteQuestion.count();
      console.log(`‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${favoritesCount}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FavoriteQuestion:', error.message);
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ API
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ API...');

    const whereConditions = {
      AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
    };

    console.log('üîç –£—Å–ª–æ–≤–∏—è WHERE:', JSON.stringify(whereConditions, null, 2));

    const questions = await prisma.question.findMany({
      where: whereConditions,
      orderBy: [{ createdAt: 'desc' }],
      take: 5,
      include: {
        userProgress: {
          where: {
            userId: 'test-user-id', // –¢–µ—Å—Ç–æ–≤—ã–π ID
          },
          orderBy: {
            lastReviewed: 'desc',
          },
          take: 1,
        },
        favoriteQuestions: {
          where: {
            userId: 'test-user-id', // –¢–µ—Å—Ç–æ–≤—ã–π ID
          },
        },
      },
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questions.length}`);

    if (questions.length > 0) {
      console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:');
      questions.slice(0, 3).forEach((q, i) => {
        console.log(`  ${i + 1}. ID: ${q.id}`);
        console.log(`     –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`     –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`     –¢–µ–∫—Å—Ç: ${q.text?.substring(0, 100)}...`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${q.createdAt}`);
      });
    }

    console.log('=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===');
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('   –°—Ç–µ–∫:', error.stack);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.code === 'P2002') {
      console.error('   –¢–∏–ø: –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
    } else if (error.code === 'P2025') {
      console.error('   –¢–∏–ø: –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } else if (error.code === 'P1001') {
      console.error('   –¢–∏–ø: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else if (error.code === 'P1017') {
      console.error('   –¢–∏–ø: –°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
  } finally {
    await prisma.$disconnect();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

testFlashcardsAPI();
