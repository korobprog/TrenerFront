/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ userId
 * –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
 */

const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000';
const TEST_EMAIL = 'test@example.com';
const TEST_PASSWORD = 'testpassword123';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–µ–Ω–∏—è cookie —Å–µ—Å—Å–∏–∏
 */
async function signIn() {
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...');

  try {
    const response = await fetch(`${BASE_URL}/api/auth/signin`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: TEST_EMAIL,
        password: TEST_PASSWORD,
      }),
    });

    const cookies = response.headers.get('set-cookie');
    console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return cookies;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock-–∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
 */
async function createMockInterviewWithBuiltInVideo(cookies) {
  console.log('üé• –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π...');

  // –í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const scheduledTime = new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString();

  const interviewData = {
    scheduledTime: scheduledTime,
    videoType: 'built_in',
  };

  console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', {
    scheduledTime,
    videoType: interviewData.videoType,
  });

  try {
    const response = await fetch(`${BASE_URL}/api/mock-interviews`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Cookie: cookies,
      },
      body: JSON.stringify(interviewData),
    });

    const responseData = await response.json();

    console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
    });

    if (response.ok) {
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìù –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', {
        id: responseData.id,
        videoType: responseData.videoType,
        videoRoomId: responseData.videoRoomId,
        meetingLink: responseData.meetingLink,
        scheduledTime: responseData.scheduledTime,
        status: responseData.status,
      });

      if (responseData.videoRoom) {
        console.log('üè† –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã:', {
          id: responseData.videoRoom.id,
          code: responseData.videoRoom.code,
          name: responseData.videoRoom.name,
          isActive: responseData.videoRoom.isActive,
        });
      }

      return responseData;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', {
        status: response.status,
        error: responseData.error || responseData.message,
        details: responseData.details,
      });
      throw new Error(
        `–û—à–∏–±–∫–∞ ${response.status}: ${
          responseData.error || responseData.message
        }`
      );
    }
  } catch (error) {
    console.error(
      '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:',
      error.message
    );
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 */
async function createMockInterviewWithGoogleMeet(cookies) {
  console.log('üìû –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...');

  // –í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const scheduledTime = new Date(Date.now() + 3 * 60 * 60 * 1000).toISOString();

  const interviewData = {
    scheduledTime: scheduledTime,
    videoType: 'google_meet',
    manualMeetingLink: 'https://meet.google.com/test-comparison-link',
  };

  try {
    const response = await fetch(`${BASE_URL}/api/mock-interviews`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Cookie: cookies,
      },
      body: JSON.stringify(interviewData),
    });

    const responseData = await response.json();

    if (response.ok) {
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      return responseData;
    } else {
      console.log(
        '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet (–æ–∂–∏–¥–∞–µ–º–æ):',
        responseData.error
      );
      return null;
    }
  } catch (error) {
    console.log(
      '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet:',
      error.message
    );
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId...');
  console.log('üåê –ë–∞–∑–æ–≤—ã–π URL:', BASE_URL);
  console.log('üìß –¢–µ—Å—Ç–æ–≤—ã–π email:', TEST_EMAIL);
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
  console.log('='.repeat(60));

  try {
    // –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    const cookies = await signIn();

    console.log('\n' + '='.repeat(60));

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
    const builtInInterview = await createMockInterviewWithBuiltInVideo(cookies);

    console.log('\n' + '='.repeat(60));

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const googleMeetInterview = await createMockInterviewWithGoogleMeet(
      cookies
    );

    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(
      '‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–∞:',
      builtInInterview ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'
    );
    console.log(
      'üìû Google Meet:',
      googleMeetInterview ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'
    );

    if (builtInInterview) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –û—à–∏–±–∫–∞ userId –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.');
      console.log('üìã –°–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é:');
      console.log(`   - ID: ${builtInInterview.id}`);
      console.log(`   - –¢–∏–ø –≤–∏–¥–µ–æ: ${builtInInterview.videoType}`);
      console.log(`   - ID –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã: ${builtInInterview.videoRoomId}`);
      console.log(`   - –°—Å—ã–ª–∫–∞: ${builtInInterview.meetingLink}`);
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –û—à–∏–±–∫–∞ userId –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    }
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runTest().catch(console.error);
}

module.exports = {
  runTest,
  createMockInterviewWithBuiltInVideo,
  signIn,
};
