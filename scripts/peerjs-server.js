#!/usr/bin/env node

/**
 * PeerJS —Å–µ—Ä–≤–µ—Ä –¥–ª—è WebRTC –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ –¥–ª—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 */

const { PeerServer } = require('peer');
const express = require('express');
const cors = require('cors');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '../.env.development') });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const config = {
  port: process.env.PEERJS_PORT || 9000,
  host: process.env.PEERJS_HOST || '0.0.0.0',
  path: process.env.PEERJS_PATH || '/peerjs',
  key: process.env.PEERJS_KEY || 'peerjs',
  corsOrigin:
    process.env.NODE_ENV === 'production'
      ? process.env.NEXTAUTH_URL
      : ['http://localhost:3000', 'http://127.0.0.1:3000'],
  debug: process.env.NODE_ENV === 'development' ? 3 : 1,
  allow_discovery: true,
  proxied: process.env.NODE_ENV === 'production',
  cleanup_out_msgs: 1000,
  concurrent_limit: 5000,
};

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(
  cors({
    origin: config.corsOrigin,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  })
);

app.use(express.json());

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const connectionStats = {
  totalConnections: 0,
  activeConnections: 0,
  peakConnections: 0,
  startTime: new Date(),
  connectionHistory: [],
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤
const activePeers = new Map();

// –°–æ–∑–¥–∞–µ–º PeerJS —Å–µ—Ä–≤–µ—Ä
const peerServer = PeerServer({
  port: config.port,
  host: config.host,
  path: config.path,
  key: config.key,
  corsOptions: {
    origin: config.corsOrigin,
    credentials: true,
  },
  debug: config.debug,
  allow_discovery: config.allow_discovery,
  proxied: config.proxied,
  cleanup_out_msgs: config.cleanup_out_msgs,
  concurrent_limit: config.concurrent_limit,
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π PeerJS —Å–µ—Ä–≤–µ—Ä–∞
peerServer.on('connection', (client) => {
  const peerId = client.getId();
  const timestamp = new Date();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  connectionStats.totalConnections++;
  connectionStats.activeConnections++;
  connectionStats.peakConnections = Math.max(
    connectionStats.peakConnections,
    connectionStats.activeConnections
  );

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
  activePeers.set(peerId, {
    id: peerId,
    connectedAt: timestamp,
    lastSeen: timestamp,
    ip: client.getSocket()?.remoteAddress || 'unknown',
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
  connectionStats.connectionHistory.unshift({
    peerId,
    action: 'connected',
    timestamp,
    ip: client.getSocket()?.remoteAddress || 'unknown',
  });

  if (connectionStats.connectionHistory.length > 100) {
    connectionStats.connectionHistory.pop();
  }

  console.log(
    `[${timestamp.toISOString()}] –ü–∏—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${peerId} (IP: ${
      client.getSocket()?.remoteAddress || 'unknown'
    })`
  );
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${connectionStats.activeConnections}`);
});

peerServer.on('disconnect', (client) => {
  const peerId = client.getId();
  const timestamp = new Date();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  connectionStats.activeConnections--;

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
  const peerInfo = activePeers.get(peerId);
  if (peerInfo) {
    const sessionDuration = timestamp - peerInfo.connectedAt;
    activePeers.delete(peerId);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
    connectionStats.connectionHistory.unshift({
      peerId,
      action: 'disconnected',
      timestamp,
      sessionDuration: Math.round(sessionDuration / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      ip: peerInfo.ip,
    });

    if (connectionStats.connectionHistory.length > 100) {
      connectionStats.connectionHistory.pop();
    }

    console.log(
      `[${timestamp.toISOString()}] –ü–∏—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${peerId} (–°–µ—Å—Å–∏—è: ${Math.round(
        sessionDuration / 1000
      )}—Å)`
    );
  } else {
    console.log(`[${timestamp.toISOString()}] –ü–∏—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${peerId}`);
  }

  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${connectionStats.activeConnections}`);
});

peerServer.on('error', (error) => {
  console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ PeerJS —Å–µ—Ä–≤–µ—Ä–∞:`, error);
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.get('/api/stats', (req, res) => {
  const uptime = Date.now() - connectionStats.startTime.getTime();

  res.json({
    ...connectionStats,
    uptime: Math.round(uptime / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    activePeers: Array.from(activePeers.values()),
    serverConfig: {
      port: config.port,
      host: config.host,
      path: config.path,
      environment: process.env.NODE_ENV,
    },
  });
});

app.get('/api/peers', (req, res) => {
  res.json({
    count: activePeers.size,
    peers: Array.from(activePeers.values()),
  });
});

app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    activeConnections: connectionStats.activeConnections,
    uptime: Math.round(
      (Date.now() - connectionStats.startTime.getTime()) / 1000
    ),
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(config.port + 1, config.host, () => {
  console.log('='.repeat(60));
  console.log('üöÄ PeerJS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –∑–∞–ø—É—â–µ–Ω!');
  console.log('='.repeat(60));
  console.log(`üì° PeerJS —Å–µ—Ä–≤–µ—Ä: ${config.host}:${config.port}${config.path}`);
  console.log(`üìä API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${config.host}:${config.port + 1}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
  console.log(
    `üîó CORS —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è: ${
      Array.isArray(config.corsOrigin)
        ? config.corsOrigin.join(', ')
        : config.corsOrigin
    }`
  );
  console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: —É—Ä–æ–≤–µ–Ω—å ${config.debug}`);
  console.log('='.repeat(60));
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã:');
  console.log(`   GET  /api/health  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞`);
  console.log(`   GET  /api/stats   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);
  console.log(`   GET  /api/peers   - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤`);
  console.log('='.repeat(60));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

function gracefulShutdown(signal) {
  console.log(
    `\n[${new Date().toISOString()}] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`
  );

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  });

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º PeerJS —Å–µ—Ä–≤–µ—Ä
  if (peerServer && peerServer.close) {
    peerServer.close(() => {
      console.log('PeerJS —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
  } else {
    process.exit(0);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error(`[${new Date().toISOString()}] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`, error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error(
    `[${new Date().toISOString()}] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:`,
    reason
  );
  console.error('–ü—Ä–æ–º–∏—Å:', promise);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
  const uptime = Math.round(
    (Date.now() - connectionStats.startTime.getTime()) / 1000
  );
  console.log(
    `[${new Date().toISOString()}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${
      connectionStats.activeConnections
    } –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${
      connectionStats.totalConnections
    } –≤—Å–µ–≥–æ, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`
  );
}, 5 * 60 * 1000);

module.exports = { peerServer, app, connectionStats };
