/**
 * –¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 500 –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /user/profile
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

const http = require('http');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : null;
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonData,
            rawData: data,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: null,
            rawData: data,
            parseError: error.message,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (postData) {
      req.write(postData);
    }

    req.end();
  });
}

// –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testWithoutAuth() {
  log('\n=== –¢–ï–°–¢ 1: –ó–ê–ü–†–û–° –ë–ï–ó –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===', 'cyan');

  try {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/user/profile',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Test-Agent/1.0',
      },
    };

    log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ cookies...', 'blue');
    log(
      `   URL: http://${options.hostname}:${options.port}${options.path}`,
      'yellow'
    );
    log(`   Method: ${options.method}`, 'yellow');

    const response = await makeRequest(options);

    log(`üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, 'blue');
    log(
      `   Status: ${response.statusCode}`,
      response.statusCode === 401 ? 'green' : 'red'
    );
    log(`   Headers: ${JSON.stringify(response.headers, null, 2)}`, 'yellow');
    log(`   Data: ${JSON.stringify(response.data, null, 2)}`, 'yellow');

    if (response.statusCode === 401) {
      log('‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 401 Unauthorized', 'green');
      return true;
    } else {
      log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ cookies
async function testWithInvalidCookies() {
  log('\n=== –¢–ï–°–¢ 2: –ó–ê–ü–†–û–° –° –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ú–ò COOKIES ===', 'cyan');

  try {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/user/profile',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Test-Agent/1.0',
        Cookie:
          'next-auth.session-token=invalid-token; next-auth.csrf-token=invalid-csrf',
      },
    };

    log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ cookies...', 'blue');
    log(
      `   URL: http://${options.hostname}:${options.port}${options.path}`,
      'yellow'
    );
    log(`   Cookies: ${options.headers.Cookie}`, 'yellow');

    const response = await makeRequest(options);

    log(`üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, 'blue');
    log(
      `   Status: ${response.statusCode}`,
      response.statusCode === 401 ? 'green' : 'red'
    );
    log(`   Data: ${JSON.stringify(response.data, null, 2)}`, 'yellow');

    if (response.statusCode === 401) {
      log('‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 401 Unauthorized', 'green');
      return true;
    } else if (response.statusCode === 500) {
      log(
        'üö® –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê 500! –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö cookies',
        'red'
      );
      log(`   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${response.rawData}`, 'red');
      return false;
    } else {
      log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ cookies
async function testWithCorruptedCookies() {
  log('\n=== –¢–ï–°–¢ 3: –ó–ê–ü–†–û–° –° –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ú–ò COOKIES ===', 'cyan');

  try {
    const corruptedCookies = [
      'next-auth.session-token=corrupted%data%here',
      'next-auth.session-token={"invalid":"json"',
      'next-auth.session-token=null',
      'next-auth.session-token=undefined',
    ];

    for (const cookie of corruptedCookies) {
      log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ cookie: ${cookie}`, 'blue');

      const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/user/profile',
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Test-Agent/1.0',
          Cookie: cookie,
        },
      };

      const response = await makeRequest(options);

      log(
        `   Status: ${response.statusCode}`,
        response.statusCode === 401 ? 'green' : 'red'
      );

      if (response.statusCode === 500) {
        log(
          'üö® –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê 500! –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö cookies',
          'red'
        );
        log(`   Cookie: ${cookie}`, 'red');
        log(`   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${response.rawData}`, 'red');
        return false;
      }
    }

    log('‚úÖ –í—Å–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ cookies –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function testServerAvailability() {
  log('\n=== –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê ===', 'cyan');

  try {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/',
      method: 'GET',
      headers: {
        'User-Agent': 'Test-Agent/1.0',
      },
    };

    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...', 'blue');

    const response = await makeRequest(options);

    log(`üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, 'blue');
    log(
      `   Status: ${response.statusCode}`,
      response.statusCode === 200 ? 'green' : 'red'
    );

    if (response.statusCode === 200) {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
      return true;
    } else {
      log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`, 'red');
      return false;
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (ECONNREFUSED)', 'red');
      log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev', 'yellow');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'red');
    }
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ NextAuth —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testNextAuthEndpoints() {
  log('\n=== –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê NEXTAUTH –≠–ù–î–ü–û–ò–ù–¢–û–í ===', 'cyan');

  const endpoints = [
    '/api/auth/session',
    '/api/auth/providers',
    '/api/auth/csrf',
  ];

  let allPassed = true;

  for (const endpoint of endpoints) {
    try {
      log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${endpoint}`, 'blue');

      const options = {
        hostname: 'localhost',
        port: 3000,
        path: endpoint,
        method: 'GET',
        headers: {
          'User-Agent': 'Test-Agent/1.0',
        },
      };

      const response = await makeRequest(options);

      log(
        `   Status: ${response.statusCode}`,
        response.statusCode === 200 ? 'green' : 'red'
      );

      if (response.statusCode !== 200) {
        log(`   ‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`, 'red');
        allPassed = false;
      }

      if (response.statusCode === 500) {
        log(`   üö® –û–®–ò–ë–ö–ê 500 –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ NextAuth: ${endpoint}`, 'red');
        log(`   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${response.rawData}`, 'red');
      }
    } catch (error) {
      log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${endpoint}: ${error.message}`, 'red');
      allPassed = false;
    }
  }

  return allPassed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runHTTPDiagnostics() {
  log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HTTP –ó–ê–ü–†–û–°–û–í –ö API –ü–†–û–§–ò–õ–Ø', 'magenta');
  log('=' * 60, 'magenta');

  const results = {
    serverAvailability: false,
    nextAuthEndpoints: false,
    withoutAuth: false,
    invalidCookies: false,
    corruptedCookies: false,
  };

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    results.serverAvailability = await testServerAvailability();

    if (!results.serverAvailability) {
      log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.', 'red');
      return results;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º NextAuth —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    results.nextAuthEndpoints = await testNextAuthEndpoints();

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã API –ø—Ä–æ—Ñ–∏–ª—è
    results.withoutAuth = await testWithoutAuth();
    results.invalidCookies = await testWithInvalidCookies();
    results.corruptedCookies = await testWithCorruptedCookies();

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log('\n' + '=' * 60, 'magenta');
    log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ HTTP –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò', 'magenta');
    log('=' * 60, 'magenta');

    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù';
      const color = passed ? 'green' : 'red';
      log(`${test}: ${status}`, color);
    });

    const passedCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;

    log(
      `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`,
      passedCount === totalCount ? 'green' : 'yellow'
    );

    if (passedCount === totalCount) {
      log('\nüéâ –í—Å–µ HTTP —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!', 'green');
      log(
        'üí° –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 500 –≤—Å–µ –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:',
        'blue'
      );
      log('   - –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞', 'blue');
      log('   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö', 'blue');
      log('   - –°–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', 'blue');
    } else {
      log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ HTTP –æ–±—Ä–∞–±–æ—Ç–∫–µ.', 'yellow');
    }

    return results;
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'red');
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return results;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (require.main === module) {
  runHTTPDiagnostics().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  runHTTPDiagnostics,
  testServerAvailability,
  testNextAuthEndpoints,
  testWithoutAuth,
  testWithInvalidCookies,
  testWithCorruptedCookies,
};
