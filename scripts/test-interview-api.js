/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–∞ —Ç–∏–ø–∞ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏: built_in –∏ google_meet
 */

const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000';
const API_BASE = `${BASE_URL}/api`;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_USER_EMAIL = 'test@example.com'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_SCHEDULED_TIME = new Date(
  Date.now() + 24 * 60 * 60 * 1000
).toISOString(); // –ó–∞–≤—Ç—Ä–∞

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function makeRequest(url, options = {}) {
  try {
    console.log(`\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);

    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });

    const data = await response.json();

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(data, null, 2));

    return { response, data };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message);
    return { error };
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
 */
async function testBuiltInVideoInterview() {
  console.log(
    '\nüß™ === –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π ==='
  );

  const requestData = {
    scheduledTime: TEST_SCHEDULED_TIME,
    videoType: 'built_in',
  };

  const { response, data, error } = await makeRequest(
    `${API_BASE}/mock-interviews`,
    {
      method: 'POST',
      body: JSON.stringify(requestData),
    }
  );

  if (error) {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
    return null;
  }

  if (response.status === 201) {
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìπ VideoRoom ID: ${data.videoRoomId}`);
    console.log(`üîó Meeting Link: ${data.meetingLink}`);
    return data;
  } else if (response.status === 401) {
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é');
    return null;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: ${data.message}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet
 */
async function testGoogleMeetInterview() {
  console.log('\nüß™ === –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet ===');

  const requestData = {
    scheduledTime: TEST_SCHEDULED_TIME,
    videoType: 'google_meet',
    manualMeetingLink: 'https://meet.google.com/test-mock-link-12345',
  };

  const { response, data, error } = await makeRequest(
    `${API_BASE}/mock-interviews`,
    {
      method: 'POST',
      body: JSON.stringify(requestData),
    }
  );

  if (error) {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
    return null;
  }

  if (response.status === 201) {
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìπ Video Type: ${data.videoType}`);
    console.log(`üîó Meeting Link: ${data.meetingLink}`);
    return data;
  } else if (response.status === 401) {
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é');
    return null;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: ${data.message}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
 */
async function testGetInterviews() {
  console.log('\nüß™ === –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é ===');

  const { response, data, error } = await makeRequest(
    `${API_BASE}/mock-interviews`
  );

  if (error) {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
    return null;
  }

  if (response.status === 200) {
    console.log(`‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (${data.length} –∏–Ω—Ç–µ—Ä–≤—å—é)`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const sampleInterviews = data.slice(0, 3);
    sampleInterviews.forEach((interview, index) => {
      console.log(`üìã –ò–Ω—Ç–µ—Ä–≤—å—é ${index + 1}:`);
      console.log(`   ID: ${interview.id}`);
      console.log(`   –í—Ä–µ–º—è: ${interview.scheduledTime}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${interview.status}`);
      console.log(`   –¢–∏–ø –≤–∏–¥–µ–æ: ${interview.videoType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   VideoRoom ID: ${interview.videoRoomId || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    });

    return data;
  } else if (response.status === 401) {
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é');
    return null;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: ${data.message}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è VideoRoom
 */
async function testCreateVideoRoom() {
  console.log('\nüß™ === –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ VideoRoom ===');

  const requestData = {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞',
    description: '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
    isPrivate: true,
    maxParticipants: 2,
    recordingEnabled: false,
    settings: {
      allowScreenShare: true,
      allowChat: true,
      autoRecord: false,
    },
  };

  const { response, data, error } = await makeRequest(
    `${API_BASE}/video-conferences`,
    {
      method: 'POST',
      body: JSON.stringify(requestData),
    }
  );

  if (error) {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
    return null;
  }

  if (response.status === 201) {
    console.log('‚úÖ VideoRoom —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log(`üè† Room ID: ${data.id}`);
    console.log(`üîë Room Code: ${data.code}`);
    console.log(`üîí Is Private: ${data.isPrivate}`);
    console.log(`üìπ Recording Enabled: ${data.recordingEnabled}`);
    console.log(`‚öôÔ∏è Settings:`, JSON.stringify(data.settings, null, 2));
    return data;
  } else if (response.status === 401) {
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VideoRoom');
    return null;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VideoRoom: ${data.error}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VideoRoom
 */
async function testGetVideoRooms() {
  console.log('\nüß™ === –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VideoRoom ===');

  const { response, data, error } = await makeRequest(
    `${API_BASE}/video-conferences`
  );

  if (error) {
    console.log('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
    return null;
  }

  if (response.status === 200) {
    console.log(`‚úÖ –°–ø–∏—Å–æ–∫ VideoRoom –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (${data.length} –∫–æ–º–Ω–∞—Ç)`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const sampleRooms = data.slice(0, 3);
    sampleRooms.forEach((room, index) => {
      console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ ${index + 1}:`);
      console.log(`   ID: ${room.id}`);
      console.log(`   –ö–æ–¥: ${room.code}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${room.name}`);
      console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω–∞—è: ${room.isPrivate}`);
      console.log(`   –ó–∞–ø–∏—Å—å: ${room.recordingEnabled}`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω–∞—è: ${room.isActive}`);
    });

    return data;
  } else if (response.status === 401) {
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VideoRoom');
    return null;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VideoRoom: ${data.error}`);
    return null;
  }
}

/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
async function testValidation() {
  console.log('\nüß™ === –¢–ï–°–¢: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===');

  // –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º videoType
  console.log('\nüìù –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ videoType...');
  const { response: invalidTypeResponse, data: invalidTypeData } =
    await makeRequest(`${API_BASE}/mock-interviews`, {
      method: 'POST',
      body: JSON.stringify({
        scheduledTime: TEST_SCHEDULED_TIME,
        videoType: 'invalid_type',
      }),
    });

  if (invalidTypeResponse.status === 400) {
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è videoType —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è videoType –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }

  // –¢–µ—Å—Ç –±–µ–∑ scheduledTime
  console.log('\nüìù –¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ scheduledTime...');
  const { response: noTimeResponse, data: noTimeData } = await makeRequest(
    `${API_BASE}/mock-interviews`,
    {
      method: 'POST',
      body: JSON.stringify({
        videoType: 'built_in',
      }),
    }
  );

  if (noTimeResponse.status === 400) {
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è scheduledTime —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è scheduledTime –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üöÄ === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í API –ò–ù–¢–ï–†–í–¨–Æ ===');
  console.log(`üåê Base URL: ${BASE_URL}`);
  console.log(`üìÖ Test Scheduled Time: ${TEST_SCHEDULED_TIME}`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ VideoRoom
  await testCreateVideoRoom();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VideoRoom
  await testGetVideoRooms();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
  await testBuiltInVideoInterview();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Google Meet
  await testGoogleMeetInterview();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
  await testGetInterviews();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
  await testValidation();

  console.log('\nüèÅ === –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
  console.log('\nüìù –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:');
  console.log('- –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('- –¢–µ—Å—Ç—ã —Å –∫–æ–¥–æ–º 401 –æ–∂–∏–¥–∞–µ–º—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log(
    '- –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Calendar API –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã'
  );
  console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testBuiltInVideoInterview,
  testGoogleMeetInterview,
  testGetInterviews,
  testCreateVideoRoom,
  testGetVideoRooms,
  testValidation,
  runTests,
};
