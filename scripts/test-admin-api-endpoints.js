/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */

const BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });

    const data = await response.json();

    return {
      status: response.status,
      ok: response.ok,
      data,
    };
  } catch (error) {
    return {
      status: 0,
      ok: false,
      error: error.message,
    };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testAdminEndpoints() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...\n');

  const endpoints = [
    {
      name: 'Statistics API',
      url: `${BASE_URL}/api/admin/statistics`,
      method: 'GET',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
    },
    {
      name: 'Users API (GET)',
      url: `${BASE_URL}/api/admin/users`,
      method: 'GET',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    },
    {
      name: 'Users API (PUT)',
      url: `${BASE_URL}/api/admin/users`,
      method: 'PUT',
      body: { userId: 'test-id', role: 'user' },
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    },
    {
      name: 'Users API (DELETE)',
      url: `${BASE_URL}/api/admin/users`,
      method: 'DELETE',
      body: { userId: 'test-id' },
      description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    },
    {
      name: 'Logs API',
      url: `${BASE_URL}/api/admin/logs`,
      method: 'GET',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    },
    {
      name: 'Interviews API (GET)',
      url: `${BASE_URL}/api/admin/interviews`,
      method: 'GET',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π',
    },
    {
      name: 'Interviews API (PUT)',
      url: `${BASE_URL}/api/admin/interviews`,
      method: 'PUT',
      body: { interviewId: 'test-id', status: 'completed' },
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
    },
    {
      name: 'Interviews API (DELETE)',
      url: `${BASE_URL}/api/admin/interviews`,
      method: 'DELETE',
      body: { interviewId: 'test-id' },
      description: '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
    },
  ];

  const results = [];

  for (const endpoint of endpoints) {
    console.log(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint.name}`);
    console.log(`   URL: ${endpoint.url}`);
    console.log(`   –ú–µ—Ç–æ–¥: ${endpoint.method}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${endpoint.description}`);

    const options = {
      method: endpoint.method,
    };

    if (endpoint.body) {
      options.body = JSON.stringify(endpoint.body);
    }

    const result = await makeRequest(endpoint.url, options);

    console.log(`   –°—Ç–∞—Ç—É—Å: ${result.status}`);

    if (result.status === 401) {
      console.log(`   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
      results.push({
        ...endpoint,
        status: 'PASS',
        reason: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
      });
    } else if (result.status === 403) {
      console.log(
        `   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
      );
      results.push({
        ...endpoint,
        status: 'PASS',
        reason: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      });
    } else if (result.status === 405) {
      console.log(`   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      results.push({
        ...endpoint,
        status: 'PASS',
        reason: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã',
      });
    } else if (result.status === 404) {
      console.log(`   ‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      results.push({
        ...endpoint,
        status: 'FAIL',
        reason: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });
    } else if (result.status === 0) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${result.error}`);
      results.push({
        ...endpoint,
        status: 'FAIL',
        reason: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${result.error}`,
      });
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${result.status}`);
      console.log(`   –û—Ç–≤–µ—Ç:`, result.data);
      results.push({
        ...endpoint,
        status: 'UNEXPECTED',
        reason: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${result.status}`,
      });
    }

    console.log('');
  }

  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');

  const passed = results.filter((r) => r.status === 'PASS').length;
  const failed = results.filter((r) => r.status === 'FAIL').length;
  const unexpected = results.filter((r) => r.status === 'UNEXPECTED').length;

  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${unexpected}`);
  console.log(
    `üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${results.length} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n`
  );

  if (failed > 0) {
    console.log('‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:');
    results
      .filter((r) => r.status === 'FAIL')
      .forEach((result) => {
        console.log(`   - ${result.name}: ${result.reason}`);
      });
    console.log('');
  }

  if (unexpected > 0) {
    console.log('‚ö†Ô∏è  –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    results
      .filter((r) => r.status === 'UNEXPECTED')
      .forEach((result) => {
        console.log(`   - ${result.name}: ${result.reason}`);
      });
    console.log('');
  }

  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  if (failed === 0) {
    console.log(
      '   –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
    );
    console.log(
      '   –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
    );
    console.log('   –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
  } else {
    console.log('   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏.');
    console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof window === 'undefined') {
  // Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  const fetch = require('node-fetch');
  testAdminEndpoints().catch(console.error);
} else {
  // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  testAdminEndpoints().catch(console.error);
}
