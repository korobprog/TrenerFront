// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤
require('dotenv').config({ path: '.env.development' });
require('dotenv').config({ path: '.env.production' });

const { PrismaClient } = require('@prisma/client');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π dotenv
 */
async function testEnvironmentAndAuth() {
  console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');

  const prisma = new PrismaClient();

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');

    const requiredEnvVars = [
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL',
      'DATABASE_URL',
      'NODE_ENV',
    ];

    const optionalEnvVars = [
      'GOOGLE_CLIENT_ID',
      'GOOGLE_CLIENT_SECRET',
      'GITHUB_CLIENT_ID',
      'GITHUB_CLIENT_SECRET',
    ];

    let missingRequired = [];
    let missingOptional = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    requiredEnvVars.forEach((varName) => {
      const value = process.env[varName];
      if (!value) {
        missingRequired.push(varName);
        console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
      } else {
        console.log(
          `‚úÖ ${varName}: ${varName === 'NEXTAUTH_SECRET' ? '[–°–ö–†–´–¢–û]' : value}`
        );
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    console.log('\nüîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:');
    optionalEnvVars.forEach((varName) => {
      const value = process.env[varName];
      if (!value) {
        missingOptional.push(varName);
        console.log(`‚ö†Ô∏è ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
      } else {
        console.log(
          `‚úÖ ${varName}: ${varName.includes('SECRET') ? '[–°–ö–†–´–¢–û]' : value}`
        );
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:');

    try {
      await prisma.$connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await prisma.user.count();
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
      const questionCount = await prisma.question.count();
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: ${questionCount}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
      const validQuestionCount = await prisma.question.count({
        where: {
          text: {
            not: null,
          },
          NOT: [{ text: '' }, { text: null }],
        },
      });
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${validQuestionCount}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      if (validQuestionCount > 0) {
        const sampleQuestions = await prisma.question.findMany({
          where: {
            text: {
              not: null,
            },
            NOT: [{ text: '' }, { text: null }],
          },
          take: 3,
          select: {
            id: true,
            text: true,
            topic: true,
            difficulty: true,
          },
        });

        console.log('\nüìù –ü–†–ò–ú–ï–†–´ –í–ê–õ–ò–î–ù–´–• –í–û–ü–†–û–°–û–í:');
        sampleQuestions.forEach((q, i) => {
          console.log(
            `  ${i + 1}. ID: ${q.id}, –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
          );
          console.log(`     –¢–µ–∫—Å—Ç: ${q.text?.substring(0, 80)}...`);
        });
      }
    } catch (dbError) {
      console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê');
      console.log('   –î–µ—Ç–∞–ª–∏:', dbError.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É NextAuth
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê NEXTAUTH –°–¢–†–£–ö–¢–£–†–´:');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NEXTAUTH_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É
      const secret = process.env.NEXTAUTH_SECRET;
      if (secret && secret.length >= 32) {
        console.log('‚úÖ NEXTAUTH_SECRET: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞');
      } else if (secret) {
        console.log(
          '‚ö†Ô∏è NEXTAUTH_SECRET: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)'
        );
      } else {
        console.log('‚ùå NEXTAUTH_SECRET: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º NEXTAUTH_URL
      const nextAuthUrl = process.env.NEXTAUTH_URL;
      if (nextAuthUrl) {
        try {
          new URL(nextAuthUrl);
          console.log('‚úÖ NEXTAUTH_URL: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
        } catch {
          console.log('‚ùå NEXTAUTH_URL: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
        }
      }
    } catch (authError) {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ NextAuth: –û–®–ò–ë–ö–ê');
      console.log('   –î–µ—Ç–∞–ª–∏:', authError.message);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('\nüîç –°–ò–ú–£–õ–Ø–¶–ò–Ø API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö:');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
      const flashcardQuestions = await prisma.question.findMany({
        where: {
          text: {
            not: null,
          },
          NOT: [{ text: '' }, { text: null }],
        },
        take: 5,
        select: {
          id: true,
          text: true,
          topic: true,
          difficulty: true,
        },
      });

      if (flashcardQuestions.length > 0) {
        console.log(
          `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${flashcardQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫`
        );
        console.log(
          '‚úÖ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        );
      } else {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫');
      }
    } catch (apiError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫:');
      console.log('   –î–µ—Ç–∞–ª–∏:', apiError.message);
    }

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');

    if (missingRequired.length > 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      missingRequired.forEach((varName) => {
        console.log(`   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    if (missingOptional.length > 0) {
      console.log('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      missingOptional.forEach((varName) => {
        console.log(`   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
      });
    }

    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú:');

    if (missingRequired.length === 0) {
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
      console.log(
        '‚úÖ –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É'
      );
      console.log('‚úÖ –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫');
    } else {
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã .env.development –∏ .env.production');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    }
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
    console.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testEnvironmentAndAuth().catch(console.error);
