const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç" –ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
 */
async function diagnoseFlashcardAnswerButton() {
  console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ö–ù–û–ü–ö–û–ô "–ó–ê–ì–†–£–ó–ò–¢–¨ –û–¢–í–ï–¢" ===');
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–ø—Ä–æ—Å—ã
    console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –í–û–ü–†–û–°–û–í');
    console.log('‚îÄ'.repeat(50));

    const totalQuestions = await prisma.question.count();
    console.log(`üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);

    const questionsWithText = await prisma.question.count({
      where: {
        AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
      },
    });
    console.log(`‚úÖ –í–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: ${questionsWithText}`);

    const questionsWithAnswers = await prisma.question.count({
      where: {
        AND: [{ answer: { not: null } }, { answer: { not: { equals: '' } } }],
      },
    });
    console.log(`üí¨ –í–æ–ø—Ä–æ—Å–æ–≤ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏: ${questionsWithAnswers}`);

    if (questionsWithText > 0) {
      const sampleQuestion = await prisma.question.findFirst({
        where: {
          AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
        },
        select: {
          id: true,
          text: true,
          answer: true,
          topic: true,
          difficulty: true,
        },
      });

      console.log(`üîç –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
      console.log(`   ID: ${sampleQuestion.id}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${sampleQuestion.text.substring(0, 100)}...`);
      console.log(`   –ï—Å—Ç—å –æ—Ç–≤–µ—Ç: ${!!sampleQuestion.answer}`);
      console.log(`   –¢–µ–º–∞: ${sampleQuestion.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${sampleQuestion.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    }
    console.log('');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter API
    console.log('üîß 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö OPENROUTER API');
    console.log('‚îÄ'.repeat(50));

    const globalSettings = await prisma.interviewAssistantSettings.findFirst({
      where: {
        isActive: true,
        apiType: 'openrouter',
      },
    });

    if (globalSettings) {
      console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –Ω–∞–π–¥–µ–Ω—ã:');
      console.log(`   API Type: ${globalSettings.apiType}`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã: ${globalSettings.isActive}`);
      console.log(`   –ï—Å—Ç—å API –∫–ª—é—á: ${!!globalSettings.openRouterApiKey}`);
      console.log(
        `   –ú–æ–¥–µ–ª—å: ${globalSettings.openRouterModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
      );
      console.log(
        `   Base URL: ${globalSettings.openRouterBaseUrl || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
      );
      console.log(
        `   –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: ${
          globalSettings.openRouterMaxTokens || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        }`
      );
      console.log(
        `   –ú–∞–∫—Å. –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: ${
          globalSettings.maxQuestionsPerDay || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        }`
      );
    } else {
      console.log(
        '‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –ù–ï –ù–ê–ô–î–ï–ù–´ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã'
      );
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã!');
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
    console.log('üë§ 3. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ù–ê–°–¢–†–û–ï–ö API');
    console.log('‚îÄ'.repeat(50));

    const userApiSettings = await prisma.userApiSettings.findMany({
      where: {
        useCustomApi: true,
        apiType: 'openrouter',
      },
      take: 5,
    });

    console.log(
      `üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenRouter: ${userApiSettings.length}`
    );

    if (userApiSettings.length > 0) {
      userApiSettings.forEach((setting, index) => {
        console.log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${setting.userId}:`);
        console.log(`      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π API: ${setting.useCustomApi}`);
        console.log(`      –ï—Å—Ç—å API –∫–ª—é—á: ${!!setting.openRouterApiKey}`);
        console.log(`      –ú–æ–¥–µ–ª—å: ${setting.openRouterModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      });
    } else {
      console.log(
        '‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      );
    }
    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    console.log('üìà 4. –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø API –ó–ê –°–ï–ì–û–î–ù–Ø');
    console.log('‚îÄ'.repeat(50));

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);

    const todayUsage = await prisma.interviewAssistantUsage.findMany({
      where: {
        date: {
          gte: today,
          lt: tomorrow,
        },
      },
      orderBy: {
        questionsCount: 'desc',
      },
      take: 5,
    });

    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayUsage.length}`);

    if (todayUsage.length > 0) {
      console.log('üîù –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
      todayUsage.forEach((usage, index) => {
        console.log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${usage.userId}:`);
        console.log(`      –í–æ–ø—Ä–æ—Å–æ–≤: ${usage.questionsCount}`);
        console.log(`      –¢–æ–∫–µ–Ω–æ–≤: ${usage.tokensUsed}`);
        console.log(`      –°—Ç–æ–∏–º–æ—Å—Ç—å: $${usage.apiCost}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ');
    }
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤
    console.log('üíæ 5. –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê –û–¢–í–ï–¢–û–í');
    console.log('‚îÄ'.repeat(50));

    const totalCacheEntries = await prisma.interviewAssistantCache.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: ${totalCacheEntries}`);

    const validCacheEntries = await prisma.interviewAssistantCache.count({
      where: {
        expiresAt: {
          gt: new Date(),
        },
      },
    });
    console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: ${validCacheEntries}`);

    const expiredCacheEntries = totalCacheEntries - validCacheEntries;
    console.log(`‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: ${expiredCacheEntries}`);

    if (validCacheEntries > 0) {
      const recentCache = await prisma.interviewAssistantCache.findMany({
        where: {
          expiresAt: {
            gt: new Date(),
          },
        },
        orderBy: {
          createdAt: 'desc',
        },
        take: 3,
      });

      console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ:');
      recentCache.forEach((cache, index) => {
        console.log(
          `   ${index + 1}. –°–æ–∑–¥–∞–Ω: ${cache.createdAt.toLocaleString()}`
        );
        console.log(`      –ò—Å—Ç–µ–∫–∞–µ—Ç: ${cache.expiresAt.toLocaleString()}`);
        console.log(
          `      –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${cache.answer?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`
        );
      });
    }
    console.log('');

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üåç 6. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø');
    console.log('‚îÄ'.repeat(50));

    const envVars = {
      API_KEY_SECRET: !!process.env.API_KEY_SECRET,
      DATABASE_URL: !!process.env.DATABASE_URL,
      NEXTAUTH_SECRET: !!process.env.NEXTAUTH_SECRET,
      NEXTAUTH_URL: !!process.env.NEXTAUTH_URL,
      NODE_ENV: process.env.NODE_ENV,
    };

    Object.entries(envVars).forEach(([key, value]) => {
      const status = typeof value === 'boolean' ? (value ? '‚úÖ' : '‚ùå') : '‚úÖ';
      const displayValue =
        typeof value === 'boolean'
          ? value
            ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'
          : value;
      console.log(`   ${status} ${key}: ${displayValue}`);
    });
    console.log('');

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
    console.log('üìö 7. –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –í–û–ü–†–û–°–û–í-–û–¢–í–ï–¢–û–í');
    console.log('‚îÄ'.repeat(50));

    const totalQA = await prisma.interviewAssistantQA.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π Q&A: ${totalQA}`);

    const flashcardQA = await prisma.interviewAssistantQA.count({
      where: {
        category: 'flashcard',
      },
    });
    console.log(`üéØ –ó–∞–ø–∏—Å–µ–π Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç: ${flashcardQA}`);

    if (flashcardQA > 0) {
      const recentFlashcardQA = await prisma.interviewAssistantQA.findMany({
        where: {
          category: 'flashcard',
        },
        orderBy: {
          createdAt: 'desc',
        },
        take: 3,
        select: {
          userId: true,
          question: true,
          answer: true,
          createdAt: true,
        },
      });

      console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç:');
      recentFlashcardQA.forEach((qa, index) => {
        console.log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${qa.userId}`);
        console.log(`      –°–æ–∑–¥–∞–Ω: ${qa.createdAt.toLocaleString()}`);
        console.log(`      –í–æ–ø—Ä–æ—Å: ${qa.question.substring(0, 50)}...`);
        console.log(`      –ï—Å—Ç—å –æ—Ç–≤–µ—Ç: ${!!qa.answer}`);
        console.log(`      –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${qa.answer?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
      });
    }
    console.log('');

    // 8. –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('üéØ 8. –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('‚îÄ'.repeat(50));

    const issues = [];
    const recommendations = [];

    if (totalQuestions === 0) {
      issues.push('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤');
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    }

    if (questionsWithText === 0) {
      issues.push('‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ questions');
    }

    if (!globalSettings) {
      issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter API');
      recommendations.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å OpenRouter API –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }

    if (globalSettings && !globalSettings.openRouterApiKey) {
      issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenRouter');
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á OpenRouter');
    }

    if (!process.env.API_KEY_SECRET) {
      issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è API_KEY_SECRET');
      recommendations.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è API_KEY_SECRET');
    }

    if (flashcardQA === 0 && totalQA > 0) {
      issues.push(
        '‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç, –Ω–æ –µ—Å—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
      );
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    }

    if (issues.length === 0) {
      console.log('‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û');
      console.log('');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      console.log('   1. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenRouter API');
      console.log('   2. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ API');
      console.log('   3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–ª–æ–≥–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤');
      console.log('   4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('');
      console.log('üõ†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ JavaScript');
      console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Network tab –≤ DevTools –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏');
      console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ API endpoints');
      console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ curl –∏–ª–∏ Postman');
    } else {
      console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      issues.forEach((issue) => console.log(`   ${issue}`));
      console.log('');
      console.log('üõ†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
      recommendations.forEach((rec) => console.log(`   ‚úÖ ${rec}`));
    }

    console.log('');
    console.log('üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseFlashcardAnswerButton();
