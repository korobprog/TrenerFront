const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function updateUserRole() {
  const targetUserId = 'cmbbcczhj000emkxw3fub8ld3';
  const targetEmail = 'makstreid@yandex.ru';
  const newRole = 'superadmin';

  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  console.log(`üìß Email: ${targetEmail}`);
  console.log(`üÜî ID: ${targetUserId}`);
  console.log(`üéØ –ù–æ–≤–∞—è —Ä–æ–ª—å: ${newRole}`);
  console.log('‚îÄ'.repeat(50));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');

    const currentUser = await prisma.user.findUnique({
      where: {
        id: targetUserId,
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
      },
    });

    if (!currentUser) {
      throw new Error(
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`
      );
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   üìß Email: ${currentUser.email}`);
    console.log(`   üë§ –ò–º—è: ${currentUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   üîë –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${currentUser.role}`);
    console.log(
      `   üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${currentUser.createdAt.toISOString()}`
    );
    console.log(
      `   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${
        currentUser.lastLoginAt
          ? currentUser.lastLoginAt.toISOString()
          : '–ù–∏–∫–æ–≥–¥–∞'
      }`
    );

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ email
    if (currentUser.email !== targetEmail) {
      throw new Error(
        `‚ùå Email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª—Å—è: ${targetEmail}, –Ω–∞–π–¥–µ–Ω: ${currentUser.email}`
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ superadmin
    if (currentUser.role === newRole) {
      console.log(
        `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å "${newRole}". –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`
      );
      return;
    }

    console.log('‚îÄ'.repeat(50));

    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    console.log('2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    const updatedUser = await prisma.user.update({
      where: {
        id: targetUserId,
      },
      data: {
        role: newRole,
        updatedAt: new Date(),
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });

    console.log('‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log(`   üÜî ID: ${updatedUser.id}`);
    console.log(`   üìß Email: ${updatedUser.email}`);
    console.log(`   üîë –ù–æ–≤–∞—è —Ä–æ–ª—å: ${updatedUser.role}`);
    console.log(
      `   üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updatedUser.updatedAt.toISOString()}`
    );

    console.log('‚îÄ'.repeat(50));

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏...');

    const verificationUser = await prisma.user.findUnique({
      where: {
        id: targetUserId,
      },
      select: {
        id: true,
        email: true,
        role: true,
        updatedAt: true,
      },
    });

    if (verificationUser && verificationUser.role === newRole) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   üéØ –†–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${verificationUser.role}`);
      console.log(
        `   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${verificationUser.updatedAt.toISOString()}`
      );
    } else {
      throw new Error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: —Ä–æ–ª—å –Ω–µ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }

    console.log('‚îÄ'.repeat(50));

    // 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö superadmin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    console.log('4Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö superadmin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:');

    const allSuperAdmins = await prisma.user.findMany({
      where: {
        role: 'superadmin',
      },
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true,
        lastLoginAt: true,
      },
      orderBy: {
        createdAt: 'asc',
      },
    });

    console.log(`üìä –í—Å–µ–≥–æ superadmin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allSuperAdmins.length}`);
    allSuperAdmins.forEach((admin, index) => {
      console.log(
        `   ${index + 1}. ${admin.email} (${admin.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'})`
      );
      console.log(`      üÜî ID: ${admin.id}`);
      console.log(`      üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${admin.createdAt.toISOString()}`);
      console.log(
        `      üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${
          admin.lastLoginAt ? admin.lastLoginAt.toISOString() : '–ù–∏–∫–æ–≥–¥–∞'
        }`
      );
    });

    console.log('‚îÄ'.repeat(50));
    console.log('üéâ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetEmail} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å ${newRole}`);
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –û–ü–ï–†–ê–¶–ò–ò:');
    console.error(`   üí• –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    console.error(`   üìç –°—Ç–µ–∫: ${error.stack}`);

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const currentState = await prisma.user.findUnique({
        where: { id: targetUserId },
        select: { email: true, role: true },
      });

      if (currentState) {
        console.log(
          `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState.email} - —Ä–æ–ª—å: ${currentState.role}`
        );
      }
    } catch (rollbackError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:',
        rollbackError.message
      );
    }

    throw error;
  } finally {
    // 7. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$disconnect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateUserRole()
  .then(() => {
    console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  });
