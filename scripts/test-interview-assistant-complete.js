/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

const https = require('https');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  baseUrl: 'http://localhost:3000',
  adminPageUrl: '/admin/interview-assistant-settings',
  apiEndpoint: '/api/admin/interview-assistant-settings',
  timeout: 15000,
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 */
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(CONFIG.baseUrl + path);
    const options = {
      hostname: url.hostname,
      port: url.port || (url.protocol === 'https:' ? 443 : 80),
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Complete-Test/1.0',
        Accept:
          'text/html,application/xhtml+xml,application/xml;q=0.9,application/json,*/*;q=0.8',
        ...headers,
      },
      timeout: CONFIG.timeout,
    };

    if (data) {
      const jsonData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(jsonData);
    }

    const client = url.protocol === 'https:' ? https : http;
    const req = client.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          let parsedData;
          if (res.headers['content-type']?.includes('application/json')) {
            parsedData = JSON.parse(responseData);
          } else {
            parsedData = responseData;
          }

          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData,
            rawData: responseData,
            contentType: res.headers['content-type'] || '',
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: null,
            rawData: responseData,
            contentType: res.headers['content-type'] || '',
            parseError: error.message,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã (404)
 */
async function testMainProblemFixed() {
  console.log('\nüéØ –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–°–ù–û–í–ù–û–ô –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(60));

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç...');
    const apiResponse = await makeRequest('GET', CONFIG.apiEndpoint);

    console.log(`üì° –°—Ç–∞—Ç—É—Å API: ${apiResponse.statusCode}`);

    if (apiResponse.statusCode === 404) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404!');
      console.log('üö® –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
      return false;
    } else {
      console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');

      if (apiResponse.statusCode === 401) {
        console.log('üîê –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)');
      } else if (apiResponse.statusCode === 200) {
        console.log('üéâ API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω');
      }

      console.log('üéâ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê 404 –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏
 */
async function testAdminPage() {
  console.log('\nüìÑ –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ê–î–ú–ò–ù–ö–ò');
  console.log('='.repeat(60));

  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏...');
    const pageResponse = await makeRequest('GET', CONFIG.adminPageUrl);

    console.log(`üì° –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageResponse.statusCode}`);

    if (pageResponse.statusCode === 404) {
      console.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    } else if (pageResponse.statusCode === 200) {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageContent = pageResponse.rawData;
      const hasApiCall = pageContent.includes(
        '/api/admin/interview-assistant-settings'
      );
      const hasTitle = pageContent.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
      const hasForm =
        pageContent.includes('<form') || pageContent.includes('form');
      const hasOpenRouter = pageContent.includes('OpenRouter');

      console.log(`üìã –°–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–∑–æ–≤ API: ${hasApiCall ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìã –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${hasTitle ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìã –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É: ${hasForm ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenRouter: ${hasOpenRouter ? '‚úÖ' : '‚ùå'}`);

      return hasApiCall && hasForm;
    } else if (
      pageResponse.statusCode === 302 ||
      pageResponse.statusCode === 301
    ) {
      console.log('üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return true;
    }

    return false;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API
 */
async function testApiFunctionality() {
  console.log('\n‚öôÔ∏è  –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò API');
  console.log('='.repeat(60));

  const results = {
    get: false,
    put: false,
    unsupportedMethods: false,
  };

  try {
    // –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å...');
    const getResponse = await makeRequest('GET', CONFIG.apiEndpoint);
    console.log(`üì° GET —Å—Ç–∞—Ç—É—Å: ${getResponse.statusCode}`);

    if (getResponse.statusCode === 401) {
      console.log('‚úÖ GET: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      results.get = true;
    } else if (getResponse.statusCode === 200) {
      console.log('‚úÖ GET: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
      console.log('üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', typeof getResponse.data);
      results.get = true;
    }

    // –¢–µ—Å—Ç PUT –∑–∞–ø—Ä–æ—Å–∞
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT –∑–∞–ø—Ä–æ—Å...');
    const testData = {
      maxQuestionsPerDay: 10,
      maxTokensPerQuestion: 4000,
      isActive: true,
      openRouterApiKey: 'test-key',
      openRouterBaseUrl: 'https://openrouter.ai/api/v1',
      openRouterModel: 'google/gemma-3-12b-it:free',
      openRouterTemperature: 0.7,
      openRouterMaxTokens: 4000,
    };

    const putResponse = await makeRequest('PUT', CONFIG.apiEndpoint, testData);
    console.log(`üì° PUT —Å—Ç–∞—Ç—É—Å: ${putResponse.statusCode}`);

    if (putResponse.statusCode === 401) {
      console.log('‚úÖ PUT: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      results.put = true;
    } else if (putResponse.statusCode === 200) {
      console.log('‚úÖ PUT: –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      results.put = true;
    } else if (putResponse.statusCode === 400) {
      console.log('‚úÖ PUT: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö');
      results.put = true;
    }

    // –¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã...');
    const deleteResponse = await makeRequest('DELETE', CONFIG.apiEndpoint);
    console.log(`üì° DELETE —Å—Ç–∞—Ç—É—Å: ${deleteResponse.statusCode}`);

    if (deleteResponse.statusCode === 405) {
      console.log('‚úÖ DELETE: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      results.unsupportedMethods = true;
    } else if (deleteResponse.statusCode === 401) {
      console.log('‚úÖ DELETE: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π');
      results.unsupportedMethods = true;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
  }

  return results;
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter
 */
async function testOpenRouterIntegration() {
  console.log('\nüîó –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° OPENROUTER');
  console.log('='.repeat(60));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenRouter –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const pageResponse = await makeRequest('GET', CONFIG.adminPageUrl);

    if (pageResponse.statusCode === 200) {
      const pageContent = pageResponse.rawData;

      const checks = [
        {
          name: 'OpenRouter API —Ç–∏–ø',
          test: pageContent.includes('openrouter'),
        },
        {
          name: 'OpenRouter API –∫–ª—é—á',
          test: pageContent.includes('openRouterApiKey'),
        },
        {
          name: 'OpenRouter –º–æ–¥–µ–ª—å',
          test: pageContent.includes('openRouterModel'),
        },
        {
          name: 'OpenRouter —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
          test: pageContent.includes('openRouterTemperature'),
        },
        {
          name: 'OpenRouter —Ç–æ–∫–µ–Ω—ã',
          test: pageContent.includes('openRouterMaxTokens'),
        },
        {
          name: 'Gemma –º–æ–¥–µ–ª—å',
          test: pageContent.includes('gemma-3-12b-it:free'),
        },
      ];

      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenRouter:');
      let allSupported = true;

      checks.forEach((check) => {
        const status = check.test ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${check.name}`);
        if (!check.test) allSupported = false;
      });

      return allSupported;
    } else {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
 */
async function testNoConsoleErrors() {
  console.log('\nüñ•Ô∏è  –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –ö–û–ù–°–û–õ–¨–ù–´–• –û–®–ò–ë–û–ö');
  console.log('='.repeat(60));

  try {
    console.log('üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const pageResponse = await makeRequest('GET', CONFIG.adminPageUrl);
    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageResponse.statusCode}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API (—ç—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const apiResponse = await makeRequest('GET', CONFIG.apiEndpoint);
    console.log(`üì° API: ${apiResponse.statusCode}`);

    if (apiResponse.statusCode === 404) {
      console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 - –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
      return false;
    } else {
      console.log('‚úÖ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 - –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–º—É–ª–∏—Ä—É–µ–º AJAX –∑–∞–ø—Ä–æ—Å
      const ajaxResponse = await makeRequest('GET', CONFIG.apiEndpoint, null, {
        'X-Requested-With': 'XMLHttpRequest',
      });
      console.log(`üì° AJAX –∑–∞–ø—Ä–æ—Å: ${ajaxResponse.statusCode}`);

      if (ajaxResponse.statusCode !== 404) {
        console.log('‚úÖ AJAX –∑–∞–ø—Ä–æ—Å—ã —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return true;
      }
    }

    return false;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runCompleteTest() {
  console.log('üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(70));
  console.log(
    'üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 404 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞'
  );
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${CONFIG.baseUrl}`);
  console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${CONFIG.adminPageUrl}`);
  console.log(`üîó API: ${CONFIG.apiEndpoint}`);
  console.log(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${CONFIG.timeout}ms`);

  const results = {
    mainProblemFixed: false,
    adminPageWorks: false,
    apiFunctionality: { get: false, put: false, unsupportedMethods: false },
    openRouterIntegration: false,
    noConsoleErrors: false,
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  results.mainProblemFixed = await testMainProblemFixed();
  results.adminPageWorks = await testAdminPage();
  results.apiFunctionality = await testApiFunctionality();
  results.openRouterIntegration = await testOpenRouterIntegration();
  results.noConsoleErrors = await testNoConsoleErrors();

  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
  console.log('='.repeat(70));

  const tests = [
    {
      name: 'üéØ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 404',
      result: results.mainProblemFixed,
      critical: true,
    },
    {
      name: 'üìÑ –†–∞–±–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏',
      result: results.adminPageWorks,
      critical: false,
    },
    {
      name: '‚öôÔ∏è  GET –∑–∞–ø—Ä–æ—Å—ã API',
      result: results.apiFunctionality.get,
      critical: false,
    },
    {
      name: '‚öôÔ∏è  PUT –∑–∞–ø—Ä–æ—Å—ã API',
      result: results.apiFunctionality.put,
      critical: false,
    },
    {
      name: '‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤',
      result: results.apiFunctionality.unsupportedMethods,
      critical: false,
    },
    {
      name: 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter',
      result: results.openRouterIntegration,
      critical: false,
    },
    {
      name: 'üñ•Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ 404',
      result: results.noConsoleErrors,
      critical: true,
    },
  ];

  let criticalPassed = 0;
  let criticalTotal = 0;
  let totalPassed = 0;

  tests.forEach((test) => {
    const status = test.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    const priority = test.critical ? 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' : 'üü° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô';
    console.log(`${status} - ${priority} - ${test.name}`);

    if (test.critical) {
      criticalTotal++;
      if (test.result) criticalPassed++;
    }

    if (test.result) totalPassed++;
  });

  console.log(
    `\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`
  );
  console.log(
    `üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã: ${criticalPassed}/${criticalTotal} –ø—Ä–æ–π–¥–µ–Ω–æ`
  );

  // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
  console.log('\nüèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï');
  console.log('='.repeat(70));

  if (results.mainProblemFixed) {
    console.log('üéâ –£–°–ü–ï–•: –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—à–∏–±–∫–æ–π 404 –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log(
      '‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/admin/interview-assistant-settings —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç'
    );
  } else {
    console.log('üö® –ü–†–û–í–ê–õ: –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    console.log('‚ùå API —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404');
  }

  if (results.noConsoleErrors) {
    console.log('‚úÖ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ 404 —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
  }

  if (results.openRouterIntegration) {
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  if (criticalPassed === criticalTotal) {
    console.log('\nüèÜ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!');
    console.log('üéØ –ó–∞–¥–∞—á–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
  }

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runCompleteTest().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = { runCompleteTest, makeRequest, CONFIG };
