const fetch = require('node-fetch');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function runFinalIntegrationTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('üåê –ë–∞–∑–æ–≤—ã–π URL: http://localhost:3000');
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('============================================================');

  let testUserId = null;
  let testInterviewId = null;
  let testVideoRoomId = null;
  let testSessionToken = null;

  const testResults = {
    authenticationTest: false,
    interviewCreationTest: false,
    videoRoomCreationTest: false,
    interviewDetailsTest: false,
    databaseConsistencyTest: false,
  };

  try {
    // ========== –¢–ï–°–¢ 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ==========
    console.log('\nüîê –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å database —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        name: 'Final Integration Test User',
        email: 'final-test@example.com',
        role: 'user',
      },
    });
    testUserId = testUser.id;
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUserId}`);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const sessionToken = require('crypto').randomBytes(32).toString('hex');
    testSessionToken = sessionToken;
    const sessionExpires = new Date();
    sessionExpires.setDate(sessionExpires.getDate() + 1);

    await prisma.session.create({
      data: {
        sessionToken: sessionToken,
        userId: testUserId,
        expires: sessionExpires,
      },
    });
    console.log('‚úÖ Database —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    testResults.authenticationTest = true;

    // ========== –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–í–¨–Æ ==========
    console.log('\nüé• –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ API');

    const scheduledTime = new Date();
    scheduledTime.setHours(scheduledTime.getHours() + 2);

    const interviewResponse = await fetch(
      'http://localhost:3000/api/mock-interviews',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Cookie: `next-auth.session-token=${sessionToken}`,
        },
        body: JSON.stringify({
          scheduledTime: scheduledTime.toISOString(),
          videoType: 'built_in',
        }),
      }
    );

    if (interviewResponse.ok) {
      const interviewData = await interviewResponse.json();
      testInterviewId = interviewData.id;
      testVideoRoomId = interviewData.videoRoomId;
      console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: ${testInterviewId}`);
      console.log(`‚úÖ –í–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${testVideoRoomId}`);
      console.log(`‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: ${interviewData.meetingLink}`);
      testResults.interviewCreationTest = true;
      testResults.videoRoomCreationTest = true;
    } else {
      const errorText = await interviewResponse.text();
      console.log(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: ${interviewResponse.status} - ${errorText}`
      );
    }

    // ========== –¢–ï–°–¢ 3: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –ò–ù–¢–ï–†–í–¨–Æ ==========
    console.log(
      '\nüîç –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API endpoint'
    );

    if (testInterviewId) {
      const detailsResponse = await fetch(
        `http://localhost:3000/api/mock-interviews/${testInterviewId}`,
        {
          method: 'GET',
          headers: {
            Cookie: `next-auth.session-token=${sessionToken}`,
          },
        }
      );

      if (detailsResponse.ok) {
        const detailsData = await detailsResponse.json();
        console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        console.log(`   üìù ID: ${detailsData.id}`);
        console.log(`   üë§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${detailsData.interviewer?.email}`);
        console.log(`   üé• –¢–∏–ø –≤–∏–¥–µ–æ: ${detailsData.videoType}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${detailsData.status}`);
        console.log(`   üîë –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${detailsData.currentUserRole}`);
        console.log(`   üè† –í–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞: ${detailsData.videoRoom?.code}`);
        testResults.interviewDetailsTest = true;
      } else {
        const errorText = await detailsResponse.text();
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: ${detailsResponse.status} - ${errorText}`
        );
      }
    }

    // ========== –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
    console.log('\nüóÑÔ∏è –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ');

    if (testInterviewId && testVideoRoomId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –±–∞–∑–µ
      const dbInterview = await prisma.mockInterview.findUnique({
        where: { id: testInterviewId },
        include: {
          interviewer: true,
          videoRoom: true,
        },
      });

      if (dbInterview) {
        console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log(`   üÜî ID: ${dbInterview.id}`);
        console.log(`   üë§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${dbInterview.interviewer.email}`);
        console.log(`   üé• –¢–∏–ø –≤–∏–¥–µ–æ: ${dbInterview.videoType}`);
        console.log(`   üîó –°–≤—è–∑—å —Å –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–æ–π: ${dbInterview.videoRoomId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—É
        if (dbInterview.videoRoom) {
          console.log('‚úÖ –í–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω–∞');
          console.log(`   üè† –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${dbInterview.videoRoom.code}`);
          console.log(`   üë§ –•–æ—Å—Ç: ${dbInterview.videoRoom.hostId}`);
          console.log(
            `   ‚úÖ hostId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–º: ${
              dbInterview.videoRoom.hostId === testUserId
            }`
          );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        const dbSession = await prisma.session.findUnique({
          where: { sessionToken: sessionToken },
          include: { user: true },
        });

        if (dbSession) {
          console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbSession.user.email}`);
          console.log(
            `   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${dbSession.expires.toLocaleString('ru-RU')}`
          );
          console.log(
            `   ‚úÖ –°–µ—Å—Å–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${
              dbSession.userId === testUserId
            }`
          );
        }

        testResults.databaseConsistencyTest = true;
      } else {
        console.log('‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    }

    // ========== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ==========
    console.log(
      '\n============================================================'
    );
    console.log('üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('============================================================');

    const allTestsPassed = Object.values(testResults).every(
      (result) => result === true
    );

    console.log(
      `üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (Database —Å—Ç—Ä–∞—Ç–µ–≥–∏—è): ${
        testResults.authenticationTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'
      }`
    );
    console.log(
      `üé• –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é: ${
        testResults.interviewCreationTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'
      }`
    );
    console.log(
      `üè† –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã: ${
        testResults.videoRoomCreationTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'
      }`
    );
    console.log(
      `üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä–≤—å—é: ${
        testResults.interviewDetailsTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'
      }`
    );
    console.log(
      `üóÑÔ∏è –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${
        testResults.databaseConsistencyTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'
      }`
    );

    console.log(
      '\n============================================================'
    );
    if (allTestsPassed) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã');
      console.log(
        '‚úÖ Database —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
      );
      console.log('‚úÖ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
      console.log('‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∞');
    } else {
      console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•');
      console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    }

    return {
      success: allTestsPassed,
      results: testResults,
      testData: {
        userId: testUserId,
        interviewId: testInterviewId,
        videoRoomId: testVideoRoomId,
      },
    };
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –§–ò–ù–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ï:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    return {
      success: false,
      error: error.message,
      results: testResults,
    };
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
      if (testInterviewId) {
        await prisma.mockInterview.delete({
          where: { id: testInterviewId },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —É–¥–∞–ª–µ–Ω–æ');
      }

      if (testVideoRoomId) {
        await prisma.videoRoom.delete({
          where: { id: testVideoRoomId },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
      }

      if (testSessionToken) {
        await prisma.session.deleteMany({
          where: { sessionToken: testSessionToken },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
      }

      if (testUserId) {
        await prisma.user.delete({
          where: { id: testUserId },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }

      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (cleanupError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', cleanupError);
    }

    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
runFinalIntegrationTest()
  .then((result) => {
    console.log(
      '\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:',
      result.success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'
    );
    process.exit(result.success ? 0 : 1);
  })
  .catch((error) => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
