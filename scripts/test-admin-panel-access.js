const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAdminPanelAccess() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async function isAdmin(userId) {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { role: true },
      });
      return user?.role === 'admin' || user?.role === 'superadmin';
    }

    async function isSuperAdmin(userId) {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { role: true },
      });
      return user?.role === 'superadmin';
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è korobprog@gmail.com
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è korobprog@gmail.com:');
    const korobprogId = 'cmb9k4mtb0000mkc4b5uwfgtz';

    const korobprogIsAdmin = await isAdmin(korobprogId);
    const korobprogIsSuperAdmin = await isSuperAdmin(korobprogId);

    console.log(
      `   –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ${
        korobprogIsAdmin ? '‚úÖ –†–ê–ó–†–ï–®–ï–ù' : '‚ùå –ó–ê–ü–†–ï–©–ï–ù'
      }`
    );
    console.log(
      `   –ü—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${
        korobprogIsSuperAdmin ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'
      }`
    );

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è makstreid@yandex.ru
    console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è makstreid@yandex.ru:');
    const makstreidId = 'cmbbcczhj000emkxw3fub8ld3';

    const makstreidIsAdmin = await isAdmin(makstreidId);
    const makstreidIsSuperAdmin = await isSuperAdmin(makstreidId);

    console.log(
      `   –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ${
        makstreidIsAdmin ? '‚úÖ –†–ê–ó–†–ï–®–ï–ù' : '‚ùå –ó–ê–ü–†–ï–©–ï–ù'
      }`
    );
    console.log(
      `   –ü—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${
        makstreidIsSuperAdmin ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'
      }`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–¥–º–∏–Ω API
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–π:');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    const totalUsers = await prisma.user.count();
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalUsers}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    const totalInterviews = await prisma.interview.count();
    console.log(`   –í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalInterviews}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    const recentLogs = await prisma.log.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        action: true,
        createdAt: true,
        userId: true,
      },
    });
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (${recentLogs.length} –∑–∞–ø–∏—Å–µ–π):`);
    recentLogs.forEach((log, index) => {
      console.log(
        `     ${index + 1}. ${log.action} (${log.createdAt.toISOString()})`
      );
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–∏—Å—Ç–µ–º—ã
    console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try {
      const settings =
        await prisma.$queryRaw`SELECT name FROM sqlite_master WHERE type='table' AND name='Setting'`;
      if (settings.length > 0) {
        const systemSettings = await prisma.setting.findMany({
          select: {
            key: true,
            value: true,
            updatedAt: true,
          },
        });
        console.log(`   –°–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${systemSettings.length}`);
        systemSettings.forEach((setting) => {
          console.log(`     ${setting.key}: ${setting.value}`);
        });
      } else {
        console.log('   –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.log('   –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–û–°–¢–£–ü–ê:');
    console.log('='.repeat(40));
    console.log(`korobprog@gmail.com:`);
    console.log(`  - –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø: ${korobprogIsAdmin ? '‚úÖ' : '‚ùå'}`);
    console.log(
      `  - –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞: ${korobprogIsSuperAdmin ? '‚úÖ' : '‚ùå'}`
    );
    console.log(`makstreid@yandex.ru:`);
    console.log(`  - –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø: ${makstreidIsAdmin ? '‚úÖ' : '‚ùå'}`);
    console.log(
      `  - –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞: ${makstreidIsSuperAdmin ? '‚úÖ' : '‚ùå'}`
    );

    if (
      korobprogIsAdmin &&
      korobprogIsSuperAdmin &&
      makstreidIsAdmin &&
      makstreidIsSuperAdmin
    ) {
      console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('–û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
    } else {
      console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –î–û–°–¢–£–ü–û–ú!');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testAdminPanelAccess();
