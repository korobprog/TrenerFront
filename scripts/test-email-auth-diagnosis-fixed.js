const { PrismaClient } = require('@prisma/client');
const nodemailer = require('nodemailer');

const prisma = new PrismaClient();

async function testRealEmailAuth() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏...\n');

  try {
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞:');
    const transporter = nodemailer.createTransport({
      host: process.env.YANDEX_SMTP_HOST,
      port: parseInt(process.env.YANDEX_SMTP_PORT),
      secure: process.env.YANDEX_SMTP_SECURE === 'true',
      auth: {
        user: process.env.YANDEX_SMTP_USER,
        pass: process.env.YANDEX_SMTP_PASSWORD,
      },
      debug: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
      logger: true, // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    });

    console.log('   ‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω');

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP:');
    await transporter.verify();
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ');

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:');
    const testEmail = 'korobprog@gmail.com'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∞
    const testToken =
      'test-token-' +
      Date.now() +
      '-' +
      Math.random().toString(36).substring(7);
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ email
    await prisma.verificationToken.deleteMany({
      where: { identifier: testEmail },
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    await prisma.verificationToken.create({
      data: {
        identifier: testEmail,
        token: testToken,
        expires: expiresAt,
      },
    });

    console.log(`   ‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: ${testToken.substring(0, 20)}...`);
    console.log(`   üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiresAt.toLocaleString()}`);

    // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
    console.log('\n4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:');
    const callbackUrl = encodeURIComponent(process.env.NEXTAUTH_URL);
    const magicLink = `${
      process.env.NEXTAUTH_URL
    }/api/auth/callback/email?callbackUrl=${callbackUrl}&token=${testToken}&email=${encodeURIComponent(
      testEmail
    )}`;

    console.log(`   üîó –°—Å—ã–ª–∫–∞: ${magicLink.substring(0, 80)}...`);

    // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ email
    console.log('\n5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email:');
    const mailOptions = {
      from: process.env.YANDEX_EMAIL_FROM,
      to: testEmail,
      subject: '–¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ - –°–µ—Ä–≤–∏—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π',
      text: `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –º–∞–≥–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞:
${magicLink}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –≤—Ö–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
      `,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2 style="color: #333; text-align: center;">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –º–∞–≥–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É.</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${magicLink}" 
               style="background-color: #0070f3; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;">
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </div>
          <p style="color: #666; font-size: 14px;">
            –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
          </p>
          <p style="color: #666; font-size: 14px;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –≤—Ö–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
          <p style="color: #999; font-size: 12px; text-align: center;">
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
            –ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
          </p>
        </div>
      `,
    };

    try {
      const info = await transporter.sendMail(mailOptions);
      console.log('   ‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   üìß Message ID: ${info.messageId}`);
      console.log(`   üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${testEmail}`);

      if (info.response) {
        console.log(`   üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${info.response}`);
      }

      // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
      const savedToken = await prisma.verificationToken.findUnique({
        where: {
          token: testToken,
        },
      });

      if (savedToken) {
        console.log('   ‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log(`   üìß Email: ${savedToken.identifier}`);
        console.log(`   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${savedToken.expires.toLocaleString()}`);
      } else {
        console.log('   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      // 7. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('\n7Ô∏è‚É£ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:', testEmail);
      console.log('   2. –ù–∞–π–¥–∏—Ç–µ –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "–¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"');
      console.log('   3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
      console.log('   4. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      console.log('   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    } catch (emailError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError.message);
      console.log('   üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', emailError);
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NextAuth API
async function testNextAuthAPI() {
  console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NextAuth API...\n');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ NextAuth API
    const testEmail = 'korobprog@gmail.com';

    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ NextAuth API:');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ NextAuth signin
    const response = await fetch(
      `${process.env.NEXTAUTH_URL}/api/auth/signin/email`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          email: testEmail,
          callbackUrl: process.env.NEXTAUTH_URL,
          csrfToken: 'test-csrf-token', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω
        }),
      }
    );

    console.log(`   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`   üìù –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç: ${response.statusText}`);

    if (response.ok) {
      console.log('   ‚úÖ NextAuth API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('   ‚ùå NextAuth API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      const errorText = await response.text();
      console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${errorText.substring(0, 200)}...`);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ NextAuth API:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runAllTests() {
  await testRealEmailAuth();
  await testNextAuthAPI();

  console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  console.log('\nüí° –ï—Å–ª–∏ email –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('   - –ü–∞–ø–∫—É "–°–ø–∞–º" –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ');
  console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å –ø–æ—á—Ç—ã');
  console.log('   - –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Next.js');
  console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP –≤ .env —Ñ–∞–π–ª–µ');
}

runAllTests().catch(console.error);
