/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã mock-interviews
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testMockInterviewsPage() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–†–û–ù–¢–ï–ù–î–ê –°–¢–†–ê–ù–ò–¶–´ MOCK-INTERVIEWS');
  console.log('='.repeat(60));

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã /mock-interviews');
  try {
    const response = await fetch(`${BASE_URL}/mock-interviews`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);

    if (response.status === 200) {
      const html = await response.text();
      const hasTitle =
        html.includes('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è') ||
        html.includes('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
      console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${hasTitle ? '–î–∞' : '–ù–µ—Ç'}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
  }

  // –¢–µ—Å—Ç 2: API –∑–∞–ø—Ä–æ—Å –∫ /api/mock-interviews (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/mock-interviews');
  try {
    const response = await fetch(
      `${BASE_URL}/api/mock-interviews?status=active`
    );
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);

    const data = await response.text();
    console.log(`   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${data.startsWith('<') ? 'HTML' : 'JSON'}`);

    if (response.status === 401) {
      try {
        const jsonData = JSON.parse(data);
        console.log(
          `   ‚úÖ 401 –æ—à–∏–±–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON: ${JSON.stringify(jsonData)}`
        );
      } catch (parseError) {
        console.log(
          `   ‚ùå 401 –æ—à–∏–±–∫–∞, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON: ${data.substring(0, 100)}...`
        );
      }
    } else if (response.status === 200) {
      try {
        const jsonData = JSON.parse(data);
        console.log(
          `   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç —Å ${jsonData.length || 0} —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º–∏`
        );
      } catch (parseError) {
        console.log(
          `   ‚ùå 200 —Å—Ç–∞—Ç—É—Å, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON: ${data.substring(0, 100)}...`
        );
      }
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç 3: API –∑–∞–ø—Ä–æ—Å –∫ /api/user/points (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/user/points');
  try {
    const response = await fetch(`${BASE_URL}/api/user/points`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);

    const data = await response.text();
    console.log(`   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${data.startsWith('<') ? 'HTML' : 'JSON'}`);

    if (response.status === 401) {
      try {
        const jsonData = JSON.parse(data);
        console.log(
          `   ‚úÖ 401 –æ—à–∏–±–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON: ${JSON.stringify(jsonData)}`
        );
      } catch (parseError) {
        console.log(
          `   ‚ùå 401 –æ—à–∏–±–∫–∞, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON: ${data.substring(0, 100)}...`
        );
      }
    } else if (response.status === 200) {
      try {
        const jsonData = JSON.parse(data);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: ${JSON.stringify(jsonData)}`);
      } catch (parseError) {
        console.log(
          `   ‚ùå 200 —Å—Ç–∞—Ç—É—Å, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON: ${data.substring(0, 100)}...`
        );
      }
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤');

  const additionalEndpoints = [
    '/api/auth/session',
    '/api/auth/csrf',
    '/api/auth/providers',
  ];

  for (const endpoint of additionalEndpoints) {
    try {
      const response = await fetch(`${BASE_URL}${endpoint}`);
      console.log(`   ${endpoint}: ${response.status} ${response.statusText}`);

      const data = await response.text();
      const isJson = !data.startsWith('<');
      console.log(`     –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${isJson ? 'JSON' : 'HTML'}`);

      if (isJson && data) {
        try {
          const jsonData = JSON.parse(data);
          console.log(`     ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`);
        } catch (parseError) {
          console.log(`     ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`);
        }
      }
    } catch (error) {
      console.log(`   ${endpoint}: ‚ùå –û—à–∏–±–∫–∞ - ${error.message}`);
    }
  }

  console.log('\nüìã –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));
  console.log('–ï—Å–ª–∏ –≤—Å–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSON (–∞ –Ω–µ HTML), —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.');
  console.log('–ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç HTML, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
  console.log('\n–î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/mock-interviews');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12) ‚Üí Network');
  console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testMockInterviewsPage().catch(console.error);
