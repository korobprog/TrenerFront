/**
 * –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ 404
 */

const https = require('https');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  baseUrl: 'http://localhost:3000',
  adminPageUrl: '/admin/interview-assistant-settings',
  apiEndpoint: '/api/admin/interview-assistant-settings',
  timeout: 15000,
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 */
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(CONFIG.baseUrl + path);
    const options = {
      hostname: url.hostname,
      port: url.port || (url.protocol === 'https:' ? 443 : 80),
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Admin-Page-Test/1.0',
        Accept:
          'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        ...headers,
      },
      timeout: CONFIG.timeout,
    };

    if (data) {
      const jsonData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(jsonData);
    }

    const client = url.protocol === 'https:' ? https : http;
    const req = client.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: responseData,
          contentType: res.headers['content-type'] || '',
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏
 */
async function testAdminPageAvailability() {
  console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest('GET', CONFIG.adminPageUrl);

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);
    console.log(`üìÑ Content-Type: ${response.contentType}`);

    if (response.statusCode === 404) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404!');
      return false;
    } else if (response.statusCode === 200) {
      console.log('‚úÖ –£–°–ü–ï–•: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (response.contentType.includes('text/html')) {
        console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Content-Type (HTML)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const hasTitle =
          response.data.includes('<title>') ||
          response.data.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
        const hasForm =
          response.data.includes('<form') || response.data.includes('form');
        const hasReact =
          response.data.includes('__NEXT_DATA__') ||
          response.data.includes('_app');

        console.log(`üìã –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${hasTitle ? '‚úÖ' : '‚ùå'}`);
        console.log(`üìã –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É: ${hasForm ? '‚úÖ' : '‚ùå'}`);
        console.log(`üìã React/Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${hasReact ? '‚úÖ' : '‚ùå'}`);

        return true;
      } else {
        console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π Content-Type');
        return false;
      }
    } else if (response.statusCode === 302 || response.statusCode === 301) {
      console.log('üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
      console.log(`üìç Location: ${response.headers.location || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return true;
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function testApiCallFromPage() {
  console.log('\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ API —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  console.log('='.repeat(50));

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const pageResponse = await makeRequest('GET', CONFIG.adminPageUrl);

    if (pageResponse.statusCode !== 200) {
      console.log('‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API –≤—ã–∑–æ–≤–∞');
      return true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç
    const hasApiCall = pageResponse.data.includes(
      '/api/admin/interview-assistant-settings'
    );
    console.log(`üì° –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–∑–æ–≤ API: ${hasApiCall ? '‚úÖ' : '‚ùå'}`);

    if (hasApiCall) {
      console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      return true;
    } else {
      console.log('‚ö†Ô∏è  API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –≤—ã–∑–æ–≤–∞:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (—Å–∏–º—É–ª—è—Ü–∏—è)
 */
async function testConsoleErrors() {
  console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ 404 –≤ –∫–æ–Ω—Å–æ–ª–∏');
  console.log('='.repeat(50));

  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API
    console.log('üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');

    const pageResponse = await makeRequest('GET', CONFIG.adminPageUrl);
    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageResponse.statusCode}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç...');
    const apiResponse = await makeRequest('GET', CONFIG.apiEndpoint);
    console.log(`üì° API: ${apiResponse.statusCode}`);

    if (apiResponse.statusCode === 404) {
      console.log('‚ùå API –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 - –±—É–¥—É—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏');
      return false;
    } else {
      console.log('‚úÖ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 - –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function testPageStructure() {
  console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest('GET', CONFIG.adminPageUrl);

    if (response.statusCode !== 200) {
      console.log('‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
      return true;
    }

    const pageContent = response.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const checks = [
      {
        name: 'HTML –¥–æ–∫—É–º–µ–Ω—Ç',
        test:
          pageContent.includes('<!DOCTYPE html>') ||
          pageContent.includes('<html'),
      },
      { name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', test: pageContent.includes('<title>') },
      {
        name: 'Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        test: pageContent.includes('__NEXT_DATA__'),
      },
      {
        name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        test:
          pageContent.includes('assistant') ||
          pageContent.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
      },
      {
        name: '–§–æ—Ä–º–∞ –∏–ª–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞',
        test: pageContent.includes('<input') || pageContent.includes('<form'),
      },
    ];

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    let allPassed = true;

    checks.forEach((check) => {
      const status = check.test ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${check.name}`);
      if (!check.test) allPassed = false;
    });

    return allPassed;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –ê–î–ú–ò–ù–ö–ò');
  console.log('='.repeat(60));
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${CONFIG.baseUrl}`);
  console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏: ${CONFIG.adminPageUrl}`);
  console.log(`üîó API —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${CONFIG.apiEndpoint}`);
  console.log(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${CONFIG.timeout}ms`);

  const results = {
    pageAvailable: false,
    apiIntegration: false,
    noConsoleErrors: false,
    pageStructure: false,
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  results.pageAvailable = await testAdminPageAvailability();
  results.apiIntegration = await testApiCallFromPage();
  results.noConsoleErrors = await testConsoleErrors();
  results.pageStructure = await testPageStructure();

  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –ê–î–ú–ò–ù–ö–ò');
  console.log('='.repeat(60));

  const tests = [
    { name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏', result: results.pageAvailable },
    { name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API', result: results.apiIntegration },
    {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ 404 –≤ –∫–æ–Ω—Å–æ–ª–∏',
      result: results.noConsoleErrors,
    },
    { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', result: results.pageStructure },
  ];

  tests.forEach((test) => {
    const status = test.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`${status} - ${test.name}`);
  });

  const passedTests = tests.filter((test) => test.result).length;
  const totalTests = tests.length;

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);

  if (results.noConsoleErrors) {
    console.log('\nüéâ –ö–û–ù–°–û–õ–¨–ù–´–ï –û–®–ò–ë–ö–ò 404 –ò–°–ü–†–ê–í–õ–ï–ù–´!');
  }

  if (results.pageAvailable) {
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
  }

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = { runTests, makeRequest, CONFIG };
