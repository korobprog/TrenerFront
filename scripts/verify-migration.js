/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ VideoRoom
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyMigration() {
  console.log('üîç === –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã VideoRoom
    console.log('üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã VideoRoom...');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ç–∞–±–ª–∏—Ü—ã VideoRoom
    const tableInfo = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'VideoRoom' 
      AND table_schema = 'public'
      ORDER BY ordinal_position;
    `;

    console.log('üìã –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã VideoRoom:');
    tableInfo.forEach((column, index) => {
      const nullable = column.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
      const defaultValue = column.column_default
        ? ` DEFAULT ${column.column_default}`
        : '';
      console.log(
        `   ${index + 1}. ${column.column_name} (${
          column.data_type
        }) ${nullable}${defaultValue}`
      );
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:');
    const requiredFields = ['isPrivate', 'recordingEnabled', 'settings'];
    const existingFields = tableInfo.map((col) => col.column_name);

    requiredFields.forEach((field) => {
      if (existingFields.includes(field)) {
        console.log(`   ‚úÖ ${field} - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`   ‚ùå ${field} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ VideoRoom –∑–∞–ø–∏—Å–∏
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π VideoRoom...');
    const roomCount = await prisma.videoRoom.count();
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: ${roomCount}`);

    if (roomCount > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
      const sampleRooms = await prisma.videoRoom.findMany({
        take: 3,
        select: {
          id: true,
          code: true,
          name: true,
          isPrivate: true,
          recordingEnabled: true,
          settings: true,
          createdAt: true,
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏:');
      sampleRooms.forEach((room, index) => {
        console.log(`   –ö–æ–º–Ω–∞—Ç–∞ ${index + 1}:`);
        console.log(`     ID: ${room.id}`);
        console.log(`     –ö–æ–¥: ${room.code}`);
        console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${room.name}`);
        console.log(`     –ü—Ä–∏–≤–∞—Ç–Ω–∞—è: ${room.isPrivate}`);
        console.log(`     –ó–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–∞: ${room.recordingEnabled}`);
        console.log(
          `     –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${
            room.settings ? JSON.stringify(room.settings) : 'null'
          }`
        );
        console.log(`     –°–æ–∑–¥–∞–Ω–∞: ${room.createdAt.toISOString()}`);
        console.log('');
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º MockInterview –∑–∞–ø–∏—Å–∏ —Å videoType
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π MockInterview...');
    const interviewCount = await prisma.mockInterview.count();
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${interviewCount}`);

    if (interviewCount > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –≤–∏–¥–µ–æ
      const videoTypeStats = await prisma.mockInterview.groupBy({
        by: ['videoType'],
        _count: {
          videoType: true,
        },
      });

      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–∏–¥–µ–æ:');
      videoTypeStats.forEach((stat) => {
        console.log(
          `   ${stat.videoType || 'null'}: ${stat._count.videoType} –∏–Ω—Ç–µ—Ä–≤—å—é`
        );
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä–≤—å—é —Å videoRoomId
      const interviewsWithVideoRoom = await prisma.mockInterview.findMany({
        where: {
          videoRoomId: {
            not: null,
          },
        },
        take: 3,
        select: {
          id: true,
          videoType: true,
          videoRoomId: true,
          meetingLink: true,
          status: true,
          scheduledTime: true,
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      if (interviewsWithVideoRoom.length > 0) {
        console.log('\nüîó –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ VideoRoom:');
        interviewsWithVideoRoom.forEach((interview, index) => {
          console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é ${index + 1}:`);
          console.log(`     ID: ${interview.id}`);
          console.log(`     –¢–∏–ø –≤–∏–¥–µ–æ: ${interview.videoType}`);
          console.log(`     VideoRoom ID: ${interview.videoRoomId}`);
          console.log(`     –°—Å—ã–ª–∫–∞: ${interview.meetingLink}`);
          console.log(`     –°—Ç–∞—Ç—É—Å: ${interview.status}`);
          console.log(`     –í—Ä–µ–º—è: ${interview.scheduledTime.toISOString()}`);
          console.log('');
        });
      } else {
        console.log('   ‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ VideoRoom –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...');
    const migrations = await prisma.$queryRaw`
      SELECT migration_name, started_at, finished_at
      FROM "_prisma_migrations"
      ORDER BY started_at DESC
      LIMIT 5;
    `;

    console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–≥—Ä–∞—Ü–∏–π:');
    migrations.forEach((migration, index) => {
      const duration = migration.finished_at
        ? `${Math.round(
            (new Date(migration.finished_at) - new Date(migration.started_at)) /
              1000
          )}s`
        : '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ';
      console.log(`   ${index + 1}. ${migration.migration_name} (${duration})`);
    });

    console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);

    if (error.code === 'P1001') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    } else if (error.code === 'P2021') {
      console.log(
        '\nüí° –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.'
      );
      console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx prisma migrate dev');
    }

    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π VideoRoom
async function createTestVideoRoom() {
  console.log('\nüß™ === –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô VIDEOROOM ===');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    const userCount = await prisma.user.count();
    if (userCount === 0) {
      console.log(
        '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã'
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.findFirst({
      select: { id: true, name: true, email: true },
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    const roomCode =
      'TEST' + Math.random().toString(36).substring(2, 8).toUpperCase();

    const testRoom = await prisma.videoRoom.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏',
        description: '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π',
        code: roomCode,
        hostId: testUser.id,
        isPrivate: true,
        recordingEnabled: false,
        maxParticipants: 5,
        settings: {
          allowScreenShare: true,
          allowChat: true,
          autoRecord: false,
          quality: 'HD',
          testField: 'migration-test',
        },
      },
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è VideoRoom —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   ID: ${testRoom.id}`);
    console.log(`   –ö–æ–¥: ${testRoom.code}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${testRoom.name}`);
    console.log(`   –•–æ—Å—Ç: ${testUser.name} (${testUser.email})`);
    console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω–∞—è: ${testRoom.isPrivate}`);
    console.log(`   –ó–∞–ø–∏—Å—å: ${testRoom.recordingEnabled}`);
    console.log(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(testRoom.settings, null, 2)}`);

    return testRoom;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);

  if (args.includes('--create-test')) {
    await createTestVideoRoom();
  } else {
    await verifyMigration();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  verifyMigration,
  createTestVideoRoom,
};
