const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  calendarEvent: {
    title: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è',
    description: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π',
    startTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // –ß–µ—Ä–µ–∑ —á–∞—Å
    endTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    eventType: 'video_conference',
    createVideoRoom: true,
  },

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è signaling
  signalingData: {
    type: 'join-room',
    roomId: 'TEST-ROOM',
    data: {},
  },
};

async function testAPI() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Video Conference API...\n');

  try {
    // 1. –¢–µ—Å—Ç API –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    console.log('üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...');

    // GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    try {
      const eventsResponse = await axios.get(
        `${BASE_URL}/api/custom/calendar/events`,
        {
          params: {
            start: new Date().toISOString(),
            end: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // –ù–µ–¥–µ–ª—è –≤–ø–µ—Ä–µ–¥
          },
        }
      );
      console.log('‚úÖ GET /api/custom/calendar/events - –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${eventsResponse.status}`);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log(
          '‚ö†Ô∏è  GET /api/custom/calendar/events - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)'
        );
      } else {
        console.log(
          '‚ùå GET /api/custom/calendar/events - –æ—à–∏–±–∫–∞:',
          error.message
        );
      }
    }

    // 2. –¢–µ—Å—Ç API signaling
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º API signaling...');

    try {
      const signalingResponse = await axios.get(
        `${BASE_URL}/api/custom/signaling`,
        {
          params: { roomId: 'TEST-ROOM' },
        }
      );
      console.log('‚úÖ GET /api/custom/signaling - –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${signalingResponse.status}`);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log(
          '‚ö†Ô∏è  GET /api/custom/signaling - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)'
        );
      } else {
        console.log('‚ùå GET /api/custom/signaling - –æ—à–∏–±–∫–∞:', error.message);
      }
    }

    // 3. –¢–µ—Å—Ç API –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    try {
      const usersResponse = await axios.get(`${BASE_URL}/api/users/search`, {
        params: { q: 'test', limit: 5 },
      });
      console.log('‚úÖ GET /api/users/search - –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${usersResponse.status}`);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log(
          '‚ö†Ô∏è  GET /api/users/search - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)'
        );
      } else {
        console.log('‚ùå GET /api/users/search - –æ—à–∏–±–∫–∞:', error.message);
      }
    }

    // 4. –¢–µ—Å—Ç Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüîå –¢–µ—Å—Ç–∏—Ä—É–µ–º Socket.IO —Å–µ—Ä–≤–µ—Ä...');

    try {
      const socketResponse = await axios.get(`${BASE_URL}/api/socket-server`);
      console.log('‚úÖ GET /api/socket-server - –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${socketResponse.status}`);
    } catch (error) {
      console.log('‚ùå GET /api/socket-server - –æ—à–∏–±–∫–∞:', error.message);
    }

    // 5. –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API –∫–æ–º–Ω–∞—Ç
    console.log('\nüè† –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–æ–º–Ω–∞—Ç...');

    try {
      const roomsResponse = await axios.get(`${BASE_URL}/api/custom/rooms`);
      console.log('‚úÖ GET /api/custom/rooms - –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${roomsResponse.status}`);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log(
          '‚ö†Ô∏è  GET /api/custom/rooms - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)'
        );
      } else {
        console.log('‚ùå GET /api/custom/rooms - –æ—à–∏–±–∫–∞:', error.message);
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');

    try {
      const homeResponse = await axios.get(`${BASE_URL}/`);
      console.log('‚úÖ GET / - –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${homeResponse.status}`);
    } catch (error) {
      console.log('‚ùå GET / - –æ—à–∏–±–∫–∞:', error.message);
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('‚ö†Ô∏è  Endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
    console.log('üîß Socket.IO —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ moment –∏ uuid —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('üóÑÔ∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
    console.log('‚öôÔ∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

    console.log('\nüéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000');
    console.log('2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–∏–º');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testAPI();
