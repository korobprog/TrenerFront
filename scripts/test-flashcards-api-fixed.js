const { PrismaClient } = require('@prisma/client');

async function testFlashcardsAPIFixed() {
  const prisma = new PrismaClient();

  try {
    console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤...');
    const totalQuestions = await prisma.question.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);

    // 3. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    // –ü–æ—Å–∫–æ–ª—å–∫—É text - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º...');
    const questionsWithText = await prisma.question.count({
      where: {
        text: {
          not: '', // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        },
      },
    });
    console.log(`üìù –í–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${questionsWithText}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    const questionsWithEmptyText = await prisma.question.count({
      where: {
        text: '',
      },
    });
    console.log(`‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${questionsWithEmptyText}`);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ API
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');

    const whereConditions = {
      text: {
        not: '', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
      },
    };

    console.log('üîç –£—Å–ª–æ–≤–∏—è WHERE:', JSON.stringify(whereConditions, null, 2));

    const questions = await prisma.question.findMany({
      where: whereConditions,
      orderBy: [{ createdAt: 'desc' }],
      take: 5,
      include: {
        userProgress: {
          where: {
            userId: 'test-user-id', // –¢–µ—Å—Ç–æ–≤—ã–π ID
          },
          orderBy: {
            lastReviewed: 'desc',
          },
          take: 1,
        },
        favoriteQuestions: {
          where: {
            userId: 'test-user-id', // –¢–µ—Å—Ç–æ–≤—ã–π ID
          },
        },
      },
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questions.length}`);

    if (questions.length > 0) {
      console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:');
      questions.slice(0, 3).forEach((q, i) => {
        console.log(`  ${i + 1}. ID: ${q.id}`);
        console.log(`     –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`     –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`     –¢–µ–∫—Å—Ç: ${q.text?.substring(0, 100)}...`);
        console.log(`     –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${q.text?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${q.createdAt}`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if (questionsWithEmptyText > 0) {
      console.log('‚ùå –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º:');
      const emptyQuestions = await prisma.question.findMany({
        where: {
          text: '',
        },
        take: 3,
        select: {
          id: true,
          text: true,
          topic: true,
          difficulty: true,
        },
      });

      emptyQuestions.forEach((q, i) => {
        console.log(
          `  ${i + 1}. ID: ${q.id}, –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}, –¢–µ–∫—Å—Ç: '${
            q.text
          }'`
        );
      });
    }

    console.log('=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===');
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

testFlashcardsAPIFixed();
