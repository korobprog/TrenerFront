/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã 404 –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã API
 */

const https = require('https');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  baseUrl: 'http://localhost:3000',
  apiEndpoint: '/api/admin/interview-assistant-settings',
  timeout: 10000,
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–∞
  testSettings: {
    maxQuestionsPerDay: 15,
    maxTokensPerQuestion: 5000,
    isActive: true,
    openRouterApiKey:
      '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',
    openRouterBaseUrl: 'https://openrouter.ai/api/v1',
    openRouterModel: 'google/gemma-3-12b-it:free',
    openRouterTemperature: 0.8,
    openRouterMaxTokens: 5000,
  },
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 */
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(CONFIG.baseUrl + path);
    const options = {
      hostname: url.hostname,
      port: url.port || (url.protocol === 'https:' ? 443 : 80),
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Interview-Assistant-Settings-Test/1.0',
        ...headers,
      },
      timeout: CONFIG.timeout,
    };

    if (data) {
      const jsonData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(jsonData);
    }

    const client = url.protocol === 'https:' ? https : http;
    const req = client.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = responseData ? JSON.parse(responseData) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData,
            rawData: responseData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: null,
            rawData: responseData,
            parseError: error.message,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 404)
 */
async function testEndpointAvailability() {
  console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest('GET', CONFIG.apiEndpoint);

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, response.headers);

    if (response.statusCode === 404) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404!');
      console.log('üîß –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
      return false;
    } else if (response.statusCode === 401 || response.statusCode === 403) {
      console.log('‚úÖ –£–°–ü–ï–•: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–∞)');
      console.log('üîß –ü—Ä–æ–±–ª–µ–º–∞ 404 –ò–°–ü–†–ê–í–õ–ï–ù–ê');
      return true;
    } else if (response.statusCode === 200) {
      console.log('‚úÖ –£–°–ü–ï–•: –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üîß –ü—Ä–æ–±–ª–µ–º–∞ 404 –ò–°–ü–†–ê–í–õ–ï–ù–ê');
      return true;
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      console.log('üìÑ –û—Ç–≤–µ—Ç:', response.rawData);
      return true; // –õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–º–µ 404 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω
    }
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ GET –∑–∞–ø—Ä–æ—Å–∞
 */
async function testGetRequest() {
  console.log('\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest('GET', CONFIG.apiEndpoint);

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

    if (response.statusCode === 401 || response.statusCode === 403) {
      console.log('üîê –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∞ –Ω–µ 404
      if (
        response.data &&
        (response.data.message?.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏') ||
          response.data.message?.includes('–¥–æ—Å—Ç—É–ø') ||
          response.data.message?.includes('admin') ||
          response.data.error?.includes('Unauthorized'))
      ) {
        console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
      }
    } else if (response.statusCode === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(response.data, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (response.data && response.data.settings) {
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        return true;
      } else {
        console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
        return false;
      }
    }

    console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.rawData);
    return false;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ GET –∑–∞–ø—Ä–æ—Å–µ:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞
 */
async function testPutRequest() {
  console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest(
      'PUT',
      CONFIG.apiEndpoint,
      CONFIG.testSettings
    );

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

    if (response.statusCode === 401 || response.statusCode === 403) {
      console.log('üîê –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–∞');
      console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data);
      console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PUT –∑–∞–ø—Ä–æ—Å—ã');
      return true;
    } else if (response.statusCode === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      console.log('üìÑ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
      return true;
    } else if (response.statusCode === 400) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data);
      console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ');
      return true;
    }

    console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.rawData);
    return false;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ PUT –∑–∞–ø—Ä–æ—Å–µ:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
 */
async function testUnsupportedMethods() {
  console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤');
  console.log('='.repeat(50));

  const methods = ['POST', 'DELETE', 'PATCH'];
  let allCorrect = true;

  for (const method of methods) {
    try {
      console.log(`\nüî∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ ${method}:`);
      const response = await makeRequest(method, CONFIG.apiEndpoint);

      console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

      if (response.statusCode === 405) {
        console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 405 Method Not Allowed');
      } else if (response.statusCode === 401 || response.statusCode === 403) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–∞');
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
        allCorrect = false;
      }
    } catch (error) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ ${method} –∑–∞–ø—Ä–æ—Å–µ:`, error.message);
      allCorrect = false;
    }
  }

  return allCorrect;
}

/**
 * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ CORS
 */
async function testHeaders() {
  console.log('\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞');
  console.log('='.repeat(50));

  try {
    const response = await makeRequest('GET', CONFIG.apiEndpoint);

    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
    Object.entries(response.headers).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const hasContentType =
      response.headers['content-type']?.includes('application/json');
    console.log(`\nüìÑ Content-Type JSON: ${hasContentType ? '‚úÖ' : '‚ùå'}`);

    return true;
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ù–ê–°–¢–†–û–ï–ö –ò–ù–¢–ï–†–í–¨–Æ-–ê–°–°–ò–°–¢–ï–ù–¢–ê');
  console.log('='.repeat(60));
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${CONFIG.baseUrl}`);
  console.log(`üîó –≠–Ω–¥–ø–æ–∏–Ω—Ç: ${CONFIG.apiEndpoint}`);
  console.log(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${CONFIG.timeout}ms`);

  const results = {
    endpointAvailable: false,
    getRequest: false,
    putRequest: false,
    unsupportedMethods: false,
    headers: false,
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  results.endpointAvailable = await testEndpointAvailability();
  results.getRequest = await testGetRequest();
  results.putRequest = await testPutRequest();
  results.unsupportedMethods = await testUnsupportedMethods();
  results.headers = await testHeaders();

  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));

  const tests = [
    {
      name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 404)',
      result: results.endpointAvailable,
    },
    { name: 'GET –∑–∞–ø—Ä–æ—Å', result: results.getRequest },
    { name: 'PUT –∑–∞–ø—Ä–æ—Å', result: results.putRequest },
    { name: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã', result: results.unsupportedMethods },
    { name: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', result: results.headers },
  ];

  tests.forEach((test) => {
    const status = test.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`${status} - ${test.name}`);
  });

  const passedTests = tests.filter((test) => test.result).length;
  const totalTests = tests.length;

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);

  if (results.endpointAvailable) {
    console.log(
      '\nüéâ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê: API —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404!'
    );
  } else {
    console.log(
      '\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê: API —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    );
  }

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = { runTests, makeRequest, CONFIG };
