/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–∫–∏ 500 –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter
 */

import {
  withAdminAuth,
  logAdminAction,
} from '../../../lib/middleware/adminAuth';
import prisma, { withPrisma } from '../../../lib/prisma';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
 * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
 */
async function handler(req, res) {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: URL:', req.url);
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ú–µ—Ç–æ–¥:', req.method);
  console.log(
    'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ó–∞–≥–æ–ª–æ–≤–∫–∏:',
    JSON.stringify(req.headers, null, 2)
  );
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ:', req.admin);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (req.method === 'PUT') {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞');

    try {
      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (raw):',
        JSON.stringify(req.body, null, 2)
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const {
        maxQuestionsPerDay,
        maxTokensPerQuestion,
        isActive,
        // –ü–æ–ª—è –¥–ª—è OpenRouter
        openRouterApiKey,
        openRouterBaseUrl,
        openRouterModel,
        openRouterTemperature,
        openRouterMaxTokens,
      } = req.body;

      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
      console.log(
        '  - maxQuestionsPerDay:',
        maxQuestionsPerDay,
        typeof maxQuestionsPerDay
      );
      console.log(
        '  - maxTokensPerQuestion:',
        maxTokensPerQuestion,
        typeof maxTokensPerQuestion
      );
      console.log('  - isActive:', isActive, typeof isActive);
      console.log(
        '  - openRouterApiKey:',
        openRouterApiKey ? '[–°–ö–†–´–¢]' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        typeof openRouterApiKey
      );
      console.log(
        '  - openRouterBaseUrl:',
        openRouterBaseUrl,
        typeof openRouterBaseUrl
      );
      console.log(
        '  - openRouterModel:',
        openRouterModel,
        typeof openRouterModel
      );
      console.log(
        '  - openRouterTemperature:',
        openRouterTemperature,
        typeof openRouterTemperature
      );
      console.log(
        '  - openRouterMaxTokens:',
        openRouterMaxTokens,
        typeof openRouterMaxTokens
      );

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø API –∫–∞–∫ OpenRouter
      const apiType = 'openrouter';
      const apiKey = openRouterApiKey;

      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
      console.log('  - apiType:', apiType);
      console.log('  - apiKey:', apiKey ? '[–°–ö–†–´–¢]' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è OpenRouter
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π...');

      if (!openRouterApiKey) {
        console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterApiKey');
        return res.status(400).json({
          message: 'OpenRouter API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          code: 'MISSING_OPENROUTER_API_KEY',
        });
      }

      if (!openRouterModel) {
        console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterModel');
        return res.status(400).json({
          message: '–ú–æ–¥–µ–ª—å OpenRouter –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
          code: 'MISSING_OPENROUTER_MODEL',
        });
      }

      console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');

      let convertedMaxQuestionsPerDay,
        convertedMaxTokensPerQuestion,
        convertedOpenRouterTemperature,
        convertedOpenRouterMaxTokens;

      try {
        convertedMaxQuestionsPerDay = parseInt(maxQuestionsPerDay, 10);
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: maxQuestionsPerDay –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedMaxQuestionsPerDay
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ maxQuestionsPerDay:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxQuestionsPerDay',
          code: 'INVALID_MAX_QUESTIONS_PER_DAY',
        });
      }

      try {
        convertedMaxTokensPerQuestion = parseInt(maxTokensPerQuestion, 10);
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: maxTokensPerQuestion –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedMaxTokensPerQuestion
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ maxTokensPerQuestion:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxTokensPerQuestion',
          code: 'INVALID_MAX_TOKENS_PER_QUESTION',
        });
      }

      try {
        convertedOpenRouterTemperature = parseFloat(openRouterTemperature);
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: openRouterTemperature –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedOpenRouterTemperature
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ openRouterTemperature:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterTemperature',
          code: 'INVALID_OPENROUTER_TEMPERATURE',
        });
      }

      try {
        convertedOpenRouterMaxTokens = parseInt(openRouterMaxTokens, 10);
        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: openRouterMaxTokens –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:',
          convertedOpenRouterMaxTokens
        );
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ openRouterMaxTokens:',
          error.message
        );
        return res.status(400).json({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ openRouterMaxTokens',
          code: 'INVALID_OPENROUTER_MAX_TOKENS',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');

      let existingSettings;
      try {
        existingSettings = await withPrisma(async (prisma) => {
          console.log(
            'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...'
          );
          const result = await prisma.interviewAssistantSettings.findFirst({
            where: {
              isActive: true,
            },
          });
          console.log(
            'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
            result ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
          );
          return result;
        });
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
          error.message
        );
        console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        throw error;
      }

      let updatedSettings;

      if (existingSettings) {
        console.log(
          'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å ID:',
          existingSettings.id
        );

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
          apiKey,
          maxQuestionsPerDay: convertedMaxQuestionsPerDay,
          maxTokensPerQuestion: convertedMaxTokensPerQuestion,
          isActive,
          apiType,
          // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
          langdockAssistantId: null,
          langdockBaseUrl: null,
          langdockRegion: null,
          geminiApiKey: null,
          geminiModel: null,
          geminiBaseUrl: null,
          geminiTemperature: null,
          // –ü–æ–ª—è –¥–ª—è OpenRouter
          openRouterApiKey,
          openRouterBaseUrl,
          openRouterModel,
          openRouterTemperature: convertedOpenRouterTemperature,
          openRouterMaxTokens: convertedOpenRouterMaxTokens,
        };

        console.log(
          'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
          JSON.stringify(
            {
              ...updateData,
              apiKey: '[–°–ö–†–´–¢]',
              openRouterApiKey: '[–°–ö–†–´–¢]',
            },
            null,
            2
          )
        );

        try {
          updatedSettings = await withPrisma(async (prisma) => {
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE –∑–∞–ø—Ä–æ—Å –∫ –ë–î...');
            const result = await prisma.interviewAssistantSettings.update({
              where: {
                id: existingSettings.id,
              },
              data: updateData,
            });
            console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: UPDATE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
          });
        } catch (error) {
          console.log(
            '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
            error.message
          );
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–æ–¥ –æ—à–∏–±–∫–∏ Prisma:', error.code);
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', error.meta);
          throw error;
        }

        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        );
      } else {
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        const createData = {
          apiKey,
          maxQuestionsPerDay: convertedMaxQuestionsPerDay,
          maxTokensPerQuestion: convertedMaxTokensPerQuestion,
          isActive,
          apiType,
          // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
          langdockAssistantId: null,
          langdockBaseUrl: null,
          langdockRegion: null,
          geminiApiKey: null,
          geminiModel: null,
          geminiBaseUrl: null,
          geminiTemperature: null,
          // –ü–æ–ª—è –¥–ª—è OpenRouter
          openRouterApiKey,
          openRouterBaseUrl,
          openRouterModel,
          openRouterTemperature: convertedOpenRouterTemperature,
          openRouterMaxTokens: convertedOpenRouterMaxTokens,
        };

        console.log(
          'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:',
          JSON.stringify(
            {
              ...createData,
              apiKey: '[–°–ö–†–´–¢]',
              openRouterApiKey: '[–°–ö–†–´–¢]',
            },
            null,
            2
          )
        );

        try {
          updatedSettings = await withPrisma(async (prisma) => {
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –í—ã–ø–æ–ª–Ω—è–µ–º CREATE –∑–∞–ø—Ä–æ—Å –∫ –ë–î...');
            const result = await prisma.interviewAssistantSettings.create({
              data: createData,
            });
            console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: CREATE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
          });
        } catch (error) {
          console.log(
            '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
            error.message
          );
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–æ–¥ –æ—à–∏–±–∫–∏ Prisma:', error.code);
          console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', error.meta);
          throw error;
        }

        console.log(
          '‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã'
        );
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      try {
        await logAdminAction(
          req.admin.id,
          'update_interview_assistant_settings',
          'settings',
          updatedSettings.id,
          {
            maxQuestionsPerDay: convertedMaxQuestionsPerDay,
            maxTokensPerQuestion: convertedMaxTokensPerQuestion,
            isActive,
            apiType,
            // –ü–æ–ª—è –¥–ª—è OpenRouter (–±–µ–∑ API –∫–ª—é—á–∞)
            openRouterBaseUrl,
            openRouterModel,
            openRouterTemperature: convertedOpenRouterTemperature,
            openRouterMaxTokens: convertedOpenRouterMaxTokens,
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          }
        );
        console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ');
      } catch (error) {
        console.log(
          '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:',
          error.message
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞...');
      const response = {
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        settings: updatedSettings,
      };

      console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
      return res.status(200).json(response);
    } catch (error) {
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      console.error(
        'üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      );
      console.error('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);

      if (error.code) {
        console.error('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      }

      if (error.meta) {
        console.error(
          'üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
          JSON.stringify(error.meta, null, 2)
        );
      }

      if (error.clientVersion) {
        console.error(
          'üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –í–µ—Ä—Å–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞:',
          error.clientVersion
        );
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤—å—é-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        error: error.message,
        code: 'SETTINGS_UPDATE_ERROR',
        details: {
          type: error.constructor.name,
          prismaCode: error.code,
          meta: error.meta,
        },
      });
    }
  }

  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  console.log(
    '‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:',
    req.method
  );
  return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}

export default withAdminAuth(handler);
