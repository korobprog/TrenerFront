/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API —Ñ–ª–µ—à–∫–∞—Ä—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CommonJS –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

const { PrismaClient } = require('@prisma/client');

async function diagnoseFlashcardAuth() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–õ–ï–®–ö–ê–†–¢ ===');

  const prisma = new PrismaClient();

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log(
      '   NEXTAUTH_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:',
      !!process.env.NEXTAUTH_SECRET
    );
    console.log('   NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    console.log('   NODE_ENV:', process.env.NODE_ENV);
    console.log('   DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.DATABASE_URL);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    try {
      await prisma.$connect();
      console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await prisma.user.count();
      console.log('   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:', userCount);

      if (userCount > 0) {
        const sampleUser = await prisma.user.findFirst({
          select: {
            id: true,
            email: true,
            name: true,
            role: true,
          },
        });
        console.log('   üë§ –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: sampleUser.id,
          email: sampleUser.email,
          name: sampleUser.name,
          role: sampleUser.role,
        });
      }
    } catch (dbError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError.message);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü');
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Session
      const sessionCount = await prisma.session.count();
      console.log('   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –±–∞–∑–µ:', sessionCount);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Account
      const accountCount = await prisma.account.count();
      console.log('   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ:', accountCount);
    } catch (tableError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü:', tableError.message);
    }

    // –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüîç –¢–ï–°–¢ 4: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    try {
      const activeSessions = await prisma.session.findMany({
        where: {
          expires: {
            gt: new Date(),
          },
        },
        take: 3,
        include: {
          user: {
            select: {
              id: true,
              email: true,
              name: true,
            },
          },
        },
      });

      console.log('   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', activeSessions.length);
      if (activeSessions.length > 0) {
        console.log('   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏:');
        activeSessions.forEach((session, i) => {
          console.log(
            `     ${i + 1}. ${session.user.email} (ID: ${session.user.id})`
          );
        });
      }
    } catch (sessionError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π:', sessionError.message);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NextAuth
    console.log('\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ NextAuth');
    const fs = require('fs');
    const path = require('path');

    const nextAuthPath = path.join(
      process.cwd(),
      'pages',
      'api',
      'auth',
      '[...nextauth].js'
    );
    const flashcardPath = path.join(
      process.cwd(),
      'pages',
      'api',
      'flashcards',
      'questions.js'
    );

    console.log('   üìÅ NextAuth —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(nextAuthPath));
    console.log(
      '   üìÅ Flashcard API —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:',
      fs.existsSync(flashcardPath)
    );

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ API —Ñ–∞–π–ª–µ
    console.log('\nüîç –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ API —Ñ–∞–π–ª–∞ —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    if (fs.existsSync(flashcardPath)) {
      const flashcardContent = fs.readFileSync(flashcardPath, 'utf8');

      console.log(
        '   üìù –ò–º–ø–æ—Ä—Ç getServerSession:',
        flashcardContent.includes('getServerSession')
      );
      console.log(
        '   üìù –ò–º–ø–æ—Ä—Ç authOptions:',
        flashcardContent.includes('authOptions')
      );
      console.log(
        '   üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:',
        flashcardContent.includes('if (!session)')
      );
      console.log(
        '   üìù –í–æ–∑–≤—Ä–∞—Ç 401:',
        flashcardContent.includes('status(401)')
      );

      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authCheckMatch = flashcardContent.match(
        /const session = await getServerSession\([^)]+\);/
      );
      if (authCheckMatch) {
        console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authCheckMatch[0]);
      } else {
        console.log('   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    }

    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log('\nüîç –¢–ï–°–¢ 7: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ');
    console.log('   üí° –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ cookies (next-auth.session-token)');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Network tab –≤ DevTools –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
  } catch (error) {
    console.error('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
  }

  console.log('\n=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseFlashcardAuth().catch(console.error);
