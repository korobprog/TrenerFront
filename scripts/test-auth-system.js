/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

const { PrismaClient } = require('@prisma/client');
const {
  hashPassword,
  verifyPassword,
  validatePassword,
  validateEmail,
  validateUsername,
} = require('../lib/utils/passwordUtils');
const {
  createUserWithPassword,
  getUserByEmail,
  hasSuperAdmin,
} = require('../lib/utils/userManagement');

const prisma = new PrismaClient();

async function testPasswordUtils() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏');
  console.log('==============================================\n');

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:');
  const testPasswords = [
    'weak', // —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å
    'StrongPass123!', // —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    '12345678', // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    'NoNumbers!', // –±–µ–∑ —Ü–∏—Ñ—Ä
    'nonumbers123', // –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  ];

  testPasswords.forEach((password) => {
    const validation = validatePassword(password);
    console.log(
      `   "${password}": ${validation.isValid ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω'}`
    );
    if (!validation.isValid) {
      validation.errors.forEach((error) => console.log(`      - ${error}`));
    }
  });

  // –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:');
  const testPassword = 'TestPassword123!';
  try {
    const hashedPassword = await hashPassword(testPassword);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${hashedPassword.substring(0, 30)}...`);

    const isValid = await verifyPassword(testPassword, hashedPassword);
    console.log(
      `   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: ${isValid ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ'}`
    );

    const isInvalid = await verifyPassword('WrongPassword', hashedPassword);
    console.log(
      `   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${
        isInvalid ? '‚ùå –û—à–∏–±–∫–∞' : '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
      }`
    );
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
  console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email:');
  const testEmails = [
    'valid@example.com',
    'invalid-email',
    'test@domain',
    'user@test.co.uk',
    '@invalid.com',
  ];

  testEmails.forEach((email) => {
    const isValid = validateEmail(email);
    console.log(`   "${email}": ${isValid ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω'}`);
  });

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username
  console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username:');
  const testUsernames = [
    'validuser',
    'ab', // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    'user_123', // –≤–∞–ª–∏–¥–Ω—ã–π —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
    'user-name', // –≤–∞–ª–∏–¥–Ω—ã–π —Å –¥–µ—Ñ–∏—Å–æ–º
    '123user', // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã
    'user@name', // –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª
  ];

  testUsernames.forEach((username) => {
    const validation = validateUsername(username);
    console.log(
      `   "${username}": ${validation.isValid ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω'}`
    );
    if (!validation.isValid) {
      validation.errors.forEach((error) => console.log(`      - ${error}`));
    }
  });
}

async function testUserManagement() {
  console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  console.log('=========================================\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
  try {
    const hasSuperAdminResult = await hasSuperAdmin();
    console.log(
      `   –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${
        hasSuperAdminResult ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'
      }`
    );
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`);
  }

  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  const testUserEmail = `test_${Date.now()}@example.com`;
  try {
    const testUser = await createUserWithPassword({
      email: testUserEmail,
      password: 'TestPassword123!',
      name: 'Test User',
      role: 'user',
    });

    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
    console.log(`      ID: ${testUser.id}`);
    console.log(`      Email: ${testUser.email}`);
    console.log(`      –†–æ–ª—å: ${testUser.role}`);

    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3. –ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const foundUser = await getUserByEmail(testUserEmail);
    if (foundUser) {
      console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
      console.log(`      ID: ${foundUser.id}`);
      console.log(`      Email: ${foundUser.email}`);
      console.log(`      –ò–º—è: ${foundUser.name}`);
    } else {
      console.log('   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function testDatabaseConnection() {
  console.log('\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('===========================================\n');

  try {
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    const userCount = await prisma.user.count();
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü NextAuth
    const accountCount = await prisma.account.count();
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ OAuth –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accountCount}`);

    const sessionCount = await prisma.session.count();
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionCount}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
  }
}

async function testAuthProviders() {
  console.log('\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
  console.log('=========================================\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google OAuth
  console.log('1. Google OAuth:');
  const googleClientId = process.env.GOOGLE_CLIENT_ID;
  const googleClientSecret = process.env.GOOGLE_CLIENT_SECRET;

  console.log(
    `   GOOGLE_CLIENT_ID: ${
      googleClientId ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }`
  );
  console.log(
    `   GOOGLE_CLIENT_SECRET: ${
      googleClientSecret ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }`
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GitHub OAuth
  console.log('\n2. GitHub OAuth:');
  const githubClientId = process.env.GITHUB_CLIENT_ID;
  const githubClientSecret = process.env.GITHUB_CLIENT_SECRET;

  console.log(
    `   GITHUB_CLIENT_ID: ${
      githubClientId ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }`
  );
  console.log(
    `   GITHUB_CLIENT_SECRET: ${
      githubClientSecret ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }`
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö NextAuth
  console.log('\n3. NextAuth.js:');
  const nextAuthUrl = process.env.NEXTAUTH_URL;
  const nextAuthSecret = process.env.NEXTAUTH_SECRET;

  console.log(
    `   NEXTAUTH_URL: ${nextAuthUrl ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`
  );
  console.log(
    `   NEXTAUTH_SECRET: ${
      nextAuthSecret ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }`
  );

  if (!githubClientId || !githubClientSecret) {
    console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: GitHub OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log(
      '   –î–æ–±–∞–≤—å—Ç–µ GITHUB_CLIENT_ID –∏ GITHUB_CLIENT_SECRET –≤ .env.production'
    );
  }
}

async function runAllTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ NextAuth.js');
  console.log('==================================================\n');

  try {
    await testPasswordUtils();
    await testDatabaseConnection();
    await testUserManagement();
    await testAuthProviders();

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub OAuth (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
    console.log(
      '2. –ú–∏–≥—Ä–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: node scripts/migrate-superadmin-password.js'
    );
    console.log(
      '3. –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: node scripts/create-user-with-password.js'
    );
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests();
}

module.exports = {
  testPasswordUtils,
  testUserManagement,
  testDatabaseConnection,
  testAuthProviders,
  runAllTests,
};
