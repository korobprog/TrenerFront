#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤–∞—Ç–∞—Ä–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∏ API endpoints
 */

const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:3000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
        });
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(options.body);
    }

    req.end();
  });
}

async function testFileExists(filePath) {
  try {
    await fs.promises.access(filePath, fs.constants.F_OK);
    return true;
  } catch {
    return false;
  }
}

async function testDefaultAvatarFile() {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ default-avatar.svg...', 'blue');

  const filePath = path.join(__dirname, 'public', 'default-avatar.svg');
  const exists = await testFileExists(filePath);

  if (exists) {
    log('‚úÖ –§–∞–π–ª public/default-avatar.svg —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');

    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      if (content.includes('<svg') && content.includes('</svg>')) {
        log('‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π SVG', 'green');
      } else {
        log('‚ö†Ô∏è  –§–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π SVG', 'yellow');
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`, 'red');
    }
  } else {
    log('‚ùå –§–∞–π–ª public/default-avatar.svg –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
  }

  return exists;
}

async function testDefaultAvatarEndpoint() {
  log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ /default-avatar.svg...', 'blue');

  try {
    const response = await makeRequest(`${BASE_URL}/default-avatar.svg`);

    if (response.statusCode === 200) {
      log('‚úÖ Endpoint /default-avatar.svg –¥–æ—Å—Ç—É–ø–µ–Ω (200 OK)', 'green');

      const contentType = response.headers['content-type'];
      if (contentType && contentType.includes('image/svg')) {
        log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type: image/svg+xml', 'green');
      } else {
        log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π Content-Type: ${contentType}`, 'yellow');
      }

      return true;
    } else {
      log(`‚ùå Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return false;
  }
}

async function testAvatarAPI() {
  log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API /api/user/avatar...', 'blue');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–µ–º 401)
    const response = await makeRequest(`${BASE_URL}/api/user/avatar`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'generate',
        name: 'Test User',
      }),
    });

    if (response.statusCode === 401) {
      log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (401)', 'green');
      return true;
    } else if (response.statusCode === 404) {
      log('‚ö†Ô∏è  API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)', 'yellow');
      return false;
    } else {
      log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`, 'yellow');
      try {
        const data = JSON.parse(response.data);
        log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(data, null, 2)}`, 'yellow');
      } catch {
        log(`   –û—Ç–≤–µ—Ç: ${response.data}`, 'yellow');
      }
      return true;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: ${error.message}`, 'red');
    return false;
  }
}

async function testPublicDirectory() {
  log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏ public...', 'blue');

  const publicPath = path.join(__dirname, 'public');

  try {
    const exists = await testFileExists(publicPath);
    if (!exists) {
      log('‚ùå –ü–∞–ø–∫–∞ public/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'red');
      return false;
    }

    log('‚úÖ –ü–∞–ø–∫–∞ public/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');

    const files = await fs.promises.readdir(publicPath);
    log(`üìã –§–∞–π–ª—ã –≤ public/: ${files.join(', ')}`, 'blue');

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ public: ${error.message}`, 'red');
    return false;
  }
}

async function checkServerRunning() {
  log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...', 'blue');

  try {
    const response = await makeRequest(`${BASE_URL}/`);
    if (response.statusCode === 200) {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}`, 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'red');
    log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev', 'yellow');
    return false;
  }
}

async function runTests() {
  log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤–∞—Ç–∞—Ä–æ–≤', 'bold');
  log('='.repeat(50), 'blue');

  const results = {
    publicDir: await testPublicDirectory(),
    defaultFile: await testDefaultAvatarFile(),
    serverRunning: await checkServerRunning(),
  };

  if (results.serverRunning) {
    results.defaultEndpoint = await testDefaultAvatarEndpoint();
    results.avatarAPI = await testAvatarAPI();
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', 'bold');
  log('='.repeat(50), 'blue');

  const tests = [
    { name: '–ü–∞–ø–∫–∞ public/', result: results.publicDir },
    { name: '–§–∞–π–ª default-avatar.svg', result: results.defaultFile },
    { name: '–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω', result: results.serverRunning },
    { name: 'Endpoint /default-avatar.svg', result: results.defaultEndpoint },
    { name: 'API /api/user/avatar', result: results.avatarAPI },
  ];

  tests.forEach((test) => {
    if (test.result === undefined) {
      log(`‚è≠Ô∏è  ${test.name}: –ø—Ä–æ–ø—É—â–µ–Ω`, 'yellow');
    } else if (test.result) {
      log(`‚úÖ ${test.name}: –ø—Ä–æ–π–¥–µ–Ω`, 'green');
    } else {
      log(`‚ùå ${test.name}: –ø—Ä–æ–≤–∞–ª–µ–Ω`, 'red');
    }
  });

  const passedTests = tests.filter((t) => t.result === true).length;
  const totalTests = tests.filter((t) => t.result !== undefined).length;

  log(
    `\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`,
    passedTests === totalTests ? 'green' : 'yellow'
  );

  if (results.defaultFile && results.defaultEndpoint) {
    log('\nüéâ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å 404 –æ—à–∏–±–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∞!', 'green');
    log('   –§–∞–π–ª default-avatar.svg —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
  } else if (!results.defaultFile) {
    log('\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª public/default-avatar.svg', 'yellow');
  } else if (!results.defaultEndpoint && results.serverRunning) {
    log('\n‚ö†Ô∏è  –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä', 'yellow');
  }

  log('\nüîç –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞', 'blue');
  log('   –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [AVATAR_DEBUG]', 'blue');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch((error) => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
