const http = require('http');
const https = require('https');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.request(url, options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: data,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(options.body);
    }

    req.end();
  });
}

async function testFlashcardsAPIEndpoint() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/flashcards/questions...\n');

    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    console.log('üìã –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    try {
      const response1 = await makeRequest(
        'http://localhost:3000/api/flashcards/questions'
      );
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response1.statusCode}`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response1.data, null, 2)}`);
    } catch (error) {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('\nüìã –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
    try {
      const response2 = await makeRequest(
        'http://localhost:3000/api/flashcards/questions?limit=5&mode=study'
      );
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response2.statusCode}`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response2.data, null, 2)}`);
    } catch (error) {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–µ–º–µ
    console.log('\nüìã –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–µ–º–µ JavaScript');
    try {
      const response3 = await makeRequest(
        'http://localhost:3000/api/flashcards/questions?topic=JavaScript&limit=3'
      );
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response3.statusCode}`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response3.data, null, 2)}`);
    } catch (error) {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    console.log('\nüìã –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ easy');
    try {
      const response4 = await makeRequest(
        'http://localhost:3000/api/flashcards/questions?difficulty=easy&limit=3'
      );
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response4.statusCode}`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response4.data, null, 2)}`);
    } catch (error) {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(
      '\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 401'
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
async function checkServerStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await makeRequest('http://localhost:3000/api/health');
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.statusCode})`);
    return true;
  } catch (error) {
    console.log(
      '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Next.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'
    );
    console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    return false;
  }
}

async function main() {
  const serverRunning = await checkServerStatus();
  if (serverRunning) {
    await testFlashcardsAPIEndpoint();
  }
}

main();
