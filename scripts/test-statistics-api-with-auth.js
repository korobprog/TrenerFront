/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

async function testStatisticsAPIWithAuth() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô');
  console.log('=============================================');

  const prisma = new PrismaClient();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üë§ –ò—â–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const superAdmin = await prisma.user.findFirst({
      where: { role: 'superadmin' },
    });

    if (!superAdmin) {
      console.log('‚ùå –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', superAdmin.email);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
    console.log('\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é...');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –Ω–∞–ø—Ä—è–º—É—é
    const statisticsHandler =
      require('./pages/api/admin/statistics.js').default;

    // –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã req –∏ res
    const mockReq = {
      method: 'GET',
      admin: {
        id: superAdmin.id,
        email: superAdmin.email,
        role: superAdmin.role,
      },
    };

    const mockRes = {
      status: function (code) {
        this.statusCode = code;
        return this;
      },
      json: function (data) {
        this.responseData = data;
        return this;
      },
      statusCode: 200,
      responseData: null,
    };

    // –í—ã–∑—ã–≤–∞–µ–º handler
    await statisticsHandler(mockReq, mockRes);

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', mockRes.statusCode);
    console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:');
    console.log(JSON.stringify(mockRes.responseData, null, 2));

    if (mockRes.statusCode === 200 && mockRes.responseData) {
      const data = mockRes.responseData;

      console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
      console.log('================================');

      console.log('üî∏ –ï—Å—Ç—å –ª–∏ data.success?', 'success' in data);
      console.log('üî∏ –ï—Å—Ç—å –ª–∏ data.data?', 'data' in data);

      if (data.data) {
        console.log('üî∏ –ï—Å—Ç—å –ª–∏ data.data.users?', 'users' in data.data);
        console.log(
          'üî∏ –ï—Å—Ç—å –ª–∏ data.data.interviews?',
          'interviews' in data.data
        );
        console.log('üî∏ –ï—Å—Ç—å –ª–∏ data.data.points?', 'points' in data.data);
        console.log(
          'üî∏ –ï—Å—Ç—å –ª–∏ data.data.adminActivity?',
          'adminActivity' in data.data
        );

        if (data.data.users) {
          console.log('üî∏ data.data.users.total:', data.data.users.total);
        }
        if (data.data.interviews) {
          console.log('üî∏ data.data.interviews:', data.data.interviews);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      console.log('\nüéØ –ß–¢–û –û–ñ–ò–î–ê–ï–¢ –§–†–û–ù–¢–ï–ù–î:');
      console.log('================================');
      console.log('üî∏ data.summary.users.total');
      console.log('üî∏ data.summary.interviews.total');
      console.log('üî∏ data.summary.interviews.pending');
      console.log('üî∏ data.summary.interviews.booked');
      console.log('üî∏ data.summary.interviews.noShow');
      console.log('üî∏ data.recentLogs');

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      console.log('\nüí• –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–®–ò–ë–ö–ò –§–†–û–ù–¢–ï–ù–î–ê:');
      console.log('================================');
      try {
        // –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ pages/admin/index.js:34
        const usersCount = data.summary.users.total;
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ usersCount:', usersCount);
      } catch (error) {
        console.log(
          '‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê! –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å data.summary.users.total:'
        );
        console.log('   ', error.message);
        console.log('   –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);

        console.log('\nüîß –î–ò–ê–ì–ù–û–ó:');
        console.log('================================');
        console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: data.data.users.total');
        console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç: data.summary.users.total');
        console.log('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö!');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –î–†–£–ì–ò–• –ü–û–õ–ï–ô:');
      console.log('================================');

      try {
        const interviewsTotal = data.summary.interviews.total;
        console.log('‚úÖ data.summary.interviews.total:', interviewsTotal);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ data.summary.interviews.total:', error.message);
      }

      try {
        const recentLogs = data.recentLogs;
        console.log('‚úÖ data.recentLogs:', recentLogs);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ data.recentLogs:', error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testStatisticsAPIWithAuth();
