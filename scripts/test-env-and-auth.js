const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
async function testEnvironmentAndAuth() {
  console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');

    const requiredEnvVars = [
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL',
      'DATABASE_URL',
      'NODE_ENV',
    ];

    const optionalEnvVars = [
      'GOOGLE_CLIENT_ID',
      'GOOGLE_CLIENT_SECRET',
      'GITHUB_CLIENT_ID',
      'GITHUB_CLIENT_SECRET',
    ];

    let missingRequired = [];
    let missingOptional = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    requiredEnvVars.forEach((varName) => {
      const value = process.env[varName];
      if (!value) {
        missingRequired.push(varName);
        console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
      } else {
        console.log(
          `‚úÖ ${varName}: ${varName === 'NEXTAUTH_SECRET' ? '[–°–ö–†–´–¢–û]' : value}`
        );
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    console.log('\nüîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:');
    optionalEnvVars.forEach((varName) => {
      const value = process.env[varName];
      if (!value) {
        missingOptional.push(varName);
        console.log(`‚ö†Ô∏è ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
      } else {
        console.log(
          `‚úÖ ${varName}: ${varName.includes('SECRET') ? '[–°–ö–†–´–¢–û]' : value}`
        );
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:');

    try {
      await prisma.$connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await prisma.user.count();
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${userCount}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
      const questionCount = await prisma.question.count();
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: ${questionCount}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
      const validQuestionCount = await prisma.question.count({
        where: {
          AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
        },
      });
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${validQuestionCount}`);
    } catch (dbError) {
      console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê');
      console.log('   –î–µ—Ç–∞–ª–∏:', dbError.message);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê NEXTAUTH –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º authOptions
      const { authOptions } = require('../pages/api/auth/[...nextauth].js');

      console.log('‚úÖ NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${authOptions.providers.length}`);
      console.log(`‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–µ—Å—Å–∏–∏: ${authOptions.session.strategy}`);
      console.log(
        `‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏: ${authOptions.session.maxAge} —Å–µ–∫—É–Ω–¥`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      authOptions.providers.forEach((provider, index) => {
        console.log(
          `‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${index + 1}: ${provider.name || provider.id}`
        );
      });
    } catch (authError) {
      console.log('‚ùå NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –û–®–ò–ë–ö–ê');
      console.log('   –î–µ—Ç–∞–ª–∏:', authError.message);
    }

    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
    console.log('\nüîç –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö:');

    try {
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è req –∏ res
      const mockReq = {
        method: 'GET',
        query: {
          limit: '5',
          mode: 'study',
        },
      };

      const mockRes = {
        status: (code) => ({
          json: (data) => {
            console.log(`üì§ –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å ${code}`);
            if (code === 401) {
              console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            } else if (code === 200) {
              console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
              console.log(
                `‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${
                  data.questions?.length || 0
                }`
              );
            } else {
              console.log(`‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å: ${code}`);
            }
            return { status: code, data };
          },
        }),
      };

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API
      const flashcardsHandler =
        require('../pages/api/flashcards/questions.js').default;

      // –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ —Å–µ—Å—Å–∏–∏ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 401)
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      await flashcardsHandler(mockReq, mockRes);
    } catch (apiError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫:');
      console.log('   –î–µ—Ç–∞–ª–∏:', apiError.message);
    }

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');

    if (missingRequired.length > 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      missingRequired.forEach((varName) => {
        console.log(`   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    if (missingOptional.length > 0) {
      console.log('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      missingOptional.forEach((varName) => {
        console.log(`   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
      });
    }

    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (missingRequired.length > 0) {
      console.log(
        '1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.development —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
      );
      console.log('2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
    }

    if (
      process.env.NODE_ENV !== 'development' &&
      process.env.NODE_ENV !== 'production'
    ) {
      console.log('3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NODE_ENV –≤ development –∏–ª–∏ production');
    }

    console.log(
      '4. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
    );
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
    console.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testEnvironmentAndAuth().catch(console.error);
