const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['error', 'warn', 'info'],
});

async function checkUserStatus() {
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    const email = 'korobprog@gmail.com';
    console.log(`\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`);

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const user = await prisma.user.findUnique({
      where: {
        email: email,
      },
      include: {
        userPoints: true,
        apiSettings: true,
        authSettings: true,
        accounts: true,
        sessions: true,
        pointsTransactions: {
          take: 5,
          orderBy: {
            createdAt: 'desc',
          },
        },
        adminActions: {
          take: 5,
          orderBy: {
            createdAt: 'desc',
          },
        },
        violations: {
          where: {
            expiresAt: {
              gt: new Date(),
            },
          },
        },
      },
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log('\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:');
    console.log('='.repeat(50));

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`ID: ${user.id}`);
    console.log(`Email: ${user.email}`);
    console.log(`–ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`–†–æ–ª—å: ${user.role}`);
    console.log(`–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${user.isBlocked ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.emailVerified ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt.toLocaleString('ru-RU')}`);
    console.log(
      `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.updatedAt.toLocaleString('ru-RU')}`
    );
    console.log(
      `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${
        user.lastLoginAt ? user.lastLoginAt.toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'
      }`
    );
    console.log(`–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${user.conductedInterviewsCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê:');
    console.log('='.repeat(30));

    const isAdmin = user.role === 'admin' || user.role === 'superadmin';
    const isSuperAdmin = user.role === 'superadmin';

    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${isAdmin ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${isSuperAdmin ? '–î–ê' : '–ù–ï–¢'}`);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–ª–∞—Ö
    if (user.userPoints) {
      console.log('\nüí∞ –ë–ê–õ–õ–´:');
      console.log('='.repeat(20));
      console.log(`–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: ${user.userPoints.points}`);
      console.log(
        `–ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${user.userPoints.updatedAt.toLocaleString('ru-RU')}`
      );
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–ª–æ–≤
    if (user.pointsTransactions.length > 0) {
      console.log('\nüìà –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ë–ê–õ–õ–û–í:');
      console.log('='.repeat(40));
      user.pointsTransactions.forEach((transaction, index) => {
        console.log(
          `${index + 1}. ${transaction.amount > 0 ? '+' : ''}${
            transaction.amount
          } –±–∞–ª–ª–æ–≤`
        );
        console.log(`   –¢–∏–ø: ${transaction.type}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${transaction.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(
          `   –î–∞—Ç–∞: ${transaction.createdAt.toLocaleString('ru-RU')}`
        );
        console.log('');
      });
    }

    // –ê–∫–∫–∞—É–Ω—Ç—ã (OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)
    if (user.accounts.length > 0) {
      console.log('\nüîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:');
      console.log('='.repeat(35));
      user.accounts.forEach((account, index) => {
        console.log(`${index + 1}. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${account.provider}`);
        console.log(`   –¢–∏–ø: ${account.type}`);
        console.log(`   ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${account.providerAccountId}`);
        console.log('');
      });
    }

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const activeSessions = user.sessions.filter(
      (session) => session.expires > new Date()
    );
    console.log('\nüîÑ –°–ï–°–°–ò–ò:');
    console.log('='.repeat(20));
    console.log(`–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${user.sessions.length}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${activeSessions.length}`);

    // –ù–∞—Ä—É—à–µ–Ω–∏—è
    if (user.violations.length > 0) {
      console.log('\n‚ö†Ô∏è  –ê–ö–¢–ò–í–ù–´–ï –ù–ê–†–£–®–ï–ù–ò–Ø:');
      console.log('='.repeat(30));
      user.violations.forEach((violation, index) => {
        console.log(`${index + 1}. –¢–∏–ø: ${violation.type}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${violation.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(
          `   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${violation.expiresAt.toLocaleString('ru-RU')}`
        );
        console.log('');
      });
    } else {
      console.log('\n‚úÖ –ù–ê–†–£–®–ï–ù–ò–ô –ù–ï–¢');
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (user.adminActions.length > 0) {
      console.log('\nüë®‚Äçüíº –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:');
      console.log('='.repeat(45));
      user.adminActions.forEach((action, index) => {
        console.log(`${index + 1}. –î–µ–π—Å—Ç–≤–∏–µ: ${action.action}`);
        console.log(`   –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: ${action.entityType}`);
        console.log(`   ID —Å—É—â–Ω–æ—Å—Ç–∏: ${action.entityId}`);
        console.log(`   –î–∞—Ç–∞: ${action.createdAt.toLocaleString('ru-RU')}`);
        if (action.details) {
          console.log(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(action.details, null, 2)}`);
        }
        console.log('');
      });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    if (user.apiSettings) {
      console.log('\nüîß –ù–ê–°–¢–†–û–ô–ö–ò API:');
      console.log('='.repeat(25));
      console.log(
        `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π API: ${
          user.apiSettings.useCustomApi ? '–î–ê' : '–ù–ï–¢'
        }`
      );
      console.log(`–¢–∏–ø API: ${user.apiSettings.apiType}`);
      console.log(
        `–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ${user.apiSettings.selectedModel || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`
      );
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (user.authSettings) {
      console.log('\nüîê –ù–ê–°–¢–†–û–ô–ö–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:');
      console.log('='.repeat(40));
      console.log(
        `Email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
          user.authSettings.enableEmailAuth ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        }`
      );
      console.log(
        `Google –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
          user.authSettings.enableGoogleAuth ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        }`
      );
      console.log(
        `GitHub –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
          user.authSettings.enableGithubAuth ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        }`
      );
      console.log(
        `–õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å: ${
          user.authSettings.enableCredentialsAuth ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'
        }`
      );
      console.log(
        `–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${
          user.authSettings.requireTwoFactor ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        }`
      );
      console.log(
        `–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏: ${user.authSettings.sessionTimeout} —á–∞—Å–æ–≤`
      );
    }

    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–†–û–í–ï–†–ö–ï –°–¢–ê–¢–£–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.error('='.repeat(50));

    if (error.code === 'P1001') {
      console.error('üîå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('- –ó–∞–ø—É—â–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
      console.error('- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
      console.error('- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } else if (error.code === 'P1003') {
      console.error('üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.error('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma migrate deploy');
    } else if (error.code === 'P1008') {
      console.error('‚è±Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else if (error.code === 'P1017') {
      console.error('üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ DATABASE_URL');
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:');
      console.error(error.message);
      console.error('\n–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:');
      console.error(error);
    }
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUserStatus();
