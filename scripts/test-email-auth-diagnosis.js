const { PrismaClient } = require('@prisma/client');
const nodemailer = require('nodemailer');

const prisma = new PrismaClient();

async function testEmailAuthDiagnosis() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ email...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    const requiredEnvVars = [
      'YANDEX_SMTP_HOST',
      'YANDEX_SMTP_PORT',
      'YANDEX_SMTP_USER',
      'YANDEX_SMTP_PASSWORD',
      'YANDEX_EMAIL_FROM',
      'NEXTAUTH_URL',
      'NEXTAUTH_SECRET',
    ];

    let envVarsOk = true;
    requiredEnvVars.forEach((varName) => {
      const value = process.env[varName];
      if (value) {
        console.log(
          `   ‚úÖ ${varName}: ${
            varName.includes('PASSWORD') || varName.includes('SECRET')
              ? '***'
              : value
          }`
        );
      } else {
        console.log(`   ‚ùå ${varName}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        envVarsOk = false;
      }
    });

    if (!envVarsOk) {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É:');
    const transporter = nodemailer.createTransport({
      host: process.env.YANDEX_SMTP_HOST,
      port: parseInt(process.env.YANDEX_SMTP_PORT),
      secure: process.env.YANDEX_SMTP_SECURE === 'true',
      auth: {
        user: process.env.YANDEX_SMTP_USER,
        pass: process.env.YANDEX_SMTP_PASSWORD,
      },
    });

    try {
      await transporter.verify();
      console.log('   ‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É:', error.message);
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã NextAuth
    const tables = ['Account', 'Session', 'User', 'VerificationToken'];
    for (const table of tables) {
      try {
        const count = await prisma.$queryRaw`
          SELECT COUNT(*) as count FROM information_schema.tables 
          WHERE table_name = ${table}
        `;
        if (count[0].count > 0) {
          console.log(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          console.log(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error.message);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    try {
      const tokenCount = await prisma.verificationToken.count();
      console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${tokenCount}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã (–±–µ–∑ —Å–∞–º–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      const recentTokens = await prisma.verificationToken.findMany({
        take: 5,
        orderBy: { expires: 'desc' },
        select: {
          identifier: true,
          expires: true,
        },
      });

      if (recentTokens.length > 0) {
        console.log('   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã:');
        recentTokens.forEach((token) => {
          const isExpired = token.expires < new Date();
          console.log(
            `      - ${token.identifier}: ${
              isExpired ? '‚ùå –∏—Å—Ç—ë–∫' : '‚úÖ –∞–∫—Ç–∏–≤–µ–Ω'
            } (–¥–æ ${token.expires.toLocaleString()})`
          );
        });
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
    }

    // 5. –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email:');
    const testEmail = 'test@example.com';
    const testToken = 'test-token-' + Date.now();

    try {
      const mailOptions = {
        from: process.env.YANDEX_EMAIL_FROM,
        to: testEmail,
        subject: '–¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏',
        text: `–¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: ${
          process.env.NEXTAUTH_URL
        }/api/auth/callback/email?callbackUrl=${encodeURIComponent(
          process.env.NEXTAUTH_URL
        )}&token=${testToken}&email=${encodeURIComponent(testEmail)}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2>–¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏</h2>
            <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.</p>
            <a href="${
              process.env.NEXTAUTH_URL
            }/api/auth/callback/email?callbackUrl=${encodeURIComponent(
          process.env.NEXTAUTH_URL
        )}&token=${testToken}&email=${encodeURIComponent(testEmail)}" 
               style="background-color: #0070f3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </div>
        `,
      };

      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log('   ‚úÖ –ü–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   üìß –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${testEmail}`);
      console.log(`   üìù –¢–µ–º–∞: ${mailOptions.subject}`);
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Å—å–º–∞:', error.message);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ NextAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NextAuth API
    try {
      const response = await fetch(
        `${process.env.NEXTAUTH_URL}/api/auth/providers`
      );
      if (response.ok) {
        const providers = await response.json();
        console.log('   ‚úÖ NextAuth API –¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log(
          '   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:',
          Object.keys(providers).join(', ')
        );

        if (providers.email) {
          console.log('   ‚úÖ Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
          console.log('   ‚ùå Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log('   ‚ùå NextAuth API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.status);
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NextAuth API:', error.message);
    }

    console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log(
      '   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    );
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ SMTP —Å–µ—Ä–≤–µ—Ä –Ø–Ω–¥–µ–∫—Å–∞ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log(
      '   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã NextAuth'
    );
    console.log(
      '   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏'
    );
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
testEmailAuthDiagnosis().catch(console.error);
