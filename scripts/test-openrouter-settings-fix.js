const axios = require('axios');

/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 500 –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter API
 */
async function testOpenRouterSettingsFix() {
  console.log(
    'üß™ –¢–ï–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 500 –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter API'
  );
  console.log('='.repeat(80));

  const baseUrl = 'http://localhost:3000';

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ OpenRouter
  const testSettings = {
    maxQuestionsPerDay: 15,
    maxTokensPerQuestion: 5000,
    isActive: true,
    openRouterApiKey: 'sk-or-v1-test-key-12345', // –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    openRouterBaseUrl: 'https://openrouter.ai/api/v1',
    openRouterModel: 'google/gemma-3-12b-it:free',
    openRouterTemperature: 0.8,
    openRouterMaxTokens: 5000,
  };

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenRouter...');
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(testSettings, null, 2));

    const response = await axios.put(
      `${baseUrl}/api/test-settings-no-auth`,
      testSettings,
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      }
    );

    console.log('‚úÖ –£–°–ü–ï–•: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    console.log('–°—Ç–∞—Ç—É—Å:', response.status);
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    console.log('\nüì• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');

    const getResponse = await axios.get(
      `${baseUrl}/api/test-settings-no-auth`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 5000,
      }
    );

    console.log('‚úÖ –£–°–ü–ï–•: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
    console.log(
      '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
      JSON.stringify(getResponse.data.settings, null, 2)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    const settings = getResponse.data.settings;
    const checks = [
      { field: 'apiType', expected: 'openrouter', actual: settings.apiType },
      {
        field: 'openRouterApiKey',
        expected: testSettings.openRouterApiKey,
        actual: settings.openRouterApiKey,
      },
      {
        field: 'openRouterModel',
        expected: testSettings.openRouterModel,
        actual: settings.openRouterModel,
      },
      {
        field: 'maxQuestionsPerDay',
        expected: testSettings.maxQuestionsPerDay,
        actual: settings.maxQuestionsPerDay,
      },
      {
        field: 'maxTokensPerQuestion',
        expected: testSettings.maxTokensPerQuestion,
        actual: settings.maxTokensPerQuestion,
      },
    ];

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    let allChecksPass = true;

    checks.forEach((check) => {
      const isValid = check.actual === check.expected;
      console.log(
        `  ${isValid ? '‚úÖ' : '‚ùå'} ${check.field}: ${check.actual} ${
          isValid ? '==' : '!='
        } ${check.expected}`
      );
      if (!isValid) allChecksPass = false;
    });

    if (allChecksPass) {
      console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –û—à–∏–±–∫–∞ 500 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    } else {
      console.log(
        '\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ –æ—à–∏–±–∫–∞ 500 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.'
      );
    }
  } catch (error) {
    if (error.response) {
      console.log('‚ùå –û–®–ò–ë–ö–ê HTTP:', error.response.status);
      console.log(
        '–°–æ–æ–±—â–µ–Ω–∏–µ:',
        error.response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.response.data?.code || '–ù–µ —É–∫–∞–∑–∞–Ω');
      console.log(
        '–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:',
        JSON.stringify(error.response.data, null, 2)
      );

      if (error.response.status === 500) {
        console.log('\nüí• –û–®–ò–ë–ö–ê 500 –í–°–ï –ï–©–ï –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢!');
        console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...');
      }
    } else if (error.request) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', baseUrl);
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testOpenRouterSettingsFix()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = { testOpenRouterSettingsFix };
