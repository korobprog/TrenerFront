const http = require('http');

console.log('=== –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò –°–ï–¢–ï–í–´–• –ó–ê–ü–†–û–°–û–í ===');

function testEndpoint(url, description) {
  return new Promise((resolve) => {
    console.log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${description}`);
    console.log(`üîó URL: ${url}`);

    const req = http.get(url, (res) => {
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.keys(res.headers));

      let data = '';
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log(`‚úÖ ${description} - —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } else {
          console.log(`‚ùå ${description} - –æ—à–∏–±–∫–∞ ${res.statusCode}`);
          if (data) {
            console.log(`üìÑ –û—Ç–≤–µ—Ç: ${data.substring(0, 200)}...`);
          }
        }
        resolve();
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå ${description} - —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      resolve();
    });

    req.setTimeout(5000, () => {
      console.log(`‚è∞ ${description} - —Ç–∞–π–º–∞—É—Ç`);
      req.destroy();
      resolve();
    });
  });
}

async function runTests() {
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  await testEndpoint('http://localhost:3000', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
  await testEndpoint(
    'http://localhost:3000/api/flashcards/questions',
    'API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)'
  );
  await testEndpoint(
    'http://localhost:3000/flashcards',
    '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫'
  );

  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envVars = [
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL',
    'DATABASE_URL',
    'NODE_ENV',
  ];

  envVars.forEach((varName) => {
    const value = process.env[varName];
    if (value) {
      console.log(`‚úÖ ${varName}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${value.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    } else {
      console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
    }
  });

  console.log('\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–û–í ===');
}

runTests().catch(console.error);
