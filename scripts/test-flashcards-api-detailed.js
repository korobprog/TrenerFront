const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');

const prisma = new PrismaClient();

async function testFlashcardsAPI() {
  console.log('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const questionCount = await prisma.question.count();
    console.log(
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}`
    );

    if (questionCount === 0) {
      console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤...');
    const sampleQuestions = await prisma.question.findMany({
      take: 5,
      select: {
        id: true,
        text: true,
        question: true, // –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
        topic: true,
        difficulty: true,
        answer: true,
        createdAt: true,
      },
    });

    console.log('–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î:');
    sampleQuestions.forEach((q, index) => {
      console.log(`  ${index + 1}. ID: ${q.id}`);
      console.log(`     text: "${q.text?.substring(0, 50)}..."`);
      console.log(`     question: "${q.question?.substring(0, 50)}..."`);
      console.log(`     topic: ${q.topic || 'null'}`);
      console.log(`     difficulty: ${q.difficulty || 'null'}`);
      console.log(`     hasAnswer: ${!!q.answer}`);
      console.log('');
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã...');
    const emptyTextCount = await prisma.question.count({
      where: {
        OR: [{ text: null }, { text: '' }, { text: { equals: '' } }],
      },
    });
    console.log(`–í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º text: ${emptyTextCount}`);

    const emptyQuestionCount = await prisma.question.count({
      where: {
        OR: [
          { question: null },
          { question: '' },
          { question: { equals: '' } },
        ],
      },
    });
    console.log(`–í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º question: ${emptyQuestionCount}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
    const topicCounts = await prisma.question.groupBy({
      by: ['topic'],
      _count: {
        id: true,
      },
    });
    console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º:');
    topicCounts.forEach((t) => {
      console.log(`  ${t.topic || 'null'}: ${t._count.id} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    });

    const difficultyCounts = await prisma.question.groupBy({
      by: ['difficulty'],
      _count: {
        id: true,
      },
    });
    console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:');
    difficultyCounts.forEach((d) => {
      console.log(`  ${d.difficulty || 'null'}: ${d._count.id} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    });

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ API
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤ API...');
    const whereConditions = {
      text: {
        not: {
          in: [null, ''],
        },
      },
    };

    console.log('WHERE —É—Å–ª–æ–≤–∏—è:', JSON.stringify(whereConditions, null, 2));

    const apiStyleQuestions = await prisma.question.findMany({
      where: whereConditions,
      orderBy: { createdAt: 'desc' },
      take: 10,
      include: {
        userProgress: {
          where: {
            userId: 'test-user-id', // —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
          },
          orderBy: {
            lastReviewed: 'desc',
          },
          take: 1,
        },
        favoriteQuestions: {
          where: {
            userId: 'test-user-id', // —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
          },
        },
      },
    });

    console.log(
      `–†–µ–∑—É–ª—å—Ç–∞—Ç API-—Å—Ç–∏–ª—å –∑–∞–ø—Ä–æ—Å–∞: ${apiStyleQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`
    );

    if (apiStyleQuestions.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
      apiStyleQuestions.slice(0, 3).forEach((q, index) => {
        console.log(
          `  ${index + 1}. ID: ${q.id}, text: "${q.text?.substring(0, 50)}..."`
        );
      });
    } else {
      console.log('‚ùå API-—Å—Ç–∏–ª—å –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...');
      const allQuestions = await prisma.question.findMany({
        take: 5,
        select: {
          id: true,
          text: true,
          question: true,
        },
      });

      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º:');
      allQuestions.forEach((q) => {
        const textValid = q.text && q.text.trim() !== '';
        const questionValid = q.question && q.question.trim() !== '';
        console.log(
          `  ID ${q.id}: text="${q.text}" (valid: ${textValid}), question="${q.question}" (valid: ${questionValid})`
        );
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    const userProgressCount = await prisma.userProgress.count();
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ UserProgress: ${userProgressCount}`);

    const favoriteQuestionsCount = await prisma.userFavoriteQuestion.count();
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ UserFavoriteQuestion: ${favoriteQuestionsCount}`);

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

testFlashcardsAPI();
