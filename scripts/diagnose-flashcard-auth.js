const { getServerSession } = require('next-auth/next');
const { authOptions } = require('../pages/api/auth/[...nextauth]');

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API —Ñ–ª–µ—à–∫–∞—Ä—Ç
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

// –°–∏–º—É–ª—è—Ü–∏—è req –∏ res –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createMockRequest(headers = {}, cookies = {}) {
  return {
    headers: {
      'user-agent': 'Mozilla/5.0 (Test Browser)',
      accept: 'application/json',
      ...headers,
    },
    cookies: {
      ...cookies,
    },
    method: 'GET',
    url: '/api/flashcards/questions',
  };
}

function createMockResponse() {
  const res = {
    status: function (code) {
      this.statusCode = code;
      return this;
    },
    json: function (data) {
      this.responseData = data;
      return this;
    },
    setHeader: function (name, value) {
      this.headers = this.headers || {};
      this.headers[name] = value;
      return this;
    },
    getHeader: function (name) {
      return this.headers?.[name];
    },
    headers: {},
  };
  return res;
}

async function diagnoseFlashcardAuth() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–õ–ï–®–ö–ê–†–¢ ===');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Å–µ—Å—Å–∏–∏
    console.log('\nüîç –¢–ï–°–¢ 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Å–µ—Å—Å–∏–∏');
    const req1 = createMockRequest();
    const res1 = createMockResponse();

    const session1 = await getServerSession(req1, res1, authOptions);
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç getServerSession:', session1);
    console.log('   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: null (–Ω–µ—Ç —Å–µ—Å—Å–∏–∏)');

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ cookies
    console.log('\nüîç –¢–ï–°–¢ 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ cookies');
    const req2 = createMockRequest(
      {},
      {
        'next-auth.session-token': 'invalid-token',
        'next-auth.csrf-token': 'invalid-csrf',
      }
    );
    const res2 = createMockResponse();

    const session2 = await getServerSession(req2, res2, authOptions);
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç getServerSession:', session2);
    console.log('   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: null (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è)');

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NextAuth
    console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NextAuth');
    console.log(
      '   authOptions.session.strategy:',
      authOptions.session?.strategy
    );
    console.log('   authOptions.secret —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!authOptions.secret);
    console.log(
      '   authOptions.providers –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:',
      authOptions.providers?.length
    );
    console.log('   authOptions.adapter —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!authOptions.adapter);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log(
      '   NEXTAUTH_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:',
      !!process.env.NEXTAUTH_SECRET
    );
    console.log('   NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    console.log('   NODE_ENV:', process.env.NODE_ENV);

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    console.log('\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤');
    console.log('   getServerSession –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof getServerSession);
    console.log('   authOptions –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof authOptions);

    // –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    console.log('\nüîç –¢–ï–°–¢ 6: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Ñ–ª–µ—à–∫–∞—Ä—Ç');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –∏–∑ API
    const flashcardHandler =
      require('../pages/api/flashcards/questions').default;

    const req6 = createMockRequest({}, {});
    const res6 = createMockResponse();

    // –î–æ–±–∞–≤–ª—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    req6.query = {};

    console.log('   –í—ã–∑—ã–≤–∞–µ–º handler...');
    await flashcardHandler(req6, res6);

    console.log('   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res6.statusCode);
    console.log('   –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', res6.responseData);

    if (res6.statusCode === 401) {
      console.log(
        '   ‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'
      );
    } else {
      console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  }

  console.log('\n=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseFlashcardAuth().catch(console.error);
