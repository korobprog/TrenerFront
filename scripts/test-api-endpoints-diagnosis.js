#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ mock-interviews
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ API
 */

const http = require('http');
const https = require('https');

const BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.request(
      url,
      {
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'API-Diagnosis-Script',
          ...options.headers,
        },
      },
      (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          resolve({
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            body: data,
            contentType: res.headers['content-type'] || 'unknown',
          });
        });
      }
    );

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞
function analyzeResponse(response, endpoint) {
  console.log(`\n=== –ê–ù–ê–õ–ò–ó –≠–ù–î–ü–û–ò–ù–¢–ê: ${endpoint} ===`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
  console.log(`Content-Type: ${response.contentType}`);
  console.log(`–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${response.body.length} –±–∞–π—Ç`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç HTML
  const isHTML =
    response.body.trim().startsWith('<!DOCTYPE') ||
    response.body.trim().startsWith('<html') ||
    response.contentType.includes('text/html');

  if (isHTML) {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –≤–º–µ—Å—Ç–æ JSON!');
    console.log('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:');
    console.log(response.body.substring(0, 200) + '...');

    // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ Next.js –æ—à–∏–±–∫–∏
    if (
      response.body.includes('404') ||
      response.body.includes('This page could not be found')
    ) {
      console.log('üîç –î–ò–ê–ì–ù–û–ó: 404 - –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (
      response.body.includes('500') ||
      response.body.includes('Internal Server Error')
    ) {
      console.log('üîç –î–ò–ê–ì–ù–û–ó: 500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    } else if (
      response.body.includes('_next') ||
      response.body.includes('__NEXT_DATA__')
    ) {
      console.log(
        'üîç –î–ò–ê–ì–ù–û–ó: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è Next.js —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–º–µ—Å—Ç–æ API –æ—Ç–≤–µ—Ç–∞'
      );
    }
  } else {
    try {
      const jsonData = JSON.parse(response.body);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
      console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(jsonData));
    } catch (e) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
      console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e.message);
      console.log('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:');
      console.log(response.body.substring(0, 200) + '...');
    }
  }

  return isHTML;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnosis() {
  console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ API –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('='.repeat(50));

  const endpoints = [
    '/api/mock-interviews',
    '/api/mock-interviews?status=active',
    '/api/user/points',
    '/api/auth/session', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
  ];

  let htmlResponses = 0;
  let totalEndpoints = endpoints.length;

  for (const endpoint of endpoints) {
    try {
      const url = `${BASE_URL}${endpoint}`;
      console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);

      const response = await makeRequest(url);
      const isHTML = analyzeResponse(response, endpoint);

      if (isHTML) {
        htmlResponses++;
      }
    } catch (error) {
      console.log(`\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${endpoint}:`);
      console.log(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${error.code || error.name}`);
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);

      if (error.code === 'ECONNREFUSED') {
        console.log(
          'üîç –î–ò–ê–ì–ù–û–ó: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'
        );
      }
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${totalEndpoints}`);
  console.log(`–≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö HTML: ${htmlResponses}`);

  if (htmlResponses > 0) {
    console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê:');
    console.log(
      `${htmlResponses} –∏–∑ ${totalEndpoints} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç HTML –≤–º–µ—Å—Ç–æ JSON`
    );
    console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('1. API –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ Next.js');
    console.log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π Next.js');
    console.log('3. Middleware –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã');
    console.log('4. –û—à–∏–±–∫–∏ –≤ —Å–∞–º–∏—Ö API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö');
    console.log('5. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞)');
  } else {
    console.log('\n‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  try {
    const mainPageResponse = await makeRequest(`${BASE_URL}/`);
    console.log(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (${BASE_URL}/): ${mainPageResponse.status}`);
  } catch (error) {
    console.log(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã mock-interviews
  try {
    const mockInterviewsPageResponse = await makeRequest(
      `${BASE_URL}/mock-interviews`
    );
    console.log(
      `–°—Ç—Ä–∞–Ω–∏—Ü–∞ mock-interviews: ${mockInterviewsPageResponse.status}`
    );
  } catch (error) {
    console.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ mock-interviews –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runDiagnosis().catch(console.error);
