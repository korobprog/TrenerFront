const http = require('http');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è middleware superAdminAuth...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data,
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.end();
  });
}

async function testStatisticsEndpoint() {
  try {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint /api/admin/statistics...');

    const response = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/admin/statistics',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('üìä Status Code:', response.statusCode);
    console.log('üìÑ Response Body:', response.body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∞ –Ω–µ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if (response.statusCode === 401) {
      console.log(
        '‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 Unauthorized'
      );
      try {
        const jsonResponse = JSON.parse(response.body);
        if (jsonResponse.message) {
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', jsonResponse.message);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
      }
    } else if (response.statusCode === 500) {
      console.log(
        '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 500 - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      );
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.body);
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥:', response.statusCode);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);

    if (error.message === 'Request timeout') {
      console.log('‚è∞ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–∏—Å - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ middleware –∏–ª–∏ API');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testStatisticsEndpoint();
