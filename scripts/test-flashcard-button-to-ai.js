/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç" –∫ –ò–ò
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí API —Ñ–ª–µ—à–∫–∞—Ä—Ç ‚Üí OpenRouter ‚Üí –æ—Ç–≤–µ—Ç
 */

const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');
const prisma = new PrismaClient();

async function testFlashcardButtonToAI() {
  console.log('=== –¢–ï–°–¢ –¶–ï–ü–û–ß–ö–ò: –ö–ù–û–ü–ö–ê ‚Üí API ‚Üí OPENROUTER ‚Üí –û–¢–í–ï–¢ ===');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîç –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const testUser = await prisma.user.findFirst({
      where: {
        OR: [{ email: { contains: 'test' } }, { email: { contains: 'admin' } }],
      },
    });

    if (!testUser) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(
      `‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email} (ID: ${testUser.id})`
    );

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüîç –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    const testQuestion = await prisma.question.findFirst({
      where: {
        AND: [{ text: { not: null } }, { text: { not: { equals: '' } } }],
      },
    });

    if (!testQuestion) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: ID ${testQuestion.id}`);
    console.log(`   –¢–µ–∫—Å—Ç: ${testQuestion.text?.substring(0, 100)}...`);
    console.log(`   –¢–µ–º–∞: ${testQuestion.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${testQuestion.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API –º–æ–¥—É–ª—å –Ω–∞–ø—Ä—è–º—É—é
    console.log('\nüîç –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenRouter API –º–æ–¥—É–ª—è');
    try {
      const openRouterModule = require('../lib/utils/openRouterApi');
      console.log('‚úÖ OpenRouter –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getApiSettings...');
      const settings = await openRouterModule.getApiSettings(testUser.id);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', {
        hasApiKey: !!settings.apiKey,
        baseUrl: settings.baseUrl,
        model: settings.model,
        isActive: settings.isActive,
      });

      if (!settings.apiKey) {
        console.log('‚ùå API –∫–ª—é—á OpenRouter –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ OpenRouter –º–æ–¥—É–ª–µ:', error.message);
      return;
    }

    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Ñ–ª–µ—à–∫–∞—Ä—Ç (–±–µ–∑ HTTP)
    console.log('\nüîç –≠–¢–ê–ü 4: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –Ω–∞–ø—Ä—è–º—É—é
      const generateAnswerHandler = require('../pages/api/flashcards/generate-answer');

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã req –∏ res
      const mockReq = {
        method: 'POST',
        body: {
          questionId: testQuestion.id,
          questionText: testQuestion.text,
          context: {
            topic: testQuestion.topic,
            difficulty: testQuestion.difficulty,
            tags: testQuestion.tags || [],
          },
        },
        headers: {
          'content-type': 'application/json',
        },
      };

      const mockRes = {
        status: function (code) {
          this.statusCode = code;
          return this;
        },
        json: function (data) {
          this.responseData = data;
          return this;
        },
        statusCode: 200,
        responseData: null,
      };

      console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...');
      console.log('   –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ª–æ–≥–∏–∫–∞ –±–µ–∑ HTTP —Å–ª–æ—è');

      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–µ—Å—Å–∏–∏ NextAuth
      console.log('‚ÑπÔ∏è –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç NextAuth —Å–µ—Å—Å–∏—é');
      console.log('‚ÑπÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ HTTP —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ API:', error.message);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    console.log('\nüîç –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API');
    try {
      const testPayload = {
        questionId: testQuestion.id,
        questionText: testQuestion.text,
        context: {
          topic: testQuestion.topic,
          difficulty: testQuestion.difficulty,
          tags: testQuestion.tags || [],
        },
      };

      console.log('üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API...');
      console.log(
        '   URL: http://localhost:3000/api/flashcards/generate-answer'
      );
      console.log('   Payload:', JSON.stringify(testPayload, null, 2));

      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('‚ÑπÔ∏è HTTP –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
      console.log(
        '‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ Postman'
      );
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é
    console.log('\nüîç –≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const recentQA = await prisma.interviewAssistantQA.findMany({
      where: {
        category: 'flashcard',
        userId: testUser.id,
      },
      take: 3,
      orderBy: { createdAt: 'desc' },
    });

    console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ Q&A –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${recentQA.length}`);
    if (recentQA.length > 0) {
      recentQA.forEach((qa, index) => {
        console.log(
          `  ${index + 1}. –í–æ–ø—Ä–æ—Å: ${qa.question?.substring(0, 50)}...`
        );
        console.log(
          `     –û—Ç–≤–µ—Ç: ${qa.answer ? '–ï—Å—Ç—å' : '–ù–µ—Ç'} (${
            qa.answer?.length || 0
          } —Å–∏–º–≤–æ–ª–æ–≤)`
        );
        console.log(`     –î–∞—Ç–∞: ${qa.createdAt}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API
    const recentUsage = await prisma.interviewAssistantUsage.findMany({
      where: { userId: testUser.id },
      take: 3,
      orderBy: { date: 'desc' },
    });

    console.log(`üìä –ó–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: ${recentUsage.length}`);
    if (recentUsage.length > 0) {
      recentUsage.forEach((usage, index) => {
        console.log(`  ${index + 1}. –î–∞—Ç–∞: ${usage.date}`);
        console.log(`     –í–æ–ø—Ä–æ—Å–æ–≤: ${usage.questionsCount}`);
        console.log(`     –¢–æ–∫–µ–Ω–æ–≤: ${usage.tokensUsed}`);
      });
    }

    // 7. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –í –¶–ï–ü–û–ß–ö–ï –ó–ê–ü–†–û–°–û–í:');

    const issues = [];
    const recommendations = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤ FlashcardItem
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...');
    const fs = require('fs');
    const flashcardItemPath = 'components/flashcards/FlashcardItem.js';

    if (fs.existsSync(flashcardItemPath)) {
      const flashcardContent = fs.readFileSync(flashcardItemPath, 'utf8');

      if (flashcardContent.includes('–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç')) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç" –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ');

        if (flashcardContent.includes('// –¢—Ä–∏–≥–≥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞')) {
          issues.push(
            '‚ùå –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç" –Ω–µ –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è'
          );
          recommendations.push(
            '–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onClick –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç"'
          );
        } else {
          console.log('‚úÖ –£ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è');
        }
      } else {
        issues.push('‚ùå –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    const apiPath = 'pages/api/flashcards/generate-answer.js';
    if (fs.existsSync(apiPath)) {
      console.log('‚úÖ API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      issues.push('‚ùå API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenRouter –º–æ–¥—É–ª—å
    const openRouterPath = 'lib/utils/openRouterApi.js';
    if (fs.existsSync(openRouterPath)) {
      console.log('‚úÖ OpenRouter API –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      issues.push('‚ùå OpenRouter API –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (recentQA.length === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä');
    }

    if (recentUsage.length === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API');
    }

    console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    if (issues.length === 0) {
      console.log('‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Ü–µ–ø–æ—á–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      issues.forEach((issue) => console.log(`   ${issue}`));
    }

    if (recommendations.length > 0) {
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      recommendations.forEach((rec) => console.log(`   ${rec}`));
    }

    console.log('\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
    console.log('   2. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('   3. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    console.log('   4. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç"');
    console.log('   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏');
    console.log('   6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Network tab –≤ DevTools');
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
  }

  console.log('\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ü–û–ß–ö–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testFlashcardButtonToAI().catch(console.error);
