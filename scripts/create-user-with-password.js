/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏
 */

const { PrismaClient } = require('@prisma/client');
const {
  createUserWithPassword,
  createSuperAdmin,
  createAdmin,
} = require('../lib/utils/userManagement');
const readline = require('readline');

const prisma = new PrismaClient();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function createUser() {
  try {
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('===============================\n');

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log('1. –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user)');
    console.log('2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin)');
    console.log('3. –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (superadmin)');

    const userType = await askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ');

    let role = 'user';
    switch (userType) {
      case '1':
        role = 'user';
        break;
      case '2':
        role = 'admin';
        break;
      case '3':
        role = 'superadmin';
        break;
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–æ–ª—å "user" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        role = 'user';
    }

    // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const email = await askQuestion('Email: ');
    if (!email) {
      console.log('‚ùå Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      return;
    }

    const name = await askQuestion('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');
    if (!name) {
      console.log('‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    console.log('\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:');
    console.log('- –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª');

    const password = await askQuestion('\n–ü–∞—Ä–æ–ª—å: ');
    if (!password) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      return;
    }

    const confirmPassword = await askQuestion('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
    if (password !== confirmPassword) {
      console.log('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    let user;
    const userData = { email, password, name };

    switch (role) {
      case 'superadmin':
        user = await createSuperAdmin(userData);
        break;
      case 'admin':
        user = await createAdmin(userData);
        break;
      default:
        user = await createUserWithPassword({ ...userData, role });
    }

    console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   –ò–º—è: ${user.name}`);
    console.log(`   –†–æ–ª—å: ${user.role}`);
    console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt}`);

    console.log('\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è:');
    console.log(`   Email: ${user.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: [–≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å]`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);

    if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      console.log('\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π email –∞–¥—Ä–µ—Å');
    } else if (error.message.includes('—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º')) {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º');
    }
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

async function listUsers() {
  try {
    console.log('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('=======================\n');

    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isBlocked: true,
        createdAt: true,
        lastLoginAt: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (users.length === 0) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.email})`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –†–æ–ª—å: ${user.role}`);
      console.log(
        `   –°—Ç–∞—Ç—É—Å: ${user.isBlocked ? 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}`
      );
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}`);
      console.log(
        `   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${
          user.lastLoginAt
            ? user.lastLoginAt.toLocaleString('ru-RU')
            : '–ù–∏–∫–æ–≥–¥–∞'
        }`
      );
      console.log('');
    });

    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  } catch (error) {
    console.error(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
      error.message
    );
  } finally {
    await prisma.$disconnect();
  }
}

async function main() {
  const args = process.argv.slice(2);

  if (args.includes('--list') || args.includes('-l')) {
    await listUsers();
    return;
  }

  if (args.includes('--help') || args.includes('-h')) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log(
      '  node scripts/create-user-with-password.js          - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    );
    console.log(
      '  node scripts/create-user-with-password.js --list   - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    );
    console.log(
      '  node scripts/create-user-with-password.js --help   - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
    );
    return;
  }

  await createUser();
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { createUser, listUsers };
