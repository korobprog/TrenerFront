/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 500
 * –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter API
 */

const https = require('https');
const http = require('http');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è OpenRouter
const testData = {
  maxQuestionsPerDay: 10,
  maxTokensPerQuestion: 4000,
  isActive: true,
  openRouterApiKey:
    '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',
  openRouterBaseUrl: 'https://openrouter.ai/api/v1',
  openRouterModel: 'google/gemma-3-12b-it:free',
  openRouterTemperature: 0.7,
  openRouterMaxTokens: 4000,
};

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter');
console.log(
  'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:',
  JSON.stringify(testData, null, 2)
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data) {
  return new Promise((resolve, reject) => {
    const protocol = options.port === 443 ? https : http;

    const req = protocol.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function diagnoseOpenRouterSettings() {
  try {
    console.log('\nüìã –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º GET –∑–∞–ø—Ä–æ—Å (–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    const getOptions = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/admin/interview-assistant-settings',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Cookie: 'next-auth.session-token=test-session', // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      },
    };

    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å...');
    try {
      const getResponse = await makeRequest(getOptions);
      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
      console.log('üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥:', getResponse.statusCode);
      console.log('üìä –û—Ç–≤–µ—Ç:', JSON.stringify(getResponse.data, null, 2));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    console.log('\nüìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PUT –∑–∞–ø—Ä–æ—Å–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PUT –∑–∞–ø—Ä–æ—Å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    const putOptions = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/admin/interview-assistant-settings',
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Cookie: 'next-auth.session-token=test-session', // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      },
    };

    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–ø–æ–ª–Ω—è–µ–º PUT –∑–∞–ø—Ä–æ—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    try {
      const putResponse = await makeRequest(putOptions, testData);
      console.log('üìä PUT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
      console.log('üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥:', putResponse.statusCode);
      console.log('üìä –û—Ç–≤–µ—Ç:', JSON.stringify(putResponse.data, null, 2));

      if (putResponse.statusCode === 500) {
        console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê 500!');
        console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', putResponse.data);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    console.log('\nüìã –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationTests = [
      {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterApiKey',
        data: { ...testData, openRouterApiKey: undefined },
      },
      {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç openRouterModel',
        data: { ...testData, openRouterModel: undefined },
      },
      {
        name: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π openRouterTemperature',
        data: { ...testData, openRouterTemperature: 'invalid' },
      },
      {
        name: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π openRouterMaxTokens',
        data: { ...testData, openRouterMaxTokens: 'invalid' },
      },
    ];

    for (const test of validationTests) {
      console.log(`\nüß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${test.name}`);
      try {
        const response = await makeRequest(putOptions, test.data);
        console.log('üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥:', response.statusCode);
        console.log('üìä –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
      }
    }
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  console.log('\nüìã –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã InterviewAssistantSettings
    console.log(
      'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É InterviewAssistantSettings...'
    );
    const settingsCount = await prisma.interviewAssistantSettings.count();
    console.log(
      'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ InterviewAssistantSettings:',
      settingsCount
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
    const existingSettings =
      await prisma.interviewAssistantSettings.findFirst();
    if (existingSettings) {
      console.log(
        'üìä –ü—Ä–∏–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:',
        JSON.stringify(existingSettings, null, 2)
      );
    } else {
      console.log('üìä –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
    }

    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
function validateDataStructure() {
  console.log('\nüìã –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö');

  const requiredFields = [
    'maxQuestionsPerDay',
    'maxTokensPerQuestion',
    'isActive',
    'openRouterApiKey',
    'openRouterBaseUrl',
    'openRouterModel',
    'openRouterTemperature',
    'openRouterMaxTokens',
  ];

  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π...');

  const missingFields = requiredFields.filter((field) => !(field in testData));
  if (missingFields.length > 0) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:', missingFields);
  } else {
    console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }

  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö...');

  const typeChecks = [
    {
      field: 'maxQuestionsPerDay',
      expected: 'number',
      actual: typeof testData.maxQuestionsPerDay,
    },
    {
      field: 'maxTokensPerQuestion',
      expected: 'number',
      actual: typeof testData.maxTokensPerQuestion,
    },
    {
      field: 'isActive',
      expected: 'boolean',
      actual: typeof testData.isActive,
    },
    {
      field: 'openRouterApiKey',
      expected: 'string',
      actual: typeof testData.openRouterApiKey,
    },
    {
      field: 'openRouterTemperature',
      expected: 'number',
      actual: typeof testData.openRouterTemperature,
    },
    {
      field: 'openRouterMaxTokens',
      expected: 'number',
      actual: typeof testData.openRouterMaxTokens,
    },
  ];

  typeChecks.forEach((check) => {
    if (check.expected === check.actual) {
      console.log(
        `‚úÖ ${check.field}: ${check.actual} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ${check.expected})`
      );
    } else {
      console.log(
        `‚ùå ${check.field}: ${check.actual} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ${check.expected})`
      );
    }
  });
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnosis() {
  console.log(
    'üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –û–®–ò–ë–ö–ò 500 –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò –ù–ê–°–¢–†–û–ï–ö OPENROUTER'
  );
  console.log('='.repeat(80));

  validateDataStructure();
  await checkDatabaseConnection();
  await diagnoseOpenRouterSettings();

  console.log('\n' + '='.repeat(80));
  console.log('üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è OpenRouter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runDiagnosis().catch(console.error);
