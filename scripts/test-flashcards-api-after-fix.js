const fetch = require('node-fetch');

async function testFlashcardsAPIAfterFix() {
  try {
    console.log('=== –¢–ï–°–¢ API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/flashcards/questions...');

    const response = await fetch(
      'http://localhost:3000/api/flashcards/questions?limit=5',
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          'User-Agent': 'Test-Script/1.0',
        },
      }
    );

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    console.log(
      `üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`,
      Object.fromEntries(response.headers.entries())
    );

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${data.questions?.length || 0}`);
      console.log(`üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ${data.totalAvailable || 0}`);
      console.log(`üîß –†–µ–∂–∏–º: ${data.mode || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`üîß –§–∏–ª—å—Ç—Ä—ã:`, data.filters || {});

      if (data.questions && data.questions.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞:');
        data.questions.slice(0, 2).forEach((q, i) => {
          console.log(`  ${i + 1}. ID: ${q.id}`);
          console.log(`     –¢–µ–∫—Å—Ç: ${q.questionText?.substring(0, 80)}...`);
          console.log(`     –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
          console.log(`     –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        });
      }
    } else {
      const errorText = await response.text();
      console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:');
      console.error(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.error(`   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${errorText}`);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
      try {
        const errorJson = JSON.parse(errorText);
        console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${errorJson.message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.error(`   –î–µ—Ç–∞–ª–∏: ${errorJson.error || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
      } catch (parseError) {
        console.error(`   –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏`);
      }
    }

    console.log('=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);

    if (error.code === 'ECONNREFUSED') {
      console.error('   –ü—Ä–∏—á–∏–Ω–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
      console.error('   –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π npm run dev');
    } else if (error.code === 'ENOTFOUND') {
      console.error('   –ü—Ä–∏—á–∏–Ω–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Å—Ç localhost');
      console.error('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
  }
}

testFlashcardsAPIAfterFix();
