/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const { PrismaClient } = require('@prisma/client');
const { hashPassword } = require('../lib/utils/passwordUtils');
const readline = require('readline');

const prisma = new PrismaClient();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function migrateSuperAdminPassword() {
  try {
    console.log('üîê –ú–∏–≥—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('=====================================\n');

    // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const superAdmin = await prisma.user.findFirst({
      where: { role: 'superadmin' },
    });

    if (!superAdmin) {
      console.log('‚ùå –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç create-superadmin.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      );
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:');
    console.log(`   ID: ${superAdmin.id}`);
    console.log(`   Email: ${superAdmin.email}`);
    console.log(`   –ò–º—è: ${superAdmin.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(
      `   –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${superAdmin.password ? '–î–∞' : '–ù–µ—Ç'}\n`
    );

    if (superAdmin.password) {
      const confirm = await askQuestion(
        '–ü–∞—Ä–æ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å? (y/N): '
      );
      if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
        console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      }
    }

    // –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    console.log('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    console.log('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:');
    console.log('- –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞');
    console.log('- –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª\n');

    const newPassword = await askQuestion('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ');

    if (!newPassword) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    const { validatePassword } = require('../lib/utils/passwordUtils');
    const validation = validatePassword(newPassword);

    if (!validation.isValid) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:');
      validation.errors.forEach((error) => console.log(`   - ${error}`));
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const confirmPassword = await askQuestion('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');

    if (newPassword !== confirmPassword) {
      console.log('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    console.log('\nüîÑ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    const hashedPassword = await hashPassword(newPassword);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.user.update({
      where: { id: superAdmin.id },
      data: {
        password: hashedPassword,
        updatedAt: new Date(),
      },
    });

    console.log('\n‚úÖ –ü–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è:');
    console.log(`   Email: ${superAdmin.email}`);
    console.log(`   –õ–æ–≥–∏–Ω: admin –∏–ª–∏ superadmin`);
    console.log(`   –ü–∞—Ä–æ–ª—å: [–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å]`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  migrateSuperAdminPassword();
}

module.exports = { migrateSuperAdminPassword };
