const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –¢–µ–º—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
const topicsAndDifficulties = [
  {
    keywords: ['javascript', 'js', '–∑–∞–º—ã–∫–∞–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'],
    topic: 'JavaScript',
    difficulty: 'medium',
  },
  {
    keywords: ['react', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç', 'jsx', '—Ö—É–∫'],
    topic: 'React',
    difficulty: 'medium',
  },
  {
    keywords: ['css', '—Å—Ç–∏–ª—å', '—Å–µ–ª–µ–∫—Ç–æ—Ä', 'flexbox', 'grid'],
    topic: 'CSS',
    difficulty: 'easy',
  },
  {
    keywords: ['html', '—Ç–µ–≥', '—ç–ª–µ–º–µ–Ω—Ç', '–∞—Ç—Ä–∏–±—É—Ç'],
    topic: 'HTML',
    difficulty: 'easy',
  },
  {
    keywords: ['node', '—Å–µ—Ä–≤–µ—Ä', 'express', 'api'],
    topic: 'Node.js',
    difficulty: 'hard',
  },
  {
    keywords: ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'sql', '–∑–∞–ø—Ä–æ—Å', '—Ç–∞–±–ª–∏—Ü–∞'],
    topic: '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    difficulty: 'medium',
  },
  {
    keywords: ['–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'],
    topic: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã',
    difficulty: 'hard',
  },
  {
    keywords: ['git', '–≤–µ—Ä—Å–∏—è', '–∫–æ–º–º–∏—Ç', '–≤–µ—Ç–∫–∞'],
    topic: 'Git',
    difficulty: 'easy',
  },
  {
    keywords: ['—Ç–µ—Å—Ç', 'unit', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π'],
    topic: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    difficulty: 'medium',
  },
  {
    keywords: ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'xss', 'csrf', '–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'],
    topic: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    difficulty: 'hard',
  },
];

function determineTopicAndDifficulty(text) {
  const lowerText = text.toLowerCase();

  for (const item of topicsAndDifficulties) {
    if (item.keywords.some((keyword) => lowerText.includes(keyword))) {
      return { topic: item.topic, difficulty: item.difficulty };
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏–Ω–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤
  const wordCount = text.split(' ').length;
  let difficulty = 'easy';

  if (
    wordCount > 20 ||
    lowerText.includes('–ø–æ—á–µ–º—É') ||
    lowerText.includes('–æ–±—ä—è—Å–Ω–∏—Ç–µ')
  ) {
    difficulty = 'medium';
  }
  if (
    wordCount > 30 ||
    lowerText.includes('—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ') ||
    lowerText.includes('–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ')
  ) {
    difficulty = 'hard';
  }

  return { topic: '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã', difficulty };
}

async function updateQuestionsMetadata() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ç–µ–º—ã –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const questions = await prisma.question.findMany({
      where: {
        OR: [
          { topic: null },
          { difficulty: null },
          { topic: '' },
          { difficulty: '' },
        ],
      },
    });

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${questions.length}\n`);

    let updatedCount = 0;
    const topicStats = {};
    const difficultyStats = {};

    for (const question of questions) {
      const { topic, difficulty } = determineTopicAndDifficulty(question.text);

      await prisma.question.update({
        where: { id: question.id },
        data: {
          topic,
          difficulty,
        },
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      topicStats[topic] = (topicStats[topic] || 0) + 1;
      difficultyStats[difficulty] = (difficultyStats[difficulty] || 0) + 1;

      updatedCount++;
      console.log(
        `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å ${question.id}: ${topic} (${difficulty})`
      );
    }

    console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${updatedCount}`);

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:');
    Object.entries(topicStats).forEach(([topic, count]) => {
      console.log(`   ${topic}: ${count} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:');
    Object.entries(difficultyStats).forEach(([difficulty, count]) => {
      console.log(`   ${difficulty}: ${count} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const totalQuestions = await prisma.question.count();
    const questionsWithTopic = await prisma.question.count({
      where: { topic: { not: null } },
    });
    const questionsWithDifficulty = await prisma.question.count({
      where: { difficulty: { not: null } },
    });

    console.log(`   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);
    console.log(`   –° —Ç–µ–º–∞–º–∏: ${questionsWithTopic}`);
    console.log(`   –°–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é: ${questionsWithDifficulty}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

updateQuestionsMetadata();
