console.log('üß™ –¢–µ—Å—Ç API endpoint —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
async function testChangePasswordAPI() {
  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...\n');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = {
    currentPassword: 'currentPass123!',
    newPassword: 'newSecurePass456@',
    confirmPassword: 'newSecurePass456@',
  };

  try {
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è...');
    console.log('URL:', '/api/user/change-password');
    console.log('–î–∞–Ω–Ω—ã–µ:', {
      currentPassword: '***—Å–∫—Ä—ã—Ç–æ***',
      newPassword: '***—Å–∫—Ä—ã—Ç–æ***',
      confirmPassword: '***—Å–∫—Ä—ã—Ç–æ***',
    });

    const response = await fetch('/api/user/change-password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });

    console.log('\nüìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('–°—Ç–∞—Ç—É—Å:', response.status);
    console.log('–°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', response.statusText);

    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if (response.status === 401) {
      console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîí API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      console.log('üìù –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    } else if (response.status === 400) {
      console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîí API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ');
      console.log('üìù –û—Ç–≤–µ—Ç:', data.error);
    } else if (response.status === 200 && data.success) {
      console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      console.log('üéâ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', data.message);
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:');
      console.log('–°—Ç–∞—Ç—É—Å:', response.status);
      console.log('–î–∞–Ω–Ω—ã–µ:', data);
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);

    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)');
      console.log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞');
      console.log('3. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
async function testDifferentScenarios() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...\n');

  const scenarios = [
    {
      name: '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ',
      data: {},
      expectedStatus: 400,
    },
    {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
      data: {
        newPassword: 'newPass123!',
        confirmPassword: 'newPass123!',
      },
      expectedStatus: 400,
    },
    {
      name: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
      data: {
        currentPassword: 'current123!',
        newPassword: 'newPass123!',
        confirmPassword: 'different123!',
      },
      expectedStatus: 400,
    },
    {
      name: '–°–ª–∞–±—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
      data: {
        currentPassword: 'current123!',
        newPassword: '123',
        confirmPassword: '123',
      },
      expectedStatus: 400,
    },
    {
      name: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º',
      data: {
        currentPassword: 'samePass123!',
        newPassword: 'samePass123!',
        confirmPassword: 'samePass123!',
      },
      expectedStatus: 400,
    },
  ];

  for (const scenario of scenarios) {
    console.log(`\nüîç –¢–µ—Å—Ç: ${scenario.name}`);

    try {
      const response = await fetch('/api/user/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(scenario.data),
      });

      const data = await response.json();

      if (
        response.status === scenario.expectedStatus ||
        response.status === 401
      ) {
        console.log(`   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`   üìù –û—à–∏–±–∫–∞: ${data.error}`);
      } else {
        console.log(
          `   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${scenario.expectedStatus})`
        );
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 100));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–∞
async function testMethodValidation() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTTP –º–µ—Ç–æ–¥–æ–≤...\n');

  const methods = ['GET', 'PUT', 'DELETE', 'PATCH'];

  for (const method of methods) {
    console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥: ${method}`);

    try {
      const response = await fetch('/api/user/change-password', {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      if (response.status === 405) {
        console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–µ—Ç–æ–¥ ${method}`);
        console.log(`   üìù –û—à–∏–±–∫–∞: ${data.error}`);
      } else {
        console.log(
          `   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–µ—Ç–æ–¥–∞ ${method}: ${response.status}`
        );
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è\n');
  console.log('='.repeat(60));

  await testChangePasswordAPI();
  await testDifferentScenarios();
  await testMethodValidation();

  console.log('\n' + '='.repeat(60));
  console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)');
  console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞');
  console.log('4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter');
  console.log('5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: runAllTests()');
  console.log('\nüîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    testChangePasswordAPI,
    testDifferentScenarios,
    testMethodValidation,
    runAllTests,
  };
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ Node.js
if (typeof window === 'undefined') {
  console.log('üí° –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞');
  console.log('–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)');
  console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
  console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: runAllTests()');
}
