/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const https = require('https');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  baseUrl: 'http://localhost:3000',
  testUser: {
    email: 'test@example.com',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  },
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https');
    const client = isHttps ? https : http;

    const req = client.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonData,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: data,
          });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(options.body);
    }

    req.end();
  });
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoint –ø—Ä–æ—Ñ–∏–ª—è (GET)
async function testProfileApiGet() {
  console.log('\nüîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET /api/user/profile');

  try {
    const response = await makeRequest(`${config.baseUrl}/api/user/profile`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

    if (response.statusCode === 401) {
      console.log(
        '   ‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      );
      return true;
    } else if (response.statusCode === 200) {
      console.log('   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
      console.log('   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(response.data));
      return true;
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoint –ø—Ä–æ—Ñ–∏–ª—è (PUT)
async function testProfileApiPut() {
  console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ PUT /api/user/profile');

  try {
    const testData = {
      name: '–ù–æ–≤–æ–µ –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    };

    const response = await makeRequest(`${config.baseUrl}/api/user/profile`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });

    console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

    if (response.statusCode === 401) {
      console.log(
        '   ‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      );
      return true;
    } else if (response.statusCode === 200) {
      console.log('   ‚úÖ API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PUT –∑–∞–ø—Ä–æ—Å—ã');
      return true;
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
async function testProfilePage() {
  console.log('\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã /user/profile');

  try {
    const response = await makeRequest(`${config.baseUrl}/user/profile`, {
      method: 'GET',
      headers: {
        Accept: 'text/html',
      },
    });

    console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);

    if (response.statusCode === 200) {
      console.log('   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ HTML
      const html = response.data;
      const hasTitle = html.includes('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const hasProfileContent =
        html.includes('profileContent') || html.includes('profile-content');

      if (hasTitle) {
        console.log('   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω');
      }
      if (hasProfileContent) {
        console.log('   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω');
      }

      return true;
    } else if (response.statusCode === 302 || response.statusCode === 307) {
      console.log(
        '   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      );
      console.log(
        `   üìç –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: ${response.headers.location || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`
      );
      return true;
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –æ—Ç–≤–µ—Ç–∞
async function testApiResponseStructure() {
  console.log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –æ—Ç–≤–µ—Ç–∞');

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
  const expectedStructure = {
    success: 'boolean',
    data: {
      id: 'string',
      name: 'string',
      email: 'string',
      role: 'string',
      createdAt: 'string',
      stats: {
        currentPoints: 'number',
        totalInterviews: 'number',
        conductedInterviews: 'number',
      },
    },
  };

  console.log('   üìã –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:');
  console.log('   {');
  console.log('     success: boolean,');
  console.log('     data: {');
  console.log('       id: string,');
  console.log('       name: string,');
  console.log('       email: string,');
  console.log('       role: string,');
  console.log('       createdAt: string,');
  console.log('       stats: {');
  console.log('         currentPoints: number,');
  console.log('         totalInterviews: number,');
  console.log('         conductedInterviews: number');
  console.log('       }');
  console.log('     }');
  console.log('   }');
  console.log('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥—É API');

  return true;
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function testDataValidation() {
  console.log('\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');

  const testCases = [
    {
      name: '–ü—É—Å—Ç–æ–µ –∏–º—è',
      data: { name: '' },
      expectedStatus: 400,
    },
    {
      name: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∏',
      data: { name: '   ' },
      expectedStatus: 400,
    },
    {
      name: '–í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è',
      data: { name: '–í–∞–ª–∏–¥–Ω–æ–µ –ò–º—è' },
      expectedStatus: 401, // 401 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
    },
    {
      name: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö',
      data: { name: 123 },
      expectedStatus: 400,
    },
  ];

  let passedTests = 0;

  for (const testCase of testCases) {
    try {
      const response = await makeRequest(`${config.baseUrl}/api/user/profile`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testCase.data),
      });

      if (
        response.statusCode === testCase.expectedStatus ||
        (testCase.expectedStatus === 400 && response.statusCode === 401)
      ) {
        console.log(
          `   ‚úÖ ${testCase.name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${response.statusCode}`
        );
        passedTests++;
      } else {
        console.log(
          `   ‚ùå ${testCase.name}: –æ–∂–∏–¥–∞–ª—Å—è ${testCase.expectedStatus}, –ø–æ–ª—É—á–µ–Ω ${response.statusCode}`
        );
      }
    } catch (error) {
      console.log(`   ‚ùå ${testCase.name}: –æ—à–∏–±–∫–∞ ${error.message}`);
    }
  }

  return passedTests === testCases.length;
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π
async function testProfileStyles() {
  console.log('\nüîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è');

  try {
    const response = await makeRequest(
      `${config.baseUrl}/styles/user/Profile.module.css`,
      {
        method: 'GET',
      }
    );

    if (response.statusCode === 200) {
      console.log('   ‚úÖ CSS —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω');

      const css = response.data;
      const hasContainer = css.includes('.container');
      const hasProfileCard = css.includes('.profileCard');
      const hasResponsive = css.includes('@media');
      const hasDarkTheme = css.includes("[data-theme='dark']");

      if (hasContainer) console.log('   ‚úÖ –°—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã');
      if (hasProfileCard) console.log('   ‚úÖ –°—Ç–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω—ã');
      if (hasResponsive) console.log('   ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã');
      if (hasDarkTheme) console.log('   ‚úÖ –°—Ç–∏–ª–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã');

      return true;
    } else {
      console.log(`   ‚ùå CSS —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CSS: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async function testSecurity() {
  console.log('\nüîç –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

  const securityTests = [
    {
      name: 'SQL Injection –≤ –∏–º–µ–Ω–∏',
      data: { name: "'; DROP TABLE users; --" },
      description: '–ü–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏',
    },
    {
      name: 'XSS –≤ –∏–º–µ–Ω–∏',
      data: { name: '<script>alert("xss")</script>' },
      description: '–ü–æ–ø—ã—Ç–∫–∞ XSS –∞—Ç–∞–∫–∏',
    },
    {
      name: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è',
      data: { name: 'A'.repeat(1000) },
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã',
    },
  ];

  let securityPassed = 0;

  for (const test of securityTests) {
    try {
      const response = await makeRequest(`${config.baseUrl}/api/user/profile`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(test.data),
      });

      // –õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–º–µ 500 —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º (API –Ω–µ —É–ø–∞–ª)
      if (response.statusCode !== 500) {
        console.log(
          `   ‚úÖ ${test.name}: API —É—Å—Ç–æ–π—á–∏–≤ –∫ –∞—Ç–∞–∫–µ (${response.statusCode})`
        );
        securityPassed++;
      } else {
        console.log(`   ‚ùå ${test.name}: API —É–ø–∞–ª (500)`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  ${test.name}: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${error.message})`);
    }
  }

  return securityPassed === securityTests.length;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runProfileTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('='.repeat(60));

  const tests = [
    { name: 'API GET endpoint', fn: testProfileApiGet },
    { name: 'API PUT endpoint', fn: testProfileApiPut },
    { name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è', fn: testProfilePage },
    { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API', fn: testApiResponseStructure },
    { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', fn: testDataValidation },
    { name: 'CSS —Å—Ç–∏–ª–∏', fn: testProfileStyles },
    { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', fn: testSecurity },
  ];

  const results = [];

  for (const test of tests) {
    try {
      const result = await test.fn();
      results.push({ name: test.name, passed: result });
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}": ${error.message}`);
      results.push({ name: test.name, passed: false });
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));

  const passed = results.filter((r) => r.passed).length;
  const total = results.length;

  results.forEach((result) => {
    const status = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.name}`);
  });

  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / total) * 100)}%`);

  if (passed === total) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log(
      '\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.'
    );
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Next.js –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ NextAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('4. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è');

  return { passed, total, results };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runProfileTests().catch(console.error);
}

module.exports = {
  runProfileTests,
  testProfileApiGet,
  testProfileApiPut,
  testProfilePage,
  testApiResponseStructure,
  testDataValidation,
  testProfileStyles,
  testSecurity,
};
