const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifySuperAdminRole() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è korobprog@gmail.com...');

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await prisma.user.findUnique({
      where: {
        email: 'korobprog@gmail.com',
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å korobprog@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   –ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   –†–æ–ª—å: ${user.role}`);
    console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.updatedAt}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å
    if (user.role === 'superadmin') {
      console.log('\nüéâ –£–°–ü–ï–•! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å superadmin');
    } else {
      console.log(
        `\n‚ùå –û–®–ò–ë–ö–ê! –û–∂–∏–¥–∞–ª–∞—Å—å —Ä–æ–ª—å 'superadmin', –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ '${user.role}'`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    const adminLogs = await prisma.adminActionLog.findMany({
      where: {
        entityId: user.id,
        action: 'ROLE_CHANGE',
      },
      orderBy: {
        createdAt: 'desc',
      },
      take: 3,
      select: {
        id: true,
        action: true,
        details: true,
        createdAt: true,
      },
    });

    if (adminLogs.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${adminLogs.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ:`);
      adminLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. –î–µ–π—Å—Ç–≤–∏–µ: ${log.action}`);
        console.log(`      –í—Ä–µ–º—è: ${log.createdAt}`);
        console.log(`      –î–µ—Ç–∞–ª–∏: ${JSON.stringify(log.details, null, 6)}`);
      });
    } else {
      console.log('‚ö†Ô∏è  –ó–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.error(error);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ superadmin...');
console.log('üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: korobprog@gmail.com');
console.log('='.repeat(50));

verifySuperAdminRole()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.error(error);
    process.exit(1);
  });
