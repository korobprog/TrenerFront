/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ API
const mockApiData = {
  users: {
    total: 150,
    newLast30Days: 25,
    blocked: 3,
    byRole: {
      user: 140,
      admin: 8,
      superadmin: 2,
    },
  },
  interviews: {
    active: 12,
    byStatus: {
      pending: 5,
      confirmed: 7,
      completed: 45,
      cancelled: 8,
      no_show: 3,
    },
  },
  points: {
    totalIssued: 5000,
    averagePerUser: 33,
    usersWithPoints: 120,
  },
  adminActivity: {
    actionsLast7Days: 15,
  },
};

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
function adaptApiDataToSummary(apiData) {
  if (!apiData || typeof apiData !== 'object') {
    throw new Error('adaptApiDataToSummary: –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }

  const {
    users = {},
    interviews = {},
    points = {},
    adminActivity = {},
  } = apiData;

  const usersByRole = users.byRole || {};
  const admins = (usersByRole.admin || 0) + (usersByRole.superadmin || 0);
  const regular = usersByRole.user || 0;

  const interviewsByStatus = interviews.byStatus || {};
  const totalInterviews = Object.values(interviewsByStatus).reduce(
    (sum, count) => sum + (typeof count === 'number' ? count : 0),
    0
  );

  const safeNumber = (value, defaultValue = 0) => {
    const num = Number(value);
    return isNaN(num) ? defaultValue : num;
  };

  return {
    users: {
      total: safeNumber(users.total),
      admins: safeNumber(admins),
      regular: safeNumber(regular),
      blocked: safeNumber(users.blocked),
    },
    interviews: {
      total: safeNumber(totalInterviews),
      completed: safeNumber(interviewsByStatus.completed),
      pending: safeNumber(interviewsByStatus.pending),
      booked: safeNumber(interviewsByStatus.confirmed),
      cancelled: safeNumber(interviewsByStatus.cancelled),
      noShow: safeNumber(interviewsByStatus.no_show),
    },
    points: {
      totalIssued: safeNumber(points.totalIssued),
      totalSpent: 0,
      averagePerUser: safeNumber(points.averagePerUser),
    },
    feedback: {
      count: 0,
      averageTechnicalScore: 0,
      averageInterviewerRating: 0,
    },
    violations: {
      count: 0,
    },
  };
}

function adaptApiDataToStatistics(apiData) {
  if (!apiData || typeof apiData !== 'object') {
    throw new Error('adaptApiDataToStatistics: –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }

  const { users = {}, interviews = {}, points = {} } = apiData;

  const safeNumber = (value, defaultValue = 0) => {
    const num = Number(value);
    return isNaN(num) ? defaultValue : Math.max(0, num);
  };

  const timeSeriesData = [];
  const today = new Date();

  const interviewsByStatus = interviews.byStatus || {};
  const totalUsers = safeNumber(users.total);
  const newUsersLast30Days = safeNumber(users.newLast30Days);
  const totalPointsIssued = safeNumber(points.totalIssued);

  for (let i = 6; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);

    const dayFactor = (7 - i) / 7;

    const completedCount = safeNumber(interviewsByStatus.completed);
    const pendingCount = safeNumber(interviewsByStatus.pending);
    const confirmedCount = safeNumber(interviewsByStatus.confirmed);
    const cancelledCount = safeNumber(interviewsByStatus.cancelled);
    const noShowCount = safeNumber(interviewsByStatus.no_show);

    timeSeriesData.push({
      date: date.toISOString(),
      completedInterviews: Math.max(
        0,
        Math.round((completedCount * dayFactor) / 7)
      ),
      pendingInterviews: Math.max(
        0,
        Math.round((pendingCount * dayFactor) / 7)
      ),
      bookedInterviews: Math.max(
        0,
        Math.round((confirmedCount * dayFactor) / 7)
      ),
      cancelledInterviews: Math.max(
        0,
        Math.round((cancelledCount * dayFactor) / 7)
      ),
      noShowInterviews: Math.max(0, Math.round((noShowCount * dayFactor) / 7)),
      totalUsers: Math.max(0, Math.round(totalUsers * dayFactor)),
      newUsers: Math.max(0, Math.round((newUsersLast30Days * dayFactor) / 30)),
      activeUsers: Math.max(0, Math.round(totalUsers * dayFactor * 0.3)),
      pointsIssued: Math.max(
        0,
        Math.round((totalPointsIssued * dayFactor) / 7)
      ),
      pointsSpent: Math.max(
        0,
        Math.round((totalPointsIssued * dayFactor) / 10)
      ),
      averageTechnicalScore: Math.max(
        0,
        Math.min(5, 3.5 + (Math.sin(i) + 1) * 0.75)
      ),
      averageInterviewerRating: Math.max(
        0,
        Math.min(5, 4.0 + (Math.cos(i) + 1) * 0.5)
      ),
    });
  }

  return timeSeriesData;
}

function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ê–î–ê–ü–¢–ê–¶–ò–ò –î–ê–ù–ù–´–• –°–¢–ê–¢–ò–°–¢–ò–ö–ò\n');

  // –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('üìä –¢–ï–°–¢ 1: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  try {
    const summary = adaptApiDataToSummary(mockApiData);
    const statistics = adaptApiDataToStatistics(mockApiData);

    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üìã Summary —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${summary.users.total}`);
    console.log(`  - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${summary.users.admins}`);
    console.log(`  - –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${summary.users.regular}`);
    console.log(`  - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${summary.users.blocked}`);
    console.log(`  - –í—Å–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: ${summary.interviews.total}`);
    console.log(`  - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${summary.interviews.completed}`);
    console.log(`  - –û–∂–∏–¥–∞—é—â–∏–µ: ${summary.interviews.pending}`);
    console.log(`  - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${summary.interviews.booked}`);
    console.log(`  - –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: ${summary.points.totalIssued}`);

    console.log('\nüìà Statistics —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${statistics.length}`);
    console.log(`  - –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ (${statistics[0].date.split('T')[0]}):`);
    console.log(
      `    - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: ${statistics[0].completedInterviews}`
    );
    console.log(`    - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statistics[0].totalUsers}`);
    console.log(`    - –í—ã–¥–∞–Ω–æ –±–∞–ª–ª–æ–≤: ${statistics[0].pointsIssued}`);

    console.log(`  - –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ (${statistics[6].date.split('T')[0]}):`);
    console.log(
      `    - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: ${statistics[6].completedInterviews}`
    );
    console.log(`    - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statistics[6].totalUsers}`);
    console.log(`    - –í—ã–¥–∞–Ω–æ –±–∞–ª–ª–æ–≤: ${statistics[6].pointsIssued}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1:', error.message);
  }

  // –¢–µ—Å—Ç 2: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('\nüìä –¢–ï–°–¢ 2: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  try {
    const emptyData = { users: {}, interviews: {}, points: {} };
    const summary = adaptApiDataToSummary(emptyData);
    const statistics = adaptApiDataToStatistics(emptyData);

    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log(`  - Summary users.total: ${summary.users.total}`);
    console.log(`  - Summary interviews.total: ${summary.interviews.total}`);
    console.log(`  - Statistics length: ${statistics.length}`);
    console.log(
      `  - –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è >= 0: ${statistics.every(
        (s) =>
          s.completedInterviews >= 0 && s.totalUsers >= 0 && s.pointsIssued >= 0
      )}`
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2:', error.message);
  }

  // –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('\nüìä –¢–ï–°–¢ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  try {
    const invalidData = {
      users: { total: 'invalid', byRole: { user: null } },
      interviews: { byStatus: { completed: 'abc' } },
      points: { totalIssued: -100 },
    };

    const summary = adaptApiDataToSummary(invalidData);
    const statistics = adaptApiDataToStatistics(invalidData);

    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log(
      `  - Summary users.total (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0): ${summary.users.total}`
    );
    console.log(
      `  - Summary interviews.completed (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0): ${summary.interviews.completed}`
    );
    console.log(
      `  - Statistics –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è >= 0: ${statistics.every(
        (s) =>
          s.completedInterviews >= 0 && s.totalUsers >= 0 && s.pointsIssued >= 0
      )}`
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3:', error.message);
  }

  // –¢–µ—Å—Ç 4: Null/undefined –¥–∞–Ω–Ω—ã–µ
  console.log('\nüìä –¢–ï–°–¢ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ null/undefined –¥–∞–Ω–Ω—ã—Ö');
  try {
    adaptApiDataToSummary(null);
    console.log('‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è null');
  } catch (error) {
    console.log(
      '‚úÖ –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è null:',
      error.message
    );
  }

  try {
    adaptApiDataToStatistics(undefined);
    console.log('‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è undefined');
  } catch (error) {
    console.log(
      '‚úÖ –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è undefined:',
      error.message
    );
  }

  console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
  console.log('\nüìù –†–ï–ó–Æ–ú–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
  console.log(
    '‚úÖ 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API (data.data –≤–º–µ—Å—Ç–æ data.statistics/summary)'
  );
  console.log(
    '‚úÖ 2. –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  );
  console.log('‚úÖ 3. –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
  console.log(
    '‚úÖ 4. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
  );
  console.log('‚úÖ 5. Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
}

runTests();
