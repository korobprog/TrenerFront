/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */

const { PrismaClient } = require('@prisma/client');

async function diagnoseStatisticsStructure() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –°–¢–ê–¢–ò–°–¢–ò–ö–ò');
  console.log('==========================================');

  const prisma = new PrismaClient();

  try {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ API
    const totalUsers = await prisma.user.count();
    const activeInterviews = await prisma.mockInterview.count({
      where: {
        status: {
          in: ['pending', 'confirmed', 'in_progress'],
        },
      },
    });

    const interviewStats = await prisma.mockInterview.groupBy({
      by: ['status'],
      _count: {
        status: true,
      },
    });

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüìã –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –ò–ó –ë–î:');
    console.log('================================');
    console.log('üî∏ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', totalUsers);
    console.log('üî∏ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', activeInterviews);
    console.log('üî∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:');
    interviewStats.forEach((stat) => {
      console.log(`   - ${stat.status}: ${stat._count.status}`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
    console.log('\nüì§ –ß–¢–û –í–û–ó–í–†–ê–©–ê–ï–¢ API (pages/api/admin/statistics.js):');
    console.log('====================================================');
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:');
    console.log(`{
  success: true,
  data: {
    users: {
      total: ${totalUsers},
      newLast30Days: ...,
      blocked: ...,
      byRole: { ... }
    },
    interviews: {
      active: ${activeInterviews},
      byStatus: { ... }
    },
    points: { ... },
    adminActivity: { ... }
  }
}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    console.log('\nüéØ –ß–¢–û –û–ñ–ò–î–ê–ï–¢ –§–†–û–ù–¢–ï–ù–î (pages/admin/index.js:34):');
    console.log('==================================================');
    console.log('–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log(`{
  summary: {
    users: {
      total: —á–∏—Å–ª–æ
    },
    interviews: {
      total: —á–∏—Å–ª–æ,
      pending: —á–∏—Å–ª–æ,
      booked: —á–∏—Å–ª–æ,
      noShow: —á–∏—Å–ª–æ
    }
  },
  recentLogs: [...]
}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
    console.log('\nüí• –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('=============');
    console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: data.data.users.total');
    console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç: data.summary.users.total');
    console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: data.data.interviews.active');
    console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç: data.summary.interviews.total');
    console.log('‚ùå API –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: data.recentLogs');
    console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç: data.recentLogs');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.log('\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–®–ò–ë–ö–ò:');
    console.log('====================');

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∫–∞–∫ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
    const apiResponse = {
      success: true,
      data: {
        users: {
          total: totalUsers,
          newLast30Days: 5,
          blocked: 0,
          byRole: {},
        },
        interviews: {
          active: activeInterviews,
          byStatus: {},
        },
        points: {},
        adminActivity: {},
      },
    };

    console.log('üì° API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:', JSON.stringify(apiResponse, null, 2));

    try {
      // –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      const usersCount = apiResponse.summary.users.total;
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ usersCount:', usersCount);
    } catch (error) {
      console.log(
        '‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å apiResponse.summary.users.total:'
      );
      console.log('   ', error.message);
      console.log('   –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
      console.log(
        '   –°—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞: const usersCount = data.summary.users.total;'
      );
      console.log('   –§–∞–π–ª: pages/admin/index.js:34');
    }

    console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
    console.log('============');
    console.log('1. –ò–∑–º–µ–Ω–∏—Ç—å API, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å summary');
    console.log('2. –ò–õ–ò –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å data');
    console.log('3. –î–æ–±–∞–≤–∏—Ç—å recentLogs –≤ API –æ—Ç–≤–µ—Ç');
    console.log('4. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseStatisticsStructure();
