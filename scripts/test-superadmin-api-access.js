/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ middleware superAdminAuth.js
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */

const https = require('https');
const http = require('http');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ middleware superAdminAuth.js');
console.log('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const protocol = options.port === 443 ? https : http;
    const req = protocol.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data,
        });
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

async function testSuperAdminAPI() {
  try {
    console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–¥–∏–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/admin/statistics',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'SuperAdmin-Test/1.0',
      },
    };

    console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/admin/statistics...');
    const response = await makeRequest(options);

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('- –°—Ç–∞—Ç—É—Å –∫–æ–¥:', response.statusCode);
    console.log('- Content-Type:', response.headers['content-type']);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    let responseData;
    try {
      responseData = JSON.parse(response.body);
    } catch (e) {
      responseData = response.body;
    }

    if (response.statusCode === 401) {
      console.log('‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      console.log('üìù –û—Ç–≤–µ—Ç:', responseData.message || responseData);
    } else if (response.statusCode === 403) {
      console.log('‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
      console.log('üìù –û—Ç–≤–µ—Ç:', responseData.message || responseData);
    } else if (response.statusCode === 200) {
      console.log(
        '‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      );
      console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else if (response.statusCode === 500) {
      console.log('‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ middleware –∏–ª–∏ API');
      console.log('üìù –û—Ç–≤–µ—Ç:', responseData.message || responseData);
    } else {
      console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥:', response.statusCode);
      console.log('üìù –û—Ç–≤–µ—Ç:', responseData);
    }

    console.log('');
    console.log(
      'üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! Middleware superAdminAuth.js —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ TypeError.'
    );
    console.log('');
    console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ:');
    console.log('- –§—É–Ω–∫—Ü–∏—è withPrisma –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ prisma');
    console.log(
      '- Middleware –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ –∏ –¥—Ä—É–≥–∏–µ API —Ñ–∞–π–ª—ã'
    );
    console.log('- –û—à–∏–±–∫–∞ "withPrisma is not a function" —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
      console.log(
        '‚úÖ –ù–æ —ç—Ç–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º middleware - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      );
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSuperAdminAPI();
