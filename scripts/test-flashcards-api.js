const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFlashcardsAPI() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–≥–∏–∫–∏ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫...\n');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    const topic = null;
    const difficulty = null;
    const mode = 'study';
    const limit = 10;
    const excludeAnswered = false;

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ API)
    const whereConditions = {};

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
    if (topic) {
      whereConditions.topic = topic;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (difficulty) {
      whereConditions.difficulty = difficulty;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    whereConditions.text = {
      not: '',
    };

    console.log(
      'üìã –£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:',
      JSON.stringify(whereConditions, null, 2)
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const totalAvailable = await prisma.question.count({
      where: whereConditions,
    });

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalAvailable}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let orderBy = {};
    switch (mode) {
      case 'study':
        orderBy = [{ createdAt: 'asc' }];
        break;
      case 'review':
        orderBy = [{ updatedAt: 'asc' }];
        break;
      case 'exam':
        orderBy = [{ id: 'asc' }];
        break;
      default:
        orderBy = [{ createdAt: 'asc' }];
    }

    console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', JSON.stringify(orderBy, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const questions = await prisma.question.findMany({
      where: whereConditions,
      orderBy,
      take: limit,
      select: {
        id: true,
        text: true,
        topic: true,
        difficulty: true,
        tags: true,
        estimatedTime: true,
        category: true,
        answer: true,
        createdAt: true,
      },
    });

    console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questions.length}`);

    if (questions.length > 0) {
      console.log('\nüîç –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:');
      questions.slice(0, 3).forEach((question, index) => {
        console.log(`${index + 1}. ID: ${question.id}`);
        console.log(`   –¢–µ–∫—Å—Ç: ${question.text?.substring(0, 80)}...`);
        console.log(`   –¢–µ–º–∞: ${question.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${question.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${question.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   –ï—Å—Ç—å –æ—Ç–≤–µ—Ç: ${!!question.answer}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${question.createdAt}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:');

    // –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ JavaScript
    const jsQuestions = await prisma.question.count({
      where: {
        ...whereConditions,
        topic: 'JavaScript',
      },
    });
    console.log(`   JavaScript –≤–æ–ø—Ä–æ—Å—ã: ${jsQuestions}`);

    // –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ easy
    const easyQuestions = await prisma.question.count({
      where: {
        ...whereConditions,
        difficulty: 'easy',
      },
    });
    console.log(`   –õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: ${easyQuestions}`);

    // –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ React
    const reactQuestions = await prisma.question.count({
      where: {
        ...whereConditions,
        topic: 'React',
      },
    });
    console.log(`   React –≤–æ–ø—Ä–æ—Å—ã: ${reactQuestions}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    console.log('\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è):');
    const recentQuestions = await prisma.question.findMany({
      where: whereConditions,
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        id: true,
        text: true,
        topic: true,
        createdAt: true,
      },
    });

    recentQuestions.forEach((q, index) => {
      console.log(
        `${index + 1}. ID: ${q.id} - ${q.text?.substring(0, 60)}... (${
          q.topic
        }) - ${q.createdAt}`
      );
    });

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFlashcardsAPI();
