/**
 * –¢–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId
 * –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
 */

const fetch = require('node-fetch');
const { PrismaClient } = require('@prisma/client');
const crypto = require('crypto');

const prisma = new PrismaClient();
const BASE_URL = 'http://localhost:3000';

async function testApiUserIdFix() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId...');
  console.log('üåê –ë–∞–∑–æ–≤—ã–π URL:', BASE_URL);
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
  console.log('='.repeat(60));

  let testUser = null;
  let createdInterview = null;

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    testUser = await prisma.user.upsert({
      where: { email: 'test-api-userid@example.com' },
      update: {},
      create: {
        email: 'test-api-userid@example.com',
        name: 'Test API User for UserId Fix',
        role: 'user',
        password: '$2a$10$test.hash.for.testing', // –•–µ—à –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
      },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å database —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    console.log('\nüîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π sessionToken (32 –±–∞–π—Ç–∞ hex)
    const sessionToken = crypto.randomBytes(32).toString('hex');
    console.log(
      'üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω sessionToken:',
      sessionToken.substring(0, 16) + '...'
    );

    const sessionExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    const session = await prisma.session.create({
      data: {
        sessionToken: sessionToken,
        userId: testUser.id,
        expires: sessionExpires,
      },
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if (!session || !session.sessionToken) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
    console.log('üìÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionExpires.toISOString());
    console.log(
      'üÜî ID —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ:',
      session.sessionToken.substring(0, 16) + '...'
    );
    console.log('üë§ –ü—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', session.userId);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ
    const verifySession = await prisma.session.findUnique({
      where: { sessionToken: sessionToken },
      include: {
        user: {
          select: { id: true, email: true, name: true },
        },
      },
    });

    if (verifySession) {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('üîó –°–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', verifySession.user.email);
      console.log('‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç:', verifySession.expires.toISOString());
    } else {
      throw new Error('–°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
    const authCookie = `next-auth.session-token=${sessionToken}`;
    console.log(
      'üç™ Cookie –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:',
      authCookie.substring(0, 50) + '...'
    );

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
    console.log(
      '\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π...'
    );

    const scheduledTime = new Date(
      Date.now() + 2 * 60 * 60 * 1000
    ).toISOString();
    const interviewData = {
      scheduledTime: scheduledTime,
      videoType: 'built_in',
    };

    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:', {
      scheduledTime,
      videoType: interviewData.videoType,
      userId: testUser.id,
    });

    console.log('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å database session cookie...');
    console.log('üç™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π cookie:', authCookie.substring(0, 50) + '...');

    const response = await fetch(`${BASE_URL}/api/mock-interviews`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Cookie: authCookie,
      },
      body: JSON.stringify(interviewData),
    });

    console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      headers: {
        'set-cookie': response.headers.get('set-cookie'),
        'content-type': response.headers.get('content-type'),
      },
    });

    const responseData = await response.json();
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', {
      success: response.ok,
      dataKeys: Object.keys(responseData),
      hasError: !!responseData.error,
      hasMessage: !!responseData.message,
    });

    if (response.ok) {
      createdInterview = responseData;
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ API!');
      console.log('üìù –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', {
        id: responseData.id,
        videoType: responseData.videoType,
        videoRoomId: responseData.videoRoomId,
        meetingLink: responseData.meetingLink,
        scheduledTime: responseData.scheduledTime,
        status: responseData.status,
      });

      if (responseData.videoRoom) {
        console.log('üè† –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã:', {
          id: responseData.videoRoom.id,
          code: responseData.videoRoom.code,
          name: responseData.videoRoom.name,
          isActive: responseData.videoRoom.isActive,
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ VideoRoom –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VideoRoom –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const videoRoom = await prisma.videoRoom.findUnique({
        where: { id: responseData.videoRoomId },
        include: {
          host: {
            select: { id: true, name: true, email: true },
          },
          mockInterviews: {
            select: { id: true, status: true },
          },
        },
      });

      if (videoRoom) {
        console.log('‚úÖ VideoRoom –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
        console.log('üìä –î–µ—Ç–∞–ª–∏ –∏–∑ –±–∞–∑—ã:', {
          id: videoRoom.id,
          code: videoRoom.code,
          hostId: videoRoom.hostId,
          hostEmail: videoRoom.host.email,
          connectedInterviews: videoRoom.mockInterviews.length,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ hostId —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (videoRoom.hostId === testUser.id) {
          console.log('‚úÖ hostId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        } else {
          console.error('‚ùå hostId –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É!', {
            expected: testUser.id,
            actual: videoRoom.hostId,
          });
          throw new Error('hostId –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
        }
      } else {
        console.error('‚ùå VideoRoom –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
        throw new Error('VideoRoom –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      console.log('\n' + '='.repeat(60));
      console.log('üéâ –¢–ï–°–¢ API –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –û—à–∏–±–∫–∞ userId –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ API');
      console.log('‚úÖ VideoRoom —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º hostId');
      console.log('‚úÖ MockInterview –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å VideoRoom');
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('üîê Database —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(
        'üç™ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π sessionToken —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
      );
      console.log('üîó NextAuth database —Å–µ—Å—Å–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å API');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ API:', {
        status: response.status,
        error: responseData.error || responseData.message,
        details: responseData.details,
      });
      throw new Error(
        `API –æ—à–∏–±–∫–∞ ${response.status}: ${
          responseData.error || responseData.message
        }`
      );
    }

    return true;
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê API:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    return false;
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      if (createdInterview) {
        await prisma.mockInterview.deleteMany({
          where: { id: createdInterview.id },
        });
        console.log('‚úÖ MockInterview —É–¥–∞–ª–µ–Ω');
      }

      if (createdInterview?.videoRoomId) {
        await prisma.videoRoom.deleteMany({
          where: { id: createdInterview.videoRoomId },
        });
        console.log('‚úÖ VideoRoom —É–¥–∞–ª–µ–Ω–∞');
      }

      if (testUser) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è database —Å–µ—Å—Å–∏–∏)
        const deletedSessions = await prisma.session.deleteMany({
          where: { userId: testUser.id },
        });
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${deletedSessions.count}`);

        await prisma.user.delete({
          where: { id: testUser.id },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }

      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (cleanupError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', cleanupError.message);
    }

    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testApiUserIdFix()
    .then((success) => {
      if (success) {
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: API –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        process.exit(0);
      } else {
        console.log(
          '\nüí• –†–ï–ó–£–õ–¨–¢–ê–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API!'
        );
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê API:', error);
      process.exit(1);
    });
}

module.exports = { testApiUserIdFix };
