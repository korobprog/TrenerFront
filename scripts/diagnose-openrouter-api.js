/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenRouter API –∏ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, API –∫–ª—é—á–∏, –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–æ–≤
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function diagnoseOpenRouterAPI() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OPENROUTER API ===');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
    console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter');
    const globalSettings = await prisma.interviewAssistantSettings.findMany({
      where: { apiType: 'openrouter' },
    });

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter: ${globalSettings.length}`
    );

    if (globalSettings.length > 0) {
      globalSettings.forEach((setting, index) => {
        console.log(`  ${index + 1}. ID: ${setting.id}`);
        console.log(`     –ê–∫—Ç–∏–≤–Ω–∞: ${setting.isActive}`);
        console.log(`     API —Ç–∏–ø: ${setting.apiType}`);
        console.log(`     –ï—Å—Ç—å API –∫–ª—é—á: ${!!setting.openRouterApiKey}`);
        console.log(
          `     Base URL: ${setting.openRouterBaseUrl || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
        );
        console.log(`     –ú–æ–¥–µ–ª—å: ${setting.openRouterModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(
          `     –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${setting.openRouterTemperature || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
        );
        console.log(
          `     –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: ${setting.openRouterMaxTokens || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`
        );
        console.log(
          `     –ú–∞–∫—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: ${
            setting.maxQuestionsPerDay || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
          }`
        );
      });
    } else {
      console.log('‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
    console.log('\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter');
    const activeSettings = await prisma.interviewAssistantSettings.findFirst({
      where: {
        isActive: true,
        apiType: 'openrouter',
      },
    });

    if (activeSettings) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter:');
      console.log(`   ID: ${activeSettings.id}`);
      console.log(`   –ï—Å—Ç—å API –∫–ª—é—á: ${!!activeSettings.openRouterApiKey}`);
      console.log(`   Base URL: ${activeSettings.openRouterBaseUrl}`);
      console.log(`   –ú–æ–¥–µ–ª—å: ${activeSettings.openRouterModel}`);
      console.log(`   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${activeSettings.openRouterTemperature}`);
      console.log(`   –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: ${activeSettings.openRouterMaxTokens}`);
      console.log(
        `   –ú–∞–∫—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: ${activeSettings.maxQuestionsPerDay}`
      );
    } else {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
    console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter');
    const userSettings = await prisma.userApiSettings.findMany({
      where: {
        apiType: 'openrouter',
        useCustomApi: true,
      },
    });

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter: ${userSettings.length}`
    );

    if (userSettings.length > 0) {
      userSettings.forEach((setting, index) => {
        console.log(`  ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${setting.userId}`);
        console.log(`     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π API: ${setting.useCustomApi}`);
        console.log(`     API —Ç–∏–ø: ${setting.apiType}`);
        console.log(`     –ï—Å—Ç—å API –∫–ª—é—á: ${!!setting.openRouterApiKey}`);
        console.log(
          `     Base URL: ${setting.openRouterBaseUrl || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
        );
        console.log(`     –ú–æ–¥–µ–ª—å: ${setting.openRouterModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤
    console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤');
    const cacheCount = await prisma.interviewAssistantCache.count();
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: ${cacheCount}`);

    if (cacheCount > 0) {
      const recentCache = await prisma.interviewAssistantCache.findMany({
        take: 3,
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          question: true,
          answer: true,
          createdAt: true,
          expiresAt: true,
        },
      });

      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞:');
      recentCache.forEach((cache, index) => {
        console.log(`  ${index + 1}. ID: ${cache.id}`);
        console.log(`     –•—ç—à –≤–æ–ø—Ä–æ—Å–∞: ${cache.question}`);
        console.log(`     –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${cache.answer?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${cache.createdAt}`);
        console.log(`     –ò—Å—Ç–µ–∫–∞–µ—Ç: ${cache.expiresAt}`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
    console.log('\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API');
    const usageCount = await prisma.interviewAssistantUsage.count();
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API: ${usageCount}`);

    if (usageCount > 0) {
      const recentUsage = await prisma.interviewAssistantUsage.findMany({
        take: 5,
        orderBy: { date: 'desc' },
        select: {
          id: true,
          userId: true,
          date: true,
          questionsCount: true,
          tokensUsed: true,
          apiCost: true,
        },
      });

      console.log('üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
      recentUsage.forEach((usage, index) => {
        console.log(`  ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${usage.userId}`);
        console.log(`     –î–∞—Ç–∞: ${usage.date}`);
        console.log(`     –í–æ–ø—Ä–æ—Å–æ–≤: ${usage.questionsCount}`);
        console.log(`     –¢–æ–∫–µ–Ω–æ–≤: ${usage.tokensUsed}`);
        console.log(`     –°—Ç–æ–∏–º–æ—Å—Ç—å: ${usage.apiCost}`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç
    console.log('\nüîç –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    const flashcardQA = await prisma.interviewAssistantQA.count({
      where: { category: 'flashcard' },
    });
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç: ${flashcardQA}`);

    if (flashcardQA > 0) {
      const recentFlashcardQA = await prisma.interviewAssistantQA.findMany({
        where: { category: 'flashcard' },
        take: 3,
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          userId: true,
          question: true,
          answer: true,
          createdAt: true,
        },
      });

      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç:');
      recentFlashcardQA.forEach((qa, index) => {
        console.log(`  ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${qa.userId}`);
        console.log(`     –í–æ–ø—Ä–æ—Å: ${qa.question?.substring(0, 50)}...`);
        console.log(`     –û—Ç–≤–µ—Ç: ${qa.answer?.substring(0, 50)}...`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${qa.createdAt}`);
      });
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîç –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log(`API_KEY_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${!!process.env.API_KEY_SECRET}`);
    console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç OpenRouter API –º–æ–¥—É–ª—è
    console.log('\nüîç –¢–ï–°–¢ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ OpenRouter API –º–æ–¥—É–ª—è');
    try {
      const openRouterModule = require('../lib/utils/openRouterApi');
      console.log('‚úÖ OpenRouter API –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', Object.keys(openRouterModule));

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getApiSettings
      if (activeSettings) {
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getApiSettings...');
        try {
          const settings = await openRouterModule.getApiSettings();
          console.log('‚úÖ getApiSettings —Ä–∞–±–æ—Ç–∞–µ—Ç');
          console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
            hasApiKey: !!settings.apiKey,
            baseUrl: settings.baseUrl,
            model: settings.model,
            temperature: settings.temperature,
            maxTokensPerQuestion: settings.maxTokensPerQuestion,
            maxQuestionsPerDay: settings.maxQuestionsPerDay,
            isActive: settings.isActive,
          });
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –≤ getApiSettings:', error.message);
        }
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenRouter API –º–æ–¥—É–ª—è:', error.message);
    }

    // 9. –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');

    const issues = [];
    const recommendations = [];

    if (!activeSettings) {
      issues.push('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter API');
      recommendations.push(
        '–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏'
      );
    }

    if (activeSettings && !activeSettings.openRouterApiKey) {
      issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenRouter –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á OpenRouter –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }

    if (cacheCount === 0) {
      issues.push('‚ö†Ô∏è –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤');
    }

    if (usageCount === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API');
    }

    if (flashcardQA === 0) {
      issues.push('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π Q&A –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç');
      recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç');
    }

    if (issues.length === 0) {
      console.log('‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach((issue) => console.log(`   ${issue}`));
    }

    if (recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      recommendations.forEach((rec) => console.log(`   ${rec}`));
    }
  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
  } finally {
    await prisma.$disconnect();
  }

  console.log('\n=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò OPENROUTER API ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseOpenRouterAPI().catch(console.error);
