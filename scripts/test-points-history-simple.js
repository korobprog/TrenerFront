/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤
 */

const http = require('http');
const https = require('https');

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
          url: res.url,
        });
      });
    });

    req.on('error', reject);
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
  });
}

async function testPointsHistoryPage() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤...\n');

  try {
    console.log('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã /user/points-history...');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤
    const pageResponse = await makeRequest(
      'http://localhost:3000/user/points-history'
    );

    if (
      pageResponse.statusCode === 307 &&
      pageResponse.headers.location === '/auth/signin'
    ) {
      console.log('‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (pageResponse.statusCode === 200) {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', pageResponse.statusCode);
    }

    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    const apiResponse = await makeRequest(
      'http://localhost:3000/api/user/points-history?limit=5&offset=0'
    );

    if (apiResponse.statusCode === 401) {
      console.log(
        '‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      );

      try {
        const errorData = JSON.parse(apiResponse.data);
        if (errorData.error === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ');
        }
      } catch (e) {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç API');
      }
    } else {
      console.log('‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', apiResponse.statusCode);
    }

    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const testCases = [
      { params: 'limit=10&offset=0', description: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
      { params: 'limit=5&offset=5', description: '–ø–∞–≥–∏–Ω–∞—Ü–∏—è' },
      {
        params: 'limit=10&offset=0&type=booking',
        description: '—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É',
      },
      { params: 'limit=101&offset=0', description: '–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞' },
      { params: 'limit=-1&offset=0', description: '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç' },
      { params: 'limit=abc&offset=0', description: '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç' },
    ];

    for (const testCase of testCases) {
      try {
        const response = await makeRequest(
          `http://localhost:3000/api/user/points-history?${testCase.params}`
        );

        if (response.statusCode === 401) {
          console.log(
            `‚úÖ ${testCase.description}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (401 - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)`
          );
        } else if (response.statusCode === 400) {
          console.log(
            `‚úÖ ${testCase.description}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (400 - –ø–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å)`
          );
        } else {
          console.log(
            `‚ö†Ô∏è  ${testCase.description}: —Å—Ç–∞—Ç—É—Å ${response.statusCode}`
          );
        }
      } catch (error) {
        console.log(`‚ùå ${testCase.description}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    }

    console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');

    const fs = require('fs');
    const path = require('path');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const filesToCheck = [
      'pages/user/points-history.js',
      'styles/user/PointsHistory.module.css',
      'pages/api/user/points-history.js',
    ];

    for (const file of filesToCheck) {
      if (fs.existsSync(path.join(__dirname, file))) {
        console.log(`‚úÖ ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`‚ùå ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    console.log('‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');

    console.log('\nüéØ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('üìç URL: http://localhost:3000/user/points-history');
    console.log('üîê –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω');
    console.log('üåô –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º–Ω—É—é/—Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É');
    console.log('üìÑ –í–∫–ª—é—á–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testPointsHistoryPage().catch(console.error);
