/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã CredentialsProvider
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–æ–ø–∏—è –∏–∑ passwordUtils.js)
function validateEmail(email) {
  if (!email || typeof email !== 'string') {
    return false;
  }
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

function validateUsername(username) {
  const result = {
    isValid: true,
    errors: [],
  };

  if (!username || typeof username !== 'string') {
    result.isValid = false;
    result.errors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    return result;
  }

  if (username.length < 3) {
    result.isValid = false;
    result.errors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
  }

  if (username.length > 30) {
    result.isValid = false;
    result.errors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
    result.isValid = false;
    result.errors.push(
      '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –¥–µ—Ñ–∏—Å'
    );
  }

  if (/^\d/.test(username)) {
    result.isValid = false;
    result.errors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã');
  }

  return result;
}

// –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ authorize –∏–∑ NextAuth
async function simulateCredentialsAuth(credentials) {
  console.log('üîê –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ CredentialsProvider...');
  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å: ${credentials.username}`);

  if (!credentials?.username || !credentials?.password) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return null;
  }

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const isEmail = validateEmail(credentials.username);
    const usernameValidation = validateUsername(credentials.username);

    console.log(`–≠—Ç–æ email: ${isEmail}`);
    console.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è username: ${usernameValidation.isValid}`);

    if (!isEmail && !usernameValidation.isValid) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email –∏–ª–∏ username');
      return null;
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username
    let user = null;

    if (isEmail) {
      console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email...');
      user = await prisma.user.findUnique({
        where: { email: credentials.username },
      });
    } else {
      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º)
      if (
        credentials.username === 'admin' ||
        credentials.username === 'superadmin'
      ) {
        console.log('–ü–æ–∏—Å–∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞...');
        user = await prisma.user.findFirst({
          where: { role: 'superadmin' },
        });
      }
    }

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email} (${user.role})`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (!user.password) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä–æ–ª—è');
      return null;
    }

    const isValidPassword = await bcrypt.compare(
      credentials.password,
      user.password
    );

    if (!isValidPassword) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return null;
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.isBlocked) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return null;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() },
    });

    console.log('‚úÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

    return {
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      image: user.image,
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return null;
  }
}

async function testCredentialsProvider() {
  console.log('=== –¢–ï–°–¢ CREDENTIALS PROVIDER ===\n');

  try {
    await prisma.$connect();

    // –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.findUnique({
      where: { email: 'test@example.com' },
    });

    if (!testUser) {
      console.log(
        '‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ test-email-auth-diagnosis-fixed.js'
      );
      return;
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
    console.log(`Email: ${testUser.email}`);
    console.log(`–ò–º—è: ${testUser.name}`);
    console.log(`–†–æ–ª—å: ${testUser.role}\n`);

    // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('–¢–ï–°–¢ 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    const result1 = await simulateCredentialsAuth({
      username: 'test@example.com',
      password: 'TestPass123!',
    });

    if (result1) {
      console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${result1.email} (${result1.role})\n`);
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å\n');
    }

    // –¢–µ—Å—Ç 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    console.log('–¢–ï–°–¢ 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    const result2 = await simulateCredentialsAuth({
      username: 'test@example.com',
      password: 'WrongPassword',
    });

    if (!result2) {
      console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º\n');
    }

    // –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
    console.log('–¢–ï–°–¢ 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email');
    const result3 = await simulateCredentialsAuth({
      username: 'nonexistent@example.com',
      password: 'TestPass123!',
    });

    if (!result3) {
      console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email\n');
    }

    // –¢–µ—Å—Ç 4: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
    console.log('–¢–ï–°–¢ 4: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email');
    const result4 = await simulateCredentialsAuth({
      username: 'invalid-email',
      password: 'TestPass123!',
    });

    if (!result4) {
      console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º email\n');
    }

    console.log('=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===');
    console.log(
      'CredentialsProvider —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email/–ø–∞—Ä–æ–ª—é.'
    );
    console.log('–≠—Ç–æ –ù–ï Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä (magic link), –∞ –æ–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞.');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testCredentialsProvider()
  .then(() => {
    console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
    process.exit(0);
  })
  .catch((error) => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
