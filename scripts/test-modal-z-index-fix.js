/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å z-index –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

const modalZIndexDiagnostics = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö z-index
  checkZIndexVariables() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö z-index...');

    const rootStyles = getComputedStyle(document.documentElement);
    const userModalZIndex = rootStyles
      .getPropertyValue('--z-user-modal')
      .trim();
    const userModalHeaderZIndex = rootStyles
      .getPropertyValue('--z-user-modal-header')
      .trim();
    const criticalZIndex = rootStyles.getPropertyValue('--z-critical').trim();
    const emergencyZIndex = rootStyles.getPropertyValue('--z-emergency').trim();

    console.log('üìä CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ z-index:');
    console.log(`  --z-user-modal: ${userModalZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    console.log(
      `  --z-user-modal-header: ${userModalHeaderZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`
    );
    console.log(`  --z-critical: ${criticalZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
    console.log(`  --z-emergency: ${emergencyZIndex || '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);

    return {
      userModal: userModalZIndex,
      userModalHeader: userModalHeaderZIndex,
      critical: criticalZIndex,
      emergency: emergencyZIndex,
    };
  },

  // –ü–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  findUserModal() {
    console.log('üîç –ü–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    const modalSelectors = [
      '[class*="UserSettingsModal_overlay"]',
      '[class*="userSettingsModal_overlay"]',
      '.modal-overlay',
      '[data-modal="user-settings"]',
    ];

    let modal = null;
    for (const selector of modalSelectors) {
      modal = document.querySelector(selector);
      if (modal) {
        console.log(`‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
        break;
      }
    }

    if (!modal) {
      console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ');
      console.log('   - –ò–∑–º–µ–Ω–∏–ª–∏—Å—å CSS –∫–ª–∞—Å—Å—ã');
      console.log('   - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
    }

    return modal;
  },

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ z-index –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  analyzeModalZIndex(modal) {
    if (!modal) return null;

    console.log('üìä –ê–Ω–∞–ª–∏–∑ z-index –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');

    const computedStyle = getComputedStyle(modal);
    const currentZIndex = computedStyle.zIndex;
    const position = computedStyle.position;

    console.log(`  –¢–µ–∫—É—â–∏–π z-index: ${currentZIndex}`);
    console.log(`  Position: ${position}`);
    console.log(`  CSS –∫–ª–∞—Å—Å: ${modal.className}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const modalContent = modal.querySelector('[class*="modal"]');
    const modalHeader = modal.querySelector('[class*="header"]');

    if (modalContent) {
      const contentZIndex = getComputedStyle(modalContent).zIndex;
      console.log(`  –ö–æ–Ω—Ç–µ–Ω—Ç z-index: ${contentZIndex}`);
    }

    if (modalHeader) {
      const headerZIndex = getComputedStyle(modalHeader).zIndex;
      console.log(`  –ó–∞–≥–æ–ª–æ–≤–æ–∫ z-index: ${headerZIndex}`);
    }

    return {
      overlay: currentZIndex,
      content: modalContent ? getComputedStyle(modalContent).zIndex : null,
      header: modalHeader ? getComputedStyle(modalHeader).zIndex : null,
    };
  },

  // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  findConflictingElements() {
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º z-index...');

    const allElements = document.querySelectorAll('*');
    const highZIndexElements = [];

    allElements.forEach((element) => {
      const style = getComputedStyle(element);
      const zIndex = parseInt(style.zIndex);

      if (!isNaN(zIndex) && zIndex > 1000) {
        highZIndexElements.push({
          element,
          zIndex,
          className: element.className,
          tagName: element.tagName,
          id: element.id,
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é z-index
    highZIndexElements.sort((a, b) => b.zIndex - a.zIndex);

    console.log('üìä –≠–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index:');
    highZIndexElements.slice(0, 10).forEach((item) => {
      console.log(
        `  ${item.tagName}${item.id ? '#' + item.id : ''}${
          item.className ? '.' + item.className.split(' ')[0] : ''
        }: ${item.zIndex}`
      );
    });

    return highZIndexElements;
  },

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è z-index
  applyZIndexFix() {
    console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è z-index...');

    const modal = this.findUserModal();
    if (!modal) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      return false;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π z-index
    const emergencyZIndex = 99999;

    console.log(`üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º z-index: ${emergencyZIndex}`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ overlay
    modal.style.zIndex = emergencyZIndex + '!important';
    modal.style.position = 'fixed';
    modal.style.isolation = 'isolate';
    modal.style.transform = 'translateZ(0)';
    modal.style.willChange = 'transform';

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalContent = modal.querySelector('[class*="modal"]');
    if (modalContent) {
      modalContent.style.zIndex = '1';
      modalContent.style.position = 'relative';
      modalContent.style.isolation = 'isolate';
      modalContent.style.transform = 'translateZ(0)';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const modalHeader = modal.querySelector('[class*="header"]');
    if (modalHeader) {
      modalHeader.style.zIndex = '2';
      modalHeader.style.position = 'sticky';
    }

    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!');
    console.log(
      'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
    );

    return true;
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ CSS –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  createPermanentFix() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

    const css = `
      /* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ z-index –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
      [class*="UserSettingsModal_overlay"],
      [class*="userSettingsModal_overlay"] {
        z-index: 99999 !important;
        position: fixed !important;
        isolation: isolate !important;
        transform: translateZ(0) !important;
        will-change: transform !important;
      }
      
      [class*="UserSettingsModal_modal"],
      [class*="userSettingsModal_modal"] {
        z-index: 1 !important;
        position: relative !important;
        isolation: isolate !important;
        transform: translateZ(0) !important;
      }
      
      [class*="UserSettingsModal_header"],
      [class*="userSettingsModal_header"] {
        z-index: 2 !important;
        position: sticky !important;
      }
    `;

    const style = document.createElement('style');
    style.textContent = css;
    style.id = 'user-modal-z-index-fix';

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingFix = document.getElementById('user-modal-z-index-fix');
    if (existingFix) {
      existingFix.remove();
    }

    document.head.appendChild(style);

    console.log('‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
    console.log('üìù CSS –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ <head>');

    return style;
  },

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  monitorModalChanges() {
    console.log('üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (
              node.nodeType === 1 &&
              node.className &&
              node.className.includes('UserSettingsModal_overlay')
            ) {
              console.log('üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!');
              setTimeout(() => {
                this.applyZIndexFix();
              }, 100);
            }
          });
        }
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω');
    return observer;
  },

  // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  runFullDiagnostics() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const variables = this.checkZIndexVariables();
    console.log('');

    // 2. –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = this.findUserModal();
    console.log('');

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º z-index –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ
    if (modal) {
      const zIndexInfo = this.analyzeModalZIndex(modal);
      console.log('');
    }

    // 4. –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const conflicts = this.findConflictingElements();
    console.log('');

    // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const fixed = this.applyZIndexFix();
    console.log('');

    // 6. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    this.createPermanentFix();
    console.log('');

    // 7. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.monitorModalChanges();

    console.log('üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìã –†–µ–∑—é–º–µ:');
    console.log(`   - CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${variables.userModal ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${modal ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${fixed ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${conflicts.length}`);
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  window.modalZIndexDiagnostics = modalZIndexDiagnostics;

  console.log('üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!');
  console.log('üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log(
    '   modalZIndexDiagnostics.runFullDiagnostics() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
  );
  console.log(
    '   modalZIndexDiagnostics.applyZIndexFix() - –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
  );
  console.log(
    '   modalZIndexDiagnostics.findUserModal() - –Ω–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ'
  );
  console.log(
    '   modalZIndexDiagnostics.checkZIndexVariables() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
  );
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined' && document.readyState === 'complete') {
  console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
  modalZIndexDiagnostics.runFullDiagnostics();
}

export default modalZIndexDiagnostics;
