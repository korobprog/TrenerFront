/**
 * –¢–µ—Å—Ç API endpoint –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å /api/mock-interviews/[id]/book
 */

const testBookInterviewAPI = async () => {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...\n');

  const baseUrl = 'http://localhost:3000';

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testInterviewId = 'test-interview-id-123';

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ (GET)
    console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ (GET)');
    try {
      const response = await fetch(
        `${baseUrl}/api/mock-interviews/${testInterviewId}/book`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      const data = await response.json();
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   –û—Ç–≤–µ—Ç:`, data);

      if (response.status === 405) {
        console.log('   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: GET –º–µ—Ç–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n');
      } else {
        console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞\n');
      }
    } catch (error) {
      console.log(
        `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GET –º–µ—Ç–æ–¥–∞: ${error.message}\n`
      );
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('üìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    try {
      const response = await fetch(
        `${baseUrl}/api/mock-interviews/${testInterviewId}/book`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({}),
        }
      );

      const data = await response.json();
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   –û—Ç–≤–µ—Ç:`, data);

      if (response.status === 401) {
        console.log(
          '   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n'
        );
      } else {
        console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞\n');
      }
    } catch (error) {
      console.log(
        `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ POST –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}\n`
      );
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID
    console.log('üìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID');
    try {
      const response = await fetch(`${baseUrl}/api/mock-interviews//book`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({}),
      });

      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);

      if (response.status === 404) {
        console.log(
          '   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
        );
      } else {
        console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞\n');
      }
    } catch (error) {
      console.log(
        `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID: ${error.message}\n`
      );
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint
    console.log('üìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint');
    try {
      const response = await fetch(
        `${baseUrl}/api/mock-interviews/test-id/book`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);

      if (response.status !== 404) {
        console.log('   ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã\n');
      } else {
        console.log('   ‚ùå Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (404)\n');
      }
    } catch (error) {
      console.log(
        `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint: ${error.message}\n`
      );
    }

    console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('   - API endpoint —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    console.log('   - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('\n‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (typeof window === 'undefined') {
  // Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  const fetch = require('node-fetch');
  testBookInterviewAPI();
} else {
  // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  testBookInterviewAPI();
}

module.exports = { testBookInterviewAPI };
