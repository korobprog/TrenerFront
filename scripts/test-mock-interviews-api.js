/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Mock Interviews API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ withPrisma
 */

const testMockInterviewsAPI = async () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mock Interviews API...\n');

  try {
    // –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π');
    const response = await fetch(
      'http://localhost:3000/api/mock-interviews?status=active',
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (response.status === 401) {
      console.log(
        '‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 (Unauthorized) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      );
      console.log('‚úÖ –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
    } else if (response.status === 200) {
      const data = await response.json();
      console.log('‚úÖ API —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ:', data);
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
      const errorText = await response.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
    }

    // –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π');
    const archiveResponse = await fetch(
      'http://localhost:3000/api/mock-interviews?status=archived',
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${archiveResponse.status}`);

    if (archiveResponse.status === 401) {
      console.log(
        '‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 (Unauthorized) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      );
    } else if (archiveResponse.status === 200) {
      const data = await archiveResponse.json();
      console.log('‚úÖ API —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ:', data);
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${archiveResponse.status}`);
    }

    // –¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log('\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
    const postResponse = await fetch(
      'http://localhost:3000/api/mock-interviews',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          scheduledTime: new Date(
            Date.now() + 24 * 60 * 60 * 1000
          ).toISOString(), // –∑–∞–≤—Ç—Ä–∞
          manualMeetingLink: 'https://meet.google.com/test-link',
        }),
      }
    );

    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${postResponse.status}`);

    if (postResponse.status === 401) {
      console.log(
        '‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 (Unauthorized) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      );
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${postResponse.status}`);
      const errorText = await postResponse.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ –û—à–∏–±–∫–∞ withPrisma –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã');
    console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã');
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ Prisma –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);

    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    }
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMockInterviewsAPI();
