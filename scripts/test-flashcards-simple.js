const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFlashcardsSimple() {
  console.log('=== –£–ü–†–û–©–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    console.log('\n1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
    const totalQuestions = await prisma.question.count();
    console.log(`–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: ${totalQuestions}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º text
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤...');
    const questionsWithEmptyText = await prisma.question.findMany({
      where: {
        OR: [{ text: null }, { text: '' }],
      },
      select: {
        id: true,
        text: true,
        question: true,
      },
    });
    console.log(`–í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º text: ${questionsWithEmptyText.length}`);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤ API
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ API...');
    const apiFilterConditions = {
      text: {
        not: {
          in: [null, ''],
        },
      },
    };

    const filteredQuestions = await prisma.question.findMany({
      where: apiFilterConditions,
      take: 5,
      select: {
        id: true,
        text: true,
        topic: true,
        difficulty: true,
      },
    });

    console.log(`–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ API: ${filteredQuestions.length}`);

    if (filteredQuestions.length === 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: API —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã!');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...');

      const alternativeFilter1 = await prisma.question.findMany({
        where: {
          text: {
            not: null,
          },
        },
        take: 5,
        select: { id: true, text: true },
      });
      console.log(
        `–° —É—Å–ª–æ–≤–∏–µ–º "text not null": ${alternativeFilter1.length} –≤–æ–ø—Ä–æ—Å–æ–≤`
      );

      const alternativeFilter2 = await prisma.question.findMany({
        where: {
          text: {
            not: '',
          },
        },
        take: 5,
        select: { id: true, text: true },
      });
      console.log(
        `–° —É—Å–ª–æ–≤–∏–µ–º "text not empty": ${alternativeFilter2.length} –≤–æ–ø—Ä–æ—Å–æ–≤`
      );

      const alternativeFilter3 = await prisma.question.findMany({
        where: {
          AND: [{ text: { not: null } }, { text: { not: '' } }],
        },
        take: 5,
        select: { id: true, text: true },
      });
      console.log(
        `–° —É—Å–ª–æ–≤–∏–µ–º AND (not null AND not empty): ${alternativeFilter3.length} –≤–æ–ø—Ä–æ—Å–æ–≤`
      );
    } else {
      console.log('‚úÖ API —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('–ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:');
      filteredQuestions.forEach((q, index) => {
        console.log(
          `  ${index + 1}. ID: ${q.id}, text: "${q.text?.substring(0, 50)}..."`
        );
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ API
    console.log('\n4. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–∞...');
    const fullApiQuery = await prisma.question.findMany({
      where: apiFilterConditions,
      orderBy: { createdAt: 'desc' },
      take: 10,
      include: {
        userProgress: {
          where: {
            userId: 'test-user-id',
          },
          orderBy: {
            lastReviewed: 'desc',
          },
          take: 1,
        },
        favoriteQuestions: {
          where: {
            userId: 'test-user-id',
          },
        },
      },
    });

    console.log(`–ü–æ–ª–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª: ${fullApiQuery.length} –≤–æ–ø—Ä–æ—Å–æ–≤`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\n5. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...');
    const firstQuestions = await prisma.question.findMany({
      take: 3,
      select: {
        id: true,
        text: true,
        question: true,
        topic: true,
        difficulty: true,
      },
    });

    firstQuestions.forEach((q, index) => {
      console.log(`\n–í–æ–ø—Ä–æ—Å ${index + 1}:`);
      console.log(`  ID: ${q.id}`);
      console.log(`  text: "${q.text}"`);
      console.log(`  question: "${q.question}"`);
      console.log(`  topic: ${q.topic}`);
      console.log(`  difficulty: ${q.difficulty}`);
      console.log(`  text –ø—É—Å—Ç–æ–π: ${!q.text || q.text.trim() === ''}`);
      console.log(`  text null: ${q.text === null}`);
      console.log(`  text undefined: ${q.text === undefined}`);
    });

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

testFlashcardsSimple();
