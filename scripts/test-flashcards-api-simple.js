const http = require('http');
const https = require('https');
const { URL } = require('url');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = 'http://localhost:3000';
const API_ENDPOINT = '/api/flashcards/questions';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(params = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(API_ENDPOINT, BASE_URL);
    Object.keys(params).forEach((key) => {
      if (params[key] !== undefined) {
        url.searchParams.append(key, params[key]);
      }
    });

    console.log(`üîó –ó–∞–ø—Ä–æ—Å: ${url.toString()}`);

    const protocol = url.protocol === 'https:' ? https : http;

    const req = protocol.get(
      url.toString(),
      {
        timeout: 10000,
      },
      (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          try {
            const parsedData = data ? JSON.parse(data) : {};
            resolve({
              status: res.statusCode,
              data: parsedData,
              headers: res.headers,
            });
          } catch (error) {
            resolve({
              status: res.statusCode,
              data: { rawData: data },
              parseError: error.message,
            });
          }
        });
      }
    );

    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message);
      resolve({
        status: 0,
        error: error.message,
      });
    });

    req.on('timeout', () => {
      req.destroy();
      resolve({
        status: 0,
        error: 'Timeout',
      });
    });
  });
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const TEST_CASES = [
  {
    name: '–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
    params: {},
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API',
  },
  {
    name: '–ó–∞–ø—Ä–æ—Å —Å –ª–∏–º–∏—Ç–æ–º',
    params: { limit: 5 },
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ limit',
  },
  {
    name: '–§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
    params: { difficulty: 'easy', limit: 3 },
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
  },
  {
    name: '–†–µ–∂–∏–º study',
    params: { mode: 'study', limit: 3 },
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è',
  },
  {
    name: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
    params: { difficulty: 'invalid' },
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
  },
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫');
  console.log('='.repeat(60));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  try {
    const questionCount = await prisma.question.count();
    console.log(
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}`
    );

    if (questionCount === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    const sampleQuestions = await prisma.question.findMany({
      take: 3,
      select: {
        id: true,
        text: true,
        topic: true,
        difficulty: true,
      },
    });

    console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î:');
    sampleQuestions.forEach((q, i) => {
      console.log(
        `  ${i + 1}. [${q.difficulty || 'N/A'}] ${q.topic || 'N/A'}: ${
          q.text?.substring(0, 50) || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'
        }...`
      );
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ø—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª—è–ª–∏)
    const emptyTextCount = await prisma.question.count({
      where: {
        OR: [{ text: { equals: null } }, { text: { equals: '' } }],
      },
    });

    console.log(`üîç –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${emptyTextCount}`);

    if (emptyTextCount > 0) {
      console.log(
        '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º - —ç—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API'
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
    return;
  }

  console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...');
  console.log('='.repeat(60));

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  const serverCheck = await makeRequest();

  if (serverCheck.status === 0) {
    console.log(
      '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Next.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000'
    );
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev –∏–ª–∏ yarn dev');
    return;
  }

  console.log(`üìä –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${serverCheck.status}`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  if (serverCheck.status === 401) {
    console.log('üîê API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)');
    console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(serverCheck.data, null, 2));
  } else if (serverCheck.status === 405) {
    console.log('‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–æ—É—Ç–∏–Ω–≥–æ–º');
  } else if (serverCheck.status === 500) {
    console.log('üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(serverCheck.data, null, 2));
  } else if (serverCheck.status === 200) {
    console.log('‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
    console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(serverCheck.data, null, 2));
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
  for (let i = 0; i < TEST_CASES.length; i++) {
    const testCase = TEST_CASES[i];
    console.log(`\nüî¨ –¢–µ—Å—Ç ${i + 1}/${TEST_CASES.length}: ${testCase.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}`);
    console.log(`üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, testCase.params);

    const response = await makeRequest(testCase.params);

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (response.error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.error}`);
      continue;
    }

    if (response.parseError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${response.parseError}`);
      console.log(`üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:`, response.data.rawData?.substring(0, 200));
      continue;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if (response.status === 401) {
      console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–∂–∏–¥–∞–µ–º–æ)');
    } else if (response.status === 400) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', response.data.message);
    } else if (response.status === 500) {
      console.log('üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('üìù –û—à–∏–±–∫–∞:', response.data.message || response.data.error);
    } else if (response.status === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
      if (response.data.questions) {
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${response.data.questions.length}`);
        console.log(`üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${response.data.totalAvailable}`);
        console.log(`üìä –†–µ–∂–∏–º: ${response.data.mode}`);
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('='.repeat(60));

  console.log('\nüîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:');

  if (serverCheck.status === 401) {
    console.log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã');
    console.log('‚úÖ –†–æ—É—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è');
  } else if (serverCheck.status === 500) {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  } else if (serverCheck.status === 0) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ Next.js —Å–µ—Ä–≤–µ—Ä: npm run dev');
  }

  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Next.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
  console.log('3. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
  console.log(
    '4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Prisma –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π'
  );
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runTests()
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  });
