/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É API endpoint /api/user/profile
 */

const http = require('http');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';

      res.on('data', (chunk) => {
        body += chunk;
      });

      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: jsonBody,
            rawBody: body,
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: null,
            rawBody: body,
            parseError: error.message,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(data);
    }

    req.end();
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerStatus() {
  log('\n=== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê ===', 'cyan');

  try {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/',
      method: 'GET',
      timeout: 5000,
    };

    const response = await makeRequest(options);

    if (response.statusCode === 200) {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:3000', 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}`, 'yellow');
      return true; // –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
    }
  } catch (error) {
    log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'red');
    log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev', 'cyan');
    return false;
  }
}

// –¢–µ—Å—Ç API –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAPIWithoutAuth() {
  log('\n=== –¢–ï–°–¢ API –ë–ï–ó –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===', 'cyan');

  try {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/user/profile',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/user/profile...', 'blue');
    const response = await makeRequest(options);

    log(
      `–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`,
      response.statusCode === 401 ? 'green' : 'red'
    );
    log(`–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(response.body, null, 2)}`, 'yellow');

    if (response.statusCode === 401) {
      log('‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é', 'green');
      return true;
    } else if (response.statusCode === 500) {
      log('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ - —ç—Ç–æ –Ω–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞!', 'red');
      return false;
    } else {
      log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`, 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error.message}`, 'red');
    return false;
  }
}

// –¢–µ—Å—Ç NextAuth endpoints
async function testNextAuthEndpoints() {
  log('\n=== –¢–ï–°–¢ NEXTAUTH ENDPOINTS ===', 'cyan');

  const endpoints = [
    '/api/auth/providers',
    '/api/auth/session',
    '/api/auth/csrf',
  ];

  let allPassed = true;

  for (const endpoint of endpoints) {
    try {
      const options = {
        hostname: 'localhost',
        port: 3000,
        path: endpoint,
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      };

      log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º ${endpoint}...`, 'blue');
      const response = await makeRequest(options);

      if (response.statusCode === 200) {
        log(`‚úÖ ${endpoint} - OK`, 'green');
      } else {
        log(`‚ùå ${endpoint} - —Å—Ç–∞—Ç—É—Å ${response.statusCode}`, 'red');
        allPassed = false;
      }
    } catch (error) {
      log(`‚ùå ${endpoint} - –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
      allPassed = false;
    }
  }

  return allPassed;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerLogs() {
  log('\n=== –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–†–û–í–ï–†–ö–ï –õ–û–ì–û–í ===', 'cyan');

  log('üìù –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'yellow');
  log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º (npm run dev)', 'blue');
  log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É http://localhost:3000/user/profile', 'blue');
  log('3. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è', 'blue');
  log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å–µ—Ä–≤–µ—Ä–∞', 'blue');
  log('5. –ò—â–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º [PROFILE API]', 'blue');

  log('\nüîç –ß—Ç–æ –∏—Å–∫–∞—Ç—å –≤ –ª–æ–≥–∞—Ö:', 'yellow');
  log('- üîç [PROFILE API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {...}', 'cyan');
  log('- üîç [PROFILE API] –°–µ—Å—Å–∏—è: {...}', 'cyan');
  log('- üîç [PROFILE API] –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: ...', 'cyan');
  log('- üîç [PROFILE API] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {...}', 'cyan');
  log('- ‚ùå [PROFILE API] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {...}', 'cyan');

  return true;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createTestUser() {
  log('\n=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===', 'cyan');

  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({
      where: { email: 'test@example.com' },
    });

    if (existingUser) {
      log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
      await prisma.$disconnect();
      return true;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        id: 'test-user-profile',
        email: 'test@example.com',
        name: 'Test User Profile',
        role: 'user',
        emailVerified: new Date(),
        userPoints: {
          create: {
            points: 100,
          },
        },
      },
    });

    log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', 'green');
    log(`Email: ${testUser.email}`, 'yellow');
    log(`ID: ${testUser.id}`, 'yellow');

    await prisma.$disconnect();
    return true;
  } catch (error) {
    log(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
      'red'
    );
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnostics() {
  log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ "–í–ù–£–¢–†–ï–ù–ù–Ø–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê"', 'magenta');
  log('=' * 60, 'magenta');

  const results = {
    serverStatus: false,
    apiWithoutAuth: false,
    nextAuthEndpoints: false,
    testUserCreated: false,
    logsChecked: true,
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.serverStatus = await checkServerStatus();

  if (results.serverStatus) {
    results.apiWithoutAuth = await testAPIWithoutAuth();
    results.nextAuthEndpoints = await testNextAuthEndpoints();
    results.testUserCreated = await createTestUser();
    results.logsChecked = await checkServerLogs();
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' * 60, 'magenta');
  log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò', 'magenta');
  log('=' * 60, 'magenta');

  Object.entries(results).forEach(([test, passed]) => {
    const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù';
    const color = passed ? 'green' : 'red';
    log(`${test}: ${status}`, color);
  });

  const passedCount = Object.values(results).filter(Boolean).length;
  const totalCount = Object.keys(results).length;

  log(
    `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedCount}/${totalCount} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`,
    passedCount === totalCount ? 'green' : 'yellow'
  );

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:', 'cyan');

  if (!results.serverStatus) {
    log('1. ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: npm run dev', 'red');
  } else if (!results.apiWithoutAuth) {
    log(
      '1. ‚ùå –ö–†–ò–¢–ò–ß–ù–û: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –æ—à–∏–±–∫—É - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞',
      'red'
    );
    log(
      '2. üîç –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/user/profile –≤ –±—Ä–∞—É–∑–µ—Ä–µ',
      'yellow'
    );
    log('3. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫', 'yellow');
  } else {
    log('1. ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'green');
    log('2. üîç –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Å—Å–∏–∏', 'yellow');
    log('3. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'yellow');
  }

  if (!results.nextAuthEndpoints) {
    log('4. ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å NextAuth - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', 'red');
  }

  log('\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:', 'cyan');
  log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000/user/profile', 'blue');
  log('2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (email: test@example.com, –ø–∞—Ä–æ–ª—å: –ª—é–±–æ–π)', 'blue');
  log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Å–µ—Ä–≤–µ—Ä–∞', 'blue');
  log(
    '4. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏, —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
    'blue'
  );

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (require.main === module) {
  runDiagnostics().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  runDiagnostics,
  checkServerStatus,
  testAPIWithoutAuth,
  testNextAuthEndpoints,
  createTestUser,
};
