const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFlashcardsDatabase() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    const totalQuestions = await prisma.question.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: ${totalQuestions}`);

    if (totalQuestions === 0) {
      console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const recentQuestions = await prisma.question.findMany({
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        id: true,
        text: true,
        topic: true,
        difficulty: true,
        category: true,
        createdAt: true,
      },
    });

    console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:');
    recentQuestions.forEach((q, index) => {
      console.log(`${index + 1}. ID: ${q.id}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${q.text?.substring(0, 80)}...`);
      console.log(`   –¢–µ–º–∞: ${q.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${q.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${q.createdAt}`);
      console.log('');
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º
    const topicStats = await prisma.question.groupBy({
      by: ['topic'],
      _count: {
        id: true,
      },
      orderBy: {
        _count: {
          id: 'desc',
        },
      },
    });

    console.log('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–∞–º:');
    topicStats.forEach((stat) => {
      console.log(`   ${stat.topic || '–ë–µ–∑ —Ç–µ–º—ã'}: ${stat._count.id} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficultyStats = await prisma.question.groupBy({
      by: ['difficulty'],
      _count: {
        id: true,
      },
      orderBy: {
        _count: {
          id: 'desc',
        },
      },
    });

    console.log('\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:');
    difficultyStats.forEach((stat) => {
      console.log(
        `   ${stat.difficulty || '–ë–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'}: ${stat._count.id} –≤–æ–ø—Ä–æ—Å–æ–≤`
      );
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    const emptyTextQuestions = await prisma.question.count({
      where: {
        OR: [{ text: null }, { text: '' }],
      },
    });

    console.log(`\n‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${emptyTextQuestions}`);

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å (–∏–º–∏—Ç–∏—Ä—É–µ–º)
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ API:');

    const apiTestConditions = {
      text: {
        not: null,
      },
    };

    const apiFilteredQuestions = await prisma.question.count({
      where: apiTestConditions,
    });

    console.log(`   –í–æ–ø—Ä–æ—Å—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${apiFilteredQuestions}`);

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    const recentlyAdded = await prisma.question.count({
      where: {
        createdAt: {
          gte: yesterday,
        },
      },
    });

    console.log(
      `\nüïí –í–æ–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${recentlyAdded}`
    );

    if (recentlyAdded > 0) {
      const newQuestions = await prisma.question.findMany({
        where: {
          createdAt: {
            gte: yesterday,
          },
        },
        orderBy: { createdAt: 'desc' },
        take: 3,
        select: {
          id: true,
          text: true,
          createdAt: true,
        },
      });

      console.log('\nüÜï –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:');
      newQuestions.forEach((q, index) => {
        console.log(
          `${index + 1}. ID: ${q.id} - ${q.text?.substring(0, 60)}... (${
            q.createdAt
          })`
        );
      });
    }

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFlashcardsDatabase();
