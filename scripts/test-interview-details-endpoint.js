const fetch = require('node-fetch');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testInterviewDetailsEndpoint() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä–≤—å—é...');
  console.log('üåê –ë–∞–∑–æ–≤—ã–π URL: http://localhost:3000');
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('============================================================');

  let testUserId = null;
  let testInterviewId = null;
  let testSessionToken = null;

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = await prisma.user.create({
      data: {
        name: 'Test User for Interview Details',
        email: 'test-interview-details@example.com',
        role: 'user',
      },
    });
    testUserId = testUser.id;
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUserId}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    console.log('\nüîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...');
    const sessionToken = require('crypto').randomBytes(32).toString('hex');
    testSessionToken = sessionToken;
    console.log(
      `üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω sessionToken: ${sessionToken.substring(0, 16)}...`
    );

    const sessionExpires = new Date();
    sessionExpires.setDate(sessionExpires.getDate() + 1);

    await prisma.session.create({
      data: {
        sessionToken: sessionToken,
        userId: testUserId,
        expires: sessionExpires,
      },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è database —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
    console.log('\nüé• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é...');
    const scheduledTime = new Date();
    scheduledTime.setHours(scheduledTime.getHours() + 2);

    const testInterview = await prisma.mockInterview.create({
      data: {
        interviewerId: testUserId,
        scheduledTime: scheduledTime,
        meetingLink: 'http://localhost:3000/test-meeting',
        status: 'pending',
        videoType: 'built_in',
      },
    });
    testInterviewId = testInterview.id;
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: ${testInterviewId}`);

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    console.log(
      '\nüîç –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π'
    );
    const response1 = await fetch(
      `http://localhost:3000/api/mock-interviews/${testInterviewId}`,
      {
        method: 'GET',
        headers: {
          Cookie: `next-auth.session-token=${sessionToken}`,
        },
      }
    );

    console.log(
      `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response1.status} ${response1.statusText}`
    );

    if (response1.ok) {
      const data = await response1.json();
      console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìù ID –∏–Ω—Ç–µ—Ä–≤—å—é: ${data.id}`);
      console.log(`üë§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${data.interviewer?.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(
        `üìÖ –í—Ä–µ–º—è: ${new Date(data.scheduledTime).toLocaleString('ru-RU')}`
      );
      console.log(`üé• –¢–∏–ø –≤–∏–¥–µ–æ: ${data.videoType}`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${data.status}`);
      console.log(`üîë –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.currentUserRole}`);
      console.log(`‚úÖ –Ø–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–º: ${data.isCurrentUserInterviewer}`);
    } else {
      const errorData = await response1.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: ${errorData}`);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüîç –¢–ï–°–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    const response2 = await fetch(
      `http://localhost:3000/api/mock-interviews/${testInterviewId}`,
      {
        method: 'GET',
      }
    );

    console.log(
      `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response2.status} ${response2.statusText}`
    );

    if (response2.status === 401) {
      console.log(
        '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'
      );
    } else {
      console.log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω ${response2.status}`);
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
    console.log('\nüîç –¢–ï–°–¢ 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é');
    const fakeId = 'fake-interview-id-12345';
    const response3 = await fetch(
      `http://localhost:3000/api/mock-interviews/${fakeId}`,
      {
        method: 'GET',
        headers: {
          Cookie: `next-auth.session-token=${sessionToken}`,
        },
      }
    );

    console.log(
      `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response3.status} ${response3.statusText}`
    );

    if (response3.status === 404) {
      console.log(
        '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é'
      );
    } else {
      console.log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 404, –ø–æ–ª—É—á–µ–Ω ${response3.status}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞
    console.log('\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ (POST)');
    const response4 = await fetch(
      `http://localhost:3000/api/mock-interviews/${testInterviewId}`,
      {
        method: 'POST',
        headers: {
          Cookie: `next-auth.session-token=${sessionToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ test: 'data' }),
      }
    );

    console.log(
      `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response4.status} ${response4.statusText}`
    );

    if (response4.status === 405) {
      console.log(
        '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ 405 –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞'
      );
    } else {
      console.log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 405, –ø–æ–ª—É—á–µ–Ω ${response4.status}`);
    }

    console.log(
      '\n============================================================'
    );
    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API endpoint:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
      if (testInterviewId) {
        await prisma.mockInterview.delete({
          where: { id: testInterviewId },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —É–¥–∞–ª–µ–Ω–æ');
      }

      if (testSessionToken) {
        await prisma.session.deleteMany({
          where: { sessionToken: testSessionToken },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
      }

      if (testUserId) {
        await prisma.user.delete({
          where: { id: testUserId },
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }

      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (cleanupError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', cleanupError);
    }

    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testInterviewDetailsEndpoint().catch(console.error);
