#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç NextAuth.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–µ—Å—Å–∏–∏
 */

const http = require('http');

const BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = http.request(
      url,
      {
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Auth-Diagnosis-Script',
          ...options.headers,
        },
      },
      (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          resolve({
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            body: data,
            contentType: res.headers['content-type'] || 'unknown',
          });
        });
      }
    );

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function checkAuthConfiguration() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(50));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NextAuth.js —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  const authEndpoints = [
    '/api/auth/session',
    '/api/auth/providers',
    '/api/auth/csrf',
  ];

  for (const endpoint of authEndpoints) {
    try {
      const url = `${BASE_URL}${endpoint}`;
      console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);

      const response = await makeRequest(url);
      console.log(`–°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      console.log(`Content-Type: ${response.contentType}`);

      if (response.status === 200) {
        try {
          const data = JSON.parse(response.body);
          console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');

          if (endpoint === '/api/auth/session') {
            if (Object.keys(data).length === 0) {
              console.log(
                '‚ÑπÔ∏è  –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)'
              );
            } else {
              console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', Object.keys(data));
            }
          } else if (endpoint === '/api/auth/providers') {
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:', Object.keys(data));
          }
        } catch (e) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
        }
      } else {
        console.log('‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
    }
  }
}

async function checkBrowserScenario() {
  console.log('\nüåê –°–ò–ú–£–õ–Ø–¶–ò–Ø –ë–†–ê–£–ó–ï–†–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø');
  console.log('='.repeat(50));

  console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ mock-interviews...');
  try {
    const pageResponse = await makeRequest(`${BASE_URL}/mock-interviews`);
    console.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ mock-interviews: ${pageResponse.status}`);

    if (pageResponse.status === 200) {
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ JavaScript –∫–æ–¥ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
      if (
        pageResponse.body.includes('fetch') &&
        pageResponse.body.includes('/api/')
      ) {
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç JavaScript –∫–æ–¥ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤');
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
  }

  console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  try {
    const apiResponse = await makeRequest(`${BASE_URL}/api/mock-interviews`);
    console.log(`API mock-interviews: ${apiResponse.status}`);

    if (apiResponse.status === 401) {
      console.log(
        '‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'
      );

      try {
        const errorData = JSON.parse(apiResponse.body);
        console.log(
          'üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:',
          errorData.message || errorData.error
        );
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É');
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

async function analyzeAuthFlow() {
  console.log('\nüîÑ –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(50));

  console.log('\nüìã –û–ñ–ò–î–ê–ï–ú–´–ô –ü–û–¢–û–ö:');
  console.log('1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ /mock-interviews');
  console.log('2. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç JavaScript');
  console.log('3. JavaScript –¥–µ–ª–∞–µ—Ç fetch –∑–∞–ø—Ä–æ—Å—ã –∫ API');
  console.log('4. API –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ NextAuth.js');
  console.log('5. –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401');
  console.log('6. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 401 –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');

  console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
  console.log('1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)');
  console.log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å cookies/—Å–µ—Å—Å–∏—è–º–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–æ–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
  console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å NextAuth.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
  console.log('5. –ü—Ä–æ–±–ª–µ–º—ã —Å CORS –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');

  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JavaScript –æ—à–∏–±–æ–∫');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Network tab –≤ DevTools –±—Ä–∞—É–∑–µ—Ä–∞');
  console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—à–∏–±–∫–∏');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
async function runFullDiagnosis() {
  await checkAuthConfiguration();
  await checkBrowserScenario();
  await analyzeAuthFlow();

  console.log('\n' + '='.repeat(50));
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSON.');
  console.log('–ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ —Ç–æ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML.');
  console.log('–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 (Unauthorized).');
  console.log('–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  console.log('\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—à–∏–±–∫–∏');
  console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫');
}

runFullDiagnosis().catch(console.error);
