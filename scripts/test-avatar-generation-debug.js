/**
 * –¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
 */

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏...\n');

// –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∫–∏
async function testAvatarGeneration() {
  try {
    console.log('1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∫–∏...');

    const testData = {
      action: 'generate',
      name: 'Test User',
    };

    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', testData);
    console.log('üîó URL:', '/api/user/avatar');
    console.log('üì° –ú–µ—Ç–æ–¥:', 'POST');
    console.log('üìã Content-Type:', 'application/json');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º fetch –∑–∞–ø—Ä–æ—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    const response = await fetch('/api/user/avatar', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });

    console.log('\nüì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('   –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('   –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', response.statusText);
    console.log('   OK:', response.ok);

    const data = await response.json();
    console.log('   –î–∞–Ω–Ω—ã–µ:', data);

    if (!response.ok) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞:', data.error);

      if (data.error === '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è') {
        console.log(
          '\nüîç –î–ò–ê–ì–ù–û–ó: API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç POST –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏'
        );
        console.log('üí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É POST –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ API');
      }
    } else {
      console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);

    if (error.message.includes('fetch')) {
      console.log(
        '\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π'
      );
    }
  }
}

// –ê–Ω–∞–ª–∏–∑ API endpoint
function analyzeApiEndpoint() {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ API endpoint /api/user/avatar:');
  console.log('   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã: GET, PUT, DELETE');
  console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥: POST');
  console.log(
    '   –ü—Ä–æ–±–ª–µ–º–∞: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST, –Ω–æ API –µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç'
  );

  console.log('\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:');
  console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É POST –º–µ—Ç–æ–¥–∞ –≤ API');
  console.log('   2. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
  console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
}

// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ
function proposeSolution() {
  console.log('\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:');
  console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –≤ API –æ–±—Ä–∞–±–æ—Ç–∫—É POST –º–µ—Ç–æ–¥–∞');
  console.log('   2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å action="generate" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
  console.log('   3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å action="upload" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
  console.log('   4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å action="url" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL');
  console.log('   5. –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeApiEndpoint();
proposeSolution();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  window.testAvatarGeneration = testAvatarGeneration;
  console.log(
    '\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: testAvatarGeneration()'
  );
}

console.log(
  '\nüéØ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç POST –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏'
);
console.log('üîß –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é');
