/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId
 * –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testUserIdFix() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId...');
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
  console.log('='.repeat(60));

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = await prisma.user.upsert({
      where: { email: 'test-userid@example.com' },
      update: {},
      create: {
        email: 'test-userid@example.com',
        name: 'Test User for UserId Fix',
        role: 'user',
      },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ VideoRoom –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Prisma
    console.log('\nüé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VideoRoom...');

    const videoRoomData = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ userId',
      description: '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ userId',
      hostId: testUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ hostId
      code: `TEST${Date.now()}`,
      isPrivate: true,
      maxParticipants: 2,
      scheduledStart: new Date(Date.now() + 2 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
      recordingEnabled: false,
      settings: {
        allowScreenShare: true,
        allowChat: true,
        autoRecord: false,
      },
    };

    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VideoRoom:', {
      name: videoRoomData.name,
      hostId: videoRoomData.hostId,
      code: videoRoomData.code,
      isPrivate: videoRoomData.isPrivate,
      maxParticipants: videoRoomData.maxParticipants,
    });

    const videoRoom = await prisma.videoRoom.create({
      data: videoRoomData,
      include: {
        host: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
      },
    });

    console.log('‚úÖ VideoRoom —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìù –î–µ—Ç–∞–ª–∏ VideoRoom:', {
      id: videoRoom.id,
      code: videoRoom.code,
      name: videoRoom.name,
      hostId: videoRoom.hostId,
      hostName: videoRoom.host.name,
      isActive: videoRoom.isActive,
      scheduledStart: videoRoom.scheduledStart,
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ MockInterview —Å —Å–≤—è–∑—å—é –∫ VideoRoom
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è MockInterview...');

    const mockInterviewData = {
      interviewerId: testUser.id,
      scheduledTime: new Date(Date.now() + 2 * 60 * 60 * 1000),
      meetingLink: `http://localhost:3000/video-conferences/rooms/${videoRoom.code}`,
      status: 'pending',
      videoType: 'built_in',
      videoRoomId: videoRoom.id,
    };

    const mockInterview = await prisma.mockInterview.create({
      data: mockInterviewData,
      include: {
        videoRoom: {
          select: {
            id: true,
            code: true,
            name: true,
            isActive: true,
          },
        },
        interviewer: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
      },
    });

    console.log('‚úÖ MockInterview —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìù –î–µ—Ç–∞–ª–∏ MockInterview:', {
      id: mockInterview.id,
      videoType: mockInterview.videoType,
      videoRoomId: mockInterview.videoRoomId,
      videoRoomCode: mockInterview.videoRoom?.code,
      meetingLink: mockInterview.meetingLink,
      status: mockInterview.status,
      interviewerName: mockInterview.interviewer.name,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏...');

    const videoRoomWithInterviews = await prisma.videoRoom.findUnique({
      where: { id: videoRoom.id },
      include: {
        mockInterviews: true,
        host: {
          select: { id: true, name: true },
        },
      },
    });

    console.log('‚úÖ –°–≤—è–∑–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π:', {
      videoRoomId: videoRoomWithInterviews.id,
      hostId: videoRoomWithInterviews.hostId,
      hostName: videoRoomWithInterviews.host.name,
      connectedInterviews: videoRoomWithInterviews.mockInterviews.length,
      interviewIds: videoRoomWithInterviews.mockInterviews.map((i) => i.id),
    });

    console.log('\n' + '='.repeat(60));
    console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –û—à–∏–±–∫–∞ userId –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ VideoRoom —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º hostId');
    console.log('‚úÖ MockInterview –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å VideoRoom');
    console.log('‚úÖ –í—Å–µ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.mockInterview.delete({ where: { id: mockInterview.id } });
    await prisma.videoRoom.delete({ where: { id: videoRoom.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    return true;
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      console.log('\nüßπ –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
      await prisma.mockInterview.deleteMany({
        where: { interviewer: { email: 'test-userid@example.com' } },
      });
      await prisma.videoRoom.deleteMany({
        where: { host: { email: 'test-userid@example.com' } },
      });
      await prisma.user.deleteMany({
        where: { email: 'test-userid@example.com' },
      });
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (cleanupError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', cleanupError.message);
    }

    return false;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testUserIdFix()
    .then((success) => {
      if (success) {
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• –†–ï–ó–£–õ–¨–¢–ê–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
      process.exit(1);
    });
}

module.exports = { testUserIdFix };
