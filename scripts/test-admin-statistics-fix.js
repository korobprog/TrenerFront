/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 */

const https = require('https');

// –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
const agent = new https.Agent({
  rejectUnauthorized: false,
});

async function testStatisticsAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const loginResponse = await fetch(
      'https://localhost:3000/api/auth/signin',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: 'korobprog@gmail.com',
          password: 'Qwerty123!',
        }),
        agent,
      }
    );

    if (!loginResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${loginResponse.status}`);
    }

    const cookies = loginResponse.headers.get('set-cookie');
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResponse = await fetch(
      'https://localhost:3000/api/admin/statistics',
      {
        method: 'GET',
        headers: {
          Cookie: cookies,
        },
        agent,
      }
    );

    if (!statsResponse.ok) {
      const errorData = await statsResponse.json().catch(() => ({}));
      throw new Error(
        `–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsResponse.status} - ${JSON.stringify(
          errorData
        )}`
      );
    }

    const data = await statsResponse.json();
    console.log('‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:');
    console.log(JSON.stringify(data, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');

    if (data.success && data.data) {
      console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { success: true, data: {...} }');

      const apiData = data.data;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (apiData.users && typeof apiData.users.total === 'number') {
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: total = ${apiData.users.total}`);
      } else {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
      if (apiData.interviews) {
        console.log(`‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: active = ${apiData.interviews.active}`);
        if (apiData.interviews.byStatus) {
          console.log(
            '‚úÖ –°—Ç–∞—Ç—É—Å—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:',
            Object.keys(apiData.interviews.byStatus)
          );

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const totalInterviews = Object.values(
            apiData.interviews.byStatus
          ).reduce((sum, count) => sum + count, 0);
          console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: ${totalInterviews}`);

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
          const byStatus = apiData.interviews.byStatus;
          const activeCount =
            (byStatus.pending || 0) +
            (byStatus.confirmed || 0) +
            (byStatus.in_progress || 0);
          console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: ${activeCount}`);
          console.log(`üìä –ù–µ—è–≤–∫–∏: ${byStatus.no_show || 0}`);
        }
      } else {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∫–∏
      if (apiData.points) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∫–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    } else {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testStatisticsAPI();
