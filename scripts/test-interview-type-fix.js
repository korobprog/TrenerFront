const fetch = require('node-fetch');

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π
async function testBuiltInVideoType() {
  console.log(
    'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–æ–π...'
  );

  try {
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    const interviewData = {
      scheduledTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –∑–∞–≤—Ç—Ä–∞
      videoType: 'built_in',
    };

    console.log(
      'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:',
      interviewData
    );

    const response = await fetch('http://localhost:3000/api/mock-interviews', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        Cookie: 'next-auth.session-token=test-session',
      },
      body: JSON.stringify(interviewData),
    });

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

    const responseData = await response.json();
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(responseData, null, 2));

    if (response.ok) {
      console.log('‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üé• –¢–∏–ø –≤–∏–¥–µ–æ:', responseData.videoType);
      console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:', responseData.meetingLink);

      if (responseData.videoRoom) {
        console.log('üè† –í–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', responseData.videoRoom);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏
      if (responseData.needManualLink) {
        console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏');
        console.log('üîç –ü—Ä–∏—á–∏–Ω–∞:', responseData.message);

        if (responseData.isAuthError) {
          console.log('üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Google');
        }
      }
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å Google Meet
async function testGoogleMeetType() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å Google Meet...');

  try {
    const interviewData = {
      scheduledTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      videoType: 'google_meet',
    };

    console.log(
      'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:',
      interviewData
    );

    const response = await fetch('http://localhost:3000/api/mock-interviews', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Cookie: 'next-auth.session-token=test-session',
      },
      body: JSON.stringify(interviewData),
    });

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

    const responseData = await response.json();
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(responseData, null, 2));
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
async function testVideoConferencesAPI() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π...');

  try {
    const roomData = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      description: '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      isPrivate: true,
      maxParticipants: 2,
      scheduledStartTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ —á–∞—Å
      recordingEnabled: false,
      settings: {
        allowScreenShare: true,
        allowChat: true,
        autoRecord: false,
      },
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã:', roomData);

    const response = await fetch(
      'http://localhost:3000/api/video-conferences',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Cookie: 'next-auth.session-token=test-session',
        },
        body: JSON.stringify(roomData),
      }
    );

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

    const responseData = await response.json();
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(responseData, null, 2));

    if (response.ok) {
      console.log('‚úÖ –í–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üè† ID –∫–æ–º–Ω–∞—Ç—ã:', responseData.id);
      console.log('üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', responseData.code);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç—ã');
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–¥–µ–æ...\n');

  await testVideoConferencesAPI();
  await testBuiltInVideoType();
  await testGoogleMeetType();

  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

runAllTests();
