import { useState } from 'react';
import styles from '../../styles/InterviewTypeSelector.module.css';

export default function InterviewTypeSelector({
  selectedType,
  onTypeSelect,
  onNext,
}) {
  const [hoveredType, setHoveredType] = useState(null);

  const interviewTypes = [
    {
      id: 'google_meet',
      title: 'Google Meet',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Meet –¥–ª—è –≤–∏–¥–µ–æ—Å–≤—è–∑–∏',
      icon: 'üìπ',
      features: [
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar',
        '–ó–Ω–∞–∫–æ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏',
      ],
      color: '#4285f4',
    },
    {
      id: 'built_in',
      title: '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º–∞',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∏–¥–µ–æ—Å–∏—Å—Ç–µ–º—É',
      icon: 'üé•',
      features: [
        '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º',
        '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å',
        '–ß–∞—Ç –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞',
        '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é',
      ],
      color: '#28a745',
    },
  ];

  const handleTypeSelect = (typeId) => {
    onTypeSelect(typeId);
  };

  const handleNext = () => {
    if (!selectedType) {
      return;
    }
    onNext();
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</h2>
      <p className={styles.subtitle}>
        –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
      </p>

      <div className={styles.typesGrid}>
        {interviewTypes.map((type) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–∞
          let colorClass = '';
          if (type.color === '#4285f4') {
            colorClass = styles.googleColor;
          } else if (type.color === '#28a745') {
            colorClass = styles.greenColor;
          }

          return (
            <div
              key={type.id}
              className={`${styles.typeCard} ${colorClass} ${
                selectedType === type.id ? styles.selected : ''
              } ${hoveredType === type.id ? styles.hovered : ''}`}
              onClick={() => handleTypeSelect(type.id)}
              onMouseEnter={() => setHoveredType(type.id)}
              onMouseLeave={() => setHoveredType(null)}
            >
              <div className={styles.cardHeader}>
                <div className={styles.iconContainer}>
                  <span className={styles.icon}>{type.icon}</span>
                </div>
                <div className={styles.cardTitle}>
                  <h3>{type.title}</h3>
                  <p className={styles.cardDescription}>{type.description}</p>
                </div>
              </div>

              <div className={styles.features}>
                <h4 className={styles.featuresTitle}>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h4>
                <ul className={styles.featuresList}>
                  {type.features.map((feature, index) => (
                    <li key={index} className={styles.feature}>
                      <span className={styles.featureIcon}>‚úì</span>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>

              <div className={styles.selectIndicator}>
                {selectedType === type.id && (
                  <div className={styles.selectedBadge}>
                    <span className={styles.selectedIcon}>‚úì</span>
                    –í—ã–±—Ä–∞–Ω–æ
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {!selectedType && (
        <div className={styles.hint}>
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        </div>
      )}

      <div className={styles.buttonGroup}>
        <button
          type="button"
          className={styles.nextButton}
          onClick={handleNext}
          disabled={!selectedType}
        >
          –î–∞–ª–µ–µ
        </button>
      </div>
    </div>
  );
}
