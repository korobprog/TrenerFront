import { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import FlashcardItem from './FlashcardItem';
import FlashcardControls from './FlashcardControls';
import SessionProgress from './SessionProgress';
import styles from '../../styles/Flashcards.module.css';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
 */
const FlashcardContainer = ({
  topic = null,
  difficulty = null,
  mode = 'study',
  limit = 10,
}) => {
  const { data: session } = useSession();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [questions, setQuestions] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [sessionId, setSessionId] = useState(null);
  const [totalAvailable, setTotalAvailable] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [isFlipped, setIsFlipped] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingAnswer, setIsGeneratingAnswer] = useState(false);
  const [error, setError] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  const [answers, setAnswers] = useState({});

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
  const [sessionStats, setSessionStats] = useState({
    known: 0,
    unknown: 0,
    partial: 0,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (session) {
      loadQuestions();
    }
  }, [session, topic, difficulty, mode, limit]);

  const loadQuestions = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const params = new URLSearchParams({
        mode,
        limit: limit.toString(),
        excludeAnswered: 'false',
      });

      if (topic) params.append('topic', topic);
      if (difficulty) params.append('difficulty', difficulty);

      const response = await fetch(`/api/flashcards/questions?${params}`);

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤');
      }

      const data = await response.json();

      console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–†–û–ù–¢–ï–ù–î–ê –§–õ–ï–®-–ö–ê–†–¢–û–ß–ï–ö ===');
      console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç API:', data);
      console.log(
        'üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:',
        data.questions?.length || 0
      );
      console.log('üîç –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', data.totalAvailable || 0);
      console.log('üîç Fallback —Ä–µ–∂–∏–º:', data.fallback || false);
      if (data.message) {
        console.log('üîç –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API:', data.message);
      }
      console.log(
        'üîç –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞:',
        data.questions?.slice(0, 3).map((q) => ({
          id: q.id,
          text: q.questionText?.substring(0, 50) + '...',
          topic: q.topic,
          difficulty: q.difficulty,
        }))
      );
      console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –§–†–û–ù–¢–ï–ù–î–ê ===');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
      if (!data.questions || data.questions.length === 0) {
        const errorMessage =
          data.message ||
          '–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.';
        setError(errorMessage);
        setQuestions([]);
        setSessionId(null);
        setTotalAvailable(0);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
      const validQuestions = data.questions.filter(
        (q) => q.questionText && q.questionText.trim() !== ''
      );

      if (validQuestions.length === 0) {
        setError(
          '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.'
        );
        setQuestions([]);
        setSessionId(null);
        setTotalAvailable(0);
        return;
      }

      if (validQuestions.length < data.questions.length) {
        console.warn(
          `‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${
            data.questions.length - validQuestions.length
          } –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞`
        );
      }

      setQuestions(validQuestions);
      setSessionId(data.sessionId);
      setTotalAvailable(data.totalAvailable || 0);
      setCurrentIndex(0);
      setIsFlipped(false);
      setAnswers({});
      setSessionStats({ known: 0, unknown: 0, partial: 0 });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ fallback —Ä–µ–∂–∏–º–µ
      if (data.fallback && data.message) {
        console.info('‚ÑπÔ∏è Fallback —Ä–µ–∂–∏–º:', data.message);
      }
    } catch (err) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –í–û–ü–†–û–°–û–í:', err);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: err.message,
        stack: err.stack,
        name: err.name,
      });
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    } finally {
      setIsLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const generateAnswer = async (questionId, questionText, context) => {
    try {
      console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
      setIsGeneratingAnswer(true);
      setError(null);

      if (!questionText || questionText.trim() === '') {
        throw new Error('–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—É—Å—Ç');
      }

      const response = await fetch('/api/flashcards/generate-answer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          questionId,
          questionText,
          context,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', {
          status: response.status,
          statusText: response.statusText,
          errorData,
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (response.status === 429) {
          throw new Error(
            errorData.message || '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          );
        } else if (response.status === 503) {
          throw new Error(
            errorData.message || '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          );
        } else if (response.status === 408) {
          throw new Error(
            errorData.message || '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
          );
        } else {
          throw new Error(
            errorData.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`
          );
        }
      }

      const data = await response.json();

      if (!data.answer) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      console.log('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', {
        questionId,
        answerLength: data.answer.length,
        source: data.source,
        cached: data.cached,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setAnswers((prev) => ({
        ...prev,
        [questionId]: {
          answer: data.answer,
          generatedAt: data.generatedAt,
          cached: data.cached,
          source: data.source,
        },
      }));

      return data.answer;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', err);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. ';

      if (err.message.includes('–ª–∏–º–∏—Ç')) {
        errorMessage += err.message;
      } else if (err.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
        errorMessage += err.message;
      } else if (err.message.includes('–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')) {
        errorMessage += err.message;
      } else {
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      }

      setError(errorMessage);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } finally {
      setIsGeneratingAnswer(false);
    }
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const handleNext = useCallback(() => {
    if (currentIndex < questions.length - 1) {
      setCurrentIndex((prev) => prev + 1);
      setIsFlipped(false); // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–û–ü–†–û–° –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
    }
  }, [currentIndex, questions.length]);

  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç)
  const handleFlip = useCallback(async () => {
    console.log('üîÑ handleFlip –≤—ã–∑–≤–∞–Ω, isFlipped:', isFlipped);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    setError(null);

    if (questions.length === 0) {
      console.warn('‚ö†Ô∏è handleFlip: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞');
      setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è');
      return;
    }

    const currentQuestion = questions[currentIndex];

    if (!currentQuestion) {
      console.error(
        '‚ùå handleFlip: —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, currentIndex:',
        currentIndex
      );
      setError(
        '–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
      );
      return;
    }

    if (
      !currentQuestion.questionText ||
      currentQuestion.questionText.trim() === ''
    ) {
      console.error('‚ùå handleFlip: –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞');
      setError('–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.');
      setTimeout(() => {
        handleNext();
      }, 2000);
      return;
    }

    console.log('üîÑ –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å:', {
      id: currentQuestion.id,
      hasText: !!currentQuestion.questionText,
      hasAnswer: currentQuestion.hasAnswer,
      isInAnswers: !!answers[currentQuestion.id],
    });

    try {
      if (!isFlipped) {
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç–≤–µ—Ç–∞
        console.log('üîÑ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç–≤–µ—Ç–∞');
        setIsFlipped(true);

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if (!answers[currentQuestion.id] && !currentQuestion.hasAnswer) {
          console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', currentQuestion.id);
          await generateAnswer(
            currentQuestion.id,
            currentQuestion.questionText,
            {
              topic: currentQuestion.topic,
              difficulty: currentQuestion.difficulty,
              tags: currentQuestion.tags,
            }
          );
        } else {
          console.log('‚úÖ –û—Ç–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      } else {
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        console.log('üîÑ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å');
        setIsFlipped(false);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleFlip:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setIsFlipped(false);
    }
  }, [questions, currentIndex, isFlipped, answers, handleNext]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const handlePrevious = useCallback(() => {
    if (currentIndex > 0) {
      setCurrentIndex((prev) => prev - 1);
      setIsFlipped(false); // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–û–ü–†–û–° –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
    }
  }, [currentIndex]);

  // –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const handleEvaluate = async (evaluation) => {
    if (questions.length === 0 || !sessionId) return;

    const currentQuestion = questions[currentIndex];

    try {
      const response = await fetch('/api/flashcards/evaluate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          questionId: currentQuestion.id,
          sessionId,
          evaluation,
          timeSpent: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
          wasGenerated: !!answers[currentQuestion.id],
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
      setSessionStats((prev) => ({
        ...prev,
        [evaluation === 'known'
          ? 'known'
          : evaluation === 'unknown'
          ? 'unknown'
          : 'partial']:
          prev[
            evaluation === 'known'
              ? 'known'
              : evaluation === 'unknown'
              ? 'unknown'
              : 'partial'
          ] + 1,
      }));

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      setTimeout(() => {
        handleNext();
      }, 500);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.errorMessage}>
          <h3>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={loadQuestions} className={styles.retryButton}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingMessage}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</p>
        </div>
      </div>
    );
  }

  // –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
  if (questions.length === 0) {
    return (
      <div className={styles.container}>
        <div className={styles.emptyMessage}>
          <h3>–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.</p>
          <button onClick={loadQuestions} className={styles.retryButton}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentIndex];
  const currentAnswer = answers[currentQuestion.id];

  return (
    <div className={styles.container}>
      <SessionProgress
        currentIndex={currentIndex}
        totalQuestions={questions.length}
        sessionStats={sessionStats}
        mode={mode}
      />

      <div className={styles.flashcardWrapper}>
        <FlashcardItem
          question={currentQuestion}
          answer={currentAnswer}
          isFlipped={isFlipped}
          isGeneratingAnswer={isGeneratingAnswer}
          onFlip={handleFlip}
        />
      </div>

      <FlashcardControls
        currentIndex={currentIndex}
        totalQuestions={questions.length}
        isFlipped={isFlipped}
        isGeneratingAnswer={isGeneratingAnswer}
        onPrevious={handlePrevious}
        onNext={handleNext}
        onFlip={handleFlip}
        onEvaluate={handleEvaluate}
      />
    </div>
  );
};

export default FlashcardContainer;
