import { useState } from 'react';
import styles from '../../styles/Flashcards.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
 */
const FlashcardControls = ({
  currentIndex,
  totalQuestions,
  isFlipped,
  isGeneratingAnswer,
  onPrevious,
  onNext,
  onFlip,
  onEvaluate,
}) => {
  const [selectedEvaluation, setSelectedEvaluation] = useState(null);
  const [isEvaluating, setIsEvaluating] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  const handleEvaluate = async (evaluation) => {
    setSelectedEvaluation(evaluation);
    setIsEvaluating(true);

    try {
      await onEvaluate(evaluation);
    } finally {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      setTimeout(() => {
        setSelectedEvaluation(null);
        setIsEvaluating(false);
      }, 500);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  const getEvaluationIcon = (evaluation) => {
    switch (evaluation) {
      case 'known':
        return '‚úÖ';
      case 'partial':
        return 'ü§î';
      case 'unknown':
        return '‚ùå';
      default:
        return '';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  const getEvaluationColor = (evaluation) => {
    switch (evaluation) {
      case 'known':
        return '#28a745';
      case 'partial':
        return '#ffc107';
      case 'unknown':
        return '#dc3545';
      default:
        return '#6c757d';
    }
  };

  return (
    <div className={styles.controlsContainer}>
      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className={styles.flipControls}>
        <button
          className={`${styles.flipButton} ${isFlipped ? styles.flipped : ''}`}
          onClick={onFlip}
          disabled={isGeneratingAnswer}
        >
          <span className={styles.flipIcon}>
            {isGeneratingAnswer ? (
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="2"
                />
                <path
                  d="M12 6v6l4 2"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            ) : isFlipped ? (
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M19 12H5"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M12 19l-7-7 7-7"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            ) : (
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M1 4v6h6"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            )}
          </span>
          <span className={styles.flipText}>
            {isGeneratingAnswer
              ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'
              : isFlipped
              ? '–ö –≤–æ–ø—Ä–æ—Å—É'
              : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç'}
          </span>
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞) */}
      {isFlipped && !isGeneratingAnswer && (
        <div className={styles.evaluationControls}>
          <div className={styles.evaluationTitle}>
            –ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç?
          </div>

          <div className={styles.evaluationButtons}>
            <button
              className={`${styles.evaluationButton} ${styles.known} ${
                selectedEvaluation === 'known' ? styles.selected : ''
              }`}
              onClick={() => handleEvaluate('known')}
              disabled={isEvaluating}
              style={{ backgroundColor: getEvaluationColor('known') }}
            >
              <span className={styles.evaluationIcon}>
                {getEvaluationIcon('known')}
              </span>
              <span className={styles.evaluationText}>–ó–Ω–∞–ª</span>
              <div className={styles.evaluationHint}>
                –û—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ
              </div>
            </button>

            <button
              className={`${styles.evaluationButton} ${styles.partial} ${
                selectedEvaluation === 'partial' ? styles.selected : ''
              }`}
              onClick={() => handleEvaluate('partial')}
              disabled={isEvaluating}
              style={{ backgroundColor: getEvaluationColor('partial') }}
            >
              <span className={styles.evaluationIcon}>
                {getEvaluationIcon('partial')}
              </span>
              <span className={styles.evaluationText}>–ß–∞—Å—Ç–∏—á–Ω–æ –∑–Ω–∞–ª</span>
              <div className={styles.evaluationHint}>
                –ó–Ω–∞–ª —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –±—ã–ª –Ω–µ—É–≤–µ—Ä–µ–Ω
              </div>
            </button>

            <button
              className={`${styles.evaluationButton} ${styles.unknown} ${
                selectedEvaluation === 'unknown' ? styles.selected : ''
              }`}
              onClick={() => handleEvaluate('unknown')}
              disabled={isEvaluating}
              style={{ backgroundColor: getEvaluationColor('unknown') }}
            >
              <span className={styles.evaluationIcon}>
                {getEvaluationIcon('unknown')}
              </span>
              <span className={styles.evaluationText}>–ù–µ –∑–Ω–∞–ª</span>
              <div className={styles.evaluationHint}>
                –ù–µ –∑–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
              </div>
            </button>
          </div>

          {isEvaluating && (
            <div className={styles.evaluatingMessage}>
              <div className={styles.evaluatingSpinner}></div>
              <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏...</span>
            </div>
          )}
        </div>
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
      <div className={styles.navigationControls}>
        <button
          className={`${styles.navButton} ${styles.previousButton}`}
          onClick={onPrevious}
          disabled={currentIndex === 0 || isEvaluating}
        >
          <span className={styles.navIcon}>‚¨ÖÔ∏è</span>
          <span className={styles.navText}>–ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
        </button>

        <div className={styles.positionIndicator}>
          <span className={styles.currentPosition}>{currentIndex + 1}</span>
          <span className={styles.positionSeparator}>–∏–∑</span>
          <span className={styles.totalPosition}>{totalQuestions}</span>
        </div>

        <button
          className={`${styles.navButton} ${styles.nextButton}`}
          onClick={onNext}
          disabled={currentIndex >= totalQuestions - 1 || isEvaluating}
        >
          <span className={styles.navText}>–°–ª–µ–¥—É—é—â–∏–π</span>
          <span className={styles.navIcon}>‚û°Ô∏è</span>
        </button>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div className={styles.controlsHints}>
        {!isFlipped ? (
          <div className={styles.hint}>
            üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É
          </div>
        ) : isGeneratingAnswer ? (
          <div className={styles.hint}>
            ü§ñ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è...
          </div>
        ) : (
          <div className={styles.hint}>
            üìù –û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫
            —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          </div>
        )}
      </div>

      {/* –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ */}
      <div className={styles.hotkeys}>
        <div className={styles.hotkeyItem}>
          <kbd>Space</kbd> - –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        </div>
        <div className={styles.hotkeyItem}>
          <kbd>1</kbd> - –ó–Ω–∞–ª
        </div>
        <div className={styles.hotkeyItem}>
          <kbd>2</kbd> - –ß–∞—Å—Ç–∏—á–Ω–æ –∑–Ω–∞–ª
        </div>
        <div className={styles.hotkeyItem}>
          <kbd>3</kbd> - –ù–µ –∑–Ω–∞–ª
        </div>
        <div className={styles.hotkeyItem}>
          <kbd>‚Üê</kbd> - –ü—Ä–µ–¥—ã–¥—É—â–∏–π
        </div>
        <div className={styles.hotkeyItem}>
          <kbd>‚Üí</kbd> - –°–ª–µ–¥—É—é—â–∏–π
        </div>
      </div>
    </div>
  );
};

export default FlashcardControls;
