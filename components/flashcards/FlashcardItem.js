import { useState, useEffect } from 'react';
import styles from '../../styles/Flashcards.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–∫–∏ —Å 3D –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
 * –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç) —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
 */
const FlashcardItem = ({
  question,
  answer,
  isFlipped,
  isGeneratingAnswer,
  onFlip,
}) => {
  const [isAnimating, setIsAnimating] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
  useEffect(() => {
    setIsAnimating(true);
    const timer = setTimeout(() => {
      setIsAnimating(false);
    }, 300); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏

    return () => clearTimeout(timer);
  }, [isFlipped]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markdown
  const formatText = (text) => {
    if (!text) return '';

    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ markdown
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code>$1</code>')
      .replace(/\n/g, '<br>');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'easy':
        return '#28a745';
      case 'medium':
        return '#ffc107';
      case 'hard':
        return '#dc3545';
      default:
        return '#6c757d';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
  const getTopicIcon = (topic) => {
    const topicIcons = {
      javascript: 'üü®',
      react: '‚öõÔ∏è',
      nodejs: 'üü¢',
      css: 'üé®',
      html: 'üìÑ',
      database: 'üóÑÔ∏è',
      algorithms: 'üßÆ',
      'system-design': 'üèóÔ∏è',
      general: 'üí°',
    };

    return topicIcons[topic?.toLowerCase()] || 'üìö';
  };

  if (!question) {
    return (
      <div className={styles.flashcard}>
        <div className={styles.cardContent}>
          <p>–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.flashcardContainer}>
      <div
        className={`${styles.flashcard} ${isFlipped ? styles.flipped : ''} ${
          isAnimating ? styles.animating : ''
        }`}
        onClick={onFlip}
      >
        {/* –ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ - –í–æ–ø—Ä–æ—Å */}
        <div className={`${styles.cardSide} ${styles.cardFront}`}>
          <div className={styles.cardHeader}>
            <div className={styles.cardMeta}>
              <span className={styles.topicIcon}>
                {getTopicIcon(question.topic)}
              </span>
              <span className={styles.topic}>
                {question.topic || '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'}
              </span>
              <span
                className={styles.difficulty}
                style={{
                  backgroundColor: getDifficultyColor(question.difficulty),
                }}
              >
                {question.difficulty === 'easy'
                  ? '–õ–µ–≥–∫–∏–π'
                  : question.difficulty === 'medium'
                  ? '–°—Ä–µ–¥–Ω–∏–π'
                  : question.difficulty === 'hard'
                  ? '–°–ª–æ–∂–Ω—ã–π'
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </span>
            </div>
            {question.estimatedTime && (
              <div className={styles.estimatedTime}>
                ‚è±Ô∏è {question.estimatedTime} –º–∏–Ω
              </div>
            )}
          </div>

          <div className={styles.cardContent}>
            <div className={styles.questionLabel}>–í–æ–ø—Ä–æ—Å:</div>
            <div
              className={styles.questionText}
              dangerouslySetInnerHTML={{
                __html: formatText(question.questionText),
              }}
            />

            {question.tags && question.tags.length > 0 && (
              <div className={styles.tags}>
                {question.tags.map((tag, index) => (
                  <span key={index} className={styles.tag}>
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>

          <div className={styles.cardFooter}>
            <div className={styles.flipHint}>
              <span className={styles.flipIcon}>üîÑ</span>
              –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç
            </div>
          </div>
        </div>

        {/* –ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ - –û—Ç–≤–µ—Ç */}
        <div className={`${styles.cardSide} ${styles.cardBack}`}>
          <div className={styles.cardHeader}>
            <div className={styles.cardMeta}>
              <span className={styles.topicIcon}>
                {getTopicIcon(question.topic)}
              </span>
              <span className={styles.topic}>
                {question.topic || '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'}
              </span>
              <span
                className={styles.difficulty}
                style={{
                  backgroundColor: getDifficultyColor(question.difficulty),
                }}
              >
                {question.difficulty === 'easy'
                  ? '–õ–µ–≥–∫–∏–π'
                  : question.difficulty === 'medium'
                  ? '–°—Ä–µ–¥–Ω–∏–π'
                  : question.difficulty === 'hard'
                  ? '–°–ª–æ–∂–Ω—ã–π'
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </span>
            </div>
          </div>

          <div className={styles.cardContent}>
            <div className={styles.answerLabel}>–û—Ç–≤–µ—Ç:</div>

            {isGeneratingAnswer ? (
              <div className={styles.loadingAnswer}>
                <div className={styles.answerSpinner}></div>
                <p>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç...</p>
                <div className={styles.loadingDots}>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            ) : answer ? (
              <div className={styles.answerContent}>
                <div
                  className={styles.answerText}
                  dangerouslySetInnerHTML={{
                    __html: formatText(answer.answer),
                  }}
                />
                {answer.source && (
                  <div className={styles.answerMeta}>
                    <span className={styles.answerSource}>
                      {answer.source === 'database'
                        ? 'üìö –ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'
                        : answer.source === 'cache'
                        ? 'üíæ –ò–∑ –∫—ç—à–∞'
                        : answer.source === 'ai_generated'
                        ? 'ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI'
                        : ''}
                    </span>
                    {answer.cached && (
                      <span className={styles.cachedIndicator}>
                        ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
                      </span>
                    )}
                  </div>
                )}
              </div>
            ) : question.hasAnswer ? (
              <div className={styles.answerPlaceholder}>
                <p>–û—Ç–≤–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</p>
                <button
                  className={styles.loadAnswerButton}
                  onClick={(e) => {
                    e.stopPropagation();
                    // –¢—Ä–∏–≥–≥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞
                  }}
                >
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç
                </button>
              </div>
            ) : (
              <div className={styles.noAnswer}>
                <p>–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
                <div className={styles.generatingHint}>
                  ü§ñ AI –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...
                </div>
              </div>
            )}
          </div>

          <div className={styles.cardFooter}>
            <div className={styles.flipHint}>
              <span className={styles.flipIcon}>üîÑ</span>
              –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
            </div>
          </div>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className={styles.cardStateIndicator}>
        <div
          className={`${styles.stateIcon} ${
            isFlipped ? styles.answer : styles.question
          }`}
        >
          {isFlipped ? 'üí°' : '‚ùì'}
        </div>
        <span className={styles.stateText}>
          {isFlipped ? '–û—Ç–≤–µ—Ç' : '–í–æ–ø—Ä–æ—Å'}
        </span>
      </div>
    </div>
  );
};

export default FlashcardItem;
