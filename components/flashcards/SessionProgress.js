import { useState, useEffect } from 'react';
import styles from '../../styles/Flashcards.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ—Å—Å–∏–∏ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
 */
const SessionProgress = ({
  currentIndex,
  totalQuestions,
  sessionStats,
  mode,
}) => {
  const [animatedStats, setAnimatedStats] = useState(sessionStats);
  const [isStatsVisible, setIsStatsVisible] = useState(false);

  // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimatedStats(sessionStats);
    }, 100);

    return () => clearTimeout(timer);
  }, [sessionStats]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const progressPercentage =
    totalQuestions > 0 ? ((currentIndex + 1) / totalQuestions) * 100 : 0;

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const totalEvaluated =
    animatedStats.known + animatedStats.unknown + animatedStats.partial;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–∂–∏–º–∞
  const getModeColor = (mode) => {
    switch (mode) {
      case 'study':
        return '#0070f3';
      case 'review':
        return '#ffc107';
      case 'exam':
        return '#dc3545';
      default:
        return '#6c757d';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞
  const getModeName = (mode) => {
    switch (mode) {
      case 'study':
        return '–ò–∑—É—á–µ–Ω–∏–µ';
      case 'review':
        return '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ';
      case 'exam':
        return '–≠–∫–∑–∞–º–µ–Ω';
      default:
        return '–û–±—É—á–µ–Ω–∏–µ';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–µ–∂–∏–º–∞
  const getModeIcon = (mode) => {
    switch (mode) {
      case 'study':
        return 'üìö';
      case 'review':
        return 'üîÑ';
      case 'exam':
        return 'üìù';
      default:
        return 'üéØ';
    }
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  const getSuccessRate = () => {
    if (totalEvaluated === 0) return 0;
    return Math.round((animatedStats.known / totalEvaluated) * 100);
  };

  return (
    <div className={styles.progressContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∂–∏–º–æ–º */}
      <div className={styles.progressHeader}>
        <div className={styles.modeInfo}>
          <span className={styles.modeIcon}>{getModeIcon(mode)}</span>
          <span
            className={styles.modeName}
            style={{ color: getModeColor(mode) }}
          >
            {getModeName(mode)}
          </span>
        </div>

        <button
          className={styles.statsToggle}
          onClick={() => setIsStatsVisible(!isStatsVisible)}
        >
          <span className={styles.statsIcon}>
            {isStatsVisible ? 'üìä' : 'üìà'}
          </span>
          <span className={styles.statsText}>
            {isStatsVisible ? '–°–∫—Ä—ã—Ç—å' : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}
          </span>
        </button>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      <div className={styles.progressBarContainer}>
        <div className={styles.progressInfo}>
          <span className={styles.progressText}>
            –ö–∞—Ä—Ç–æ—á–∫–∞ {currentIndex + 1} –∏–∑ {totalQuestions}
          </span>
          <span className={styles.progressPercentage}>
            {Math.round(progressPercentage)}%
          </span>
        </div>

        <div className={styles.progressBar}>
          <div
            className={styles.progressFill}
            style={{
              width: `${progressPercentage}%`,
              backgroundColor: getModeColor(mode),
            }}
          >
            <div className={styles.progressGlow}></div>
          </div>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ */}
          <div className={styles.cardIndicators}>
            {Array.from({ length: totalQuestions }, (_, index) => (
              <div
                key={index}
                className={`${styles.cardIndicator} ${
                  index < currentIndex
                    ? styles.completed
                    : index === currentIndex
                    ? styles.current
                    : styles.pending
                }`}
                style={{
                  left: `${(index / (totalQuestions - 1)) * 100}%`,
                }}
              />
            ))}
          </div>
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {isStatsVisible && (
        <div className={styles.detailedStats}>
          <div className={styles.statsGrid}>
            <div className={styles.statItem}>
              <div className={styles.statIcon}>‚úÖ</div>
              <div className={styles.statValue}>{animatedStats.known}</div>
              <div className={styles.statLabel}>–ó–Ω–∞–ª</div>
            </div>

            <div className={styles.statItem}>
              <div className={styles.statIcon}>ü§î</div>
              <div className={styles.statValue}>{animatedStats.partial}</div>
              <div className={styles.statLabel}>–ß–∞—Å—Ç–∏—á–Ω–æ</div>
            </div>

            <div className={styles.statItem}>
              <div className={styles.statIcon}>‚ùå</div>
              <div className={styles.statValue}>{animatedStats.unknown}</div>
              <div className={styles.statLabel}>–ù–µ –∑–Ω–∞–ª</div>
            </div>

            <div className={styles.statItem}>
              <div className={styles.statIcon}>üéØ</div>
              <div className={styles.statValue}>{getSuccessRate()}%</div>
              <div className={styles.statLabel}>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            </div>
          </div>

          {/* –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
          {totalEvaluated > 0 && (
            <div className={styles.statsVisualization}>
              <div className={styles.statsBar}>
                <div
                  className={styles.knownSegment}
                  style={{
                    width: `${(animatedStats.known / totalEvaluated) * 100}%`,
                  }}
                />
                <div
                  className={styles.partialSegment}
                  style={{
                    width: `${(animatedStats.partial / totalEvaluated) * 100}%`,
                  }}
                />
                <div
                  className={styles.unknownSegment}
                  style={{
                    width: `${(animatedStats.unknown / totalEvaluated) * 100}%`,
                  }}
                />
              </div>

              <div className={styles.statsLegend}>
                <div className={styles.legendItem}>
                  <div
                    className={styles.legendColor}
                    style={{ backgroundColor: '#28a745' }}
                  ></div>
                  <span>–ó–Ω–∞–ª ({animatedStats.known})</span>
                </div>
                <div className={styles.legendItem}>
                  <div
                    className={styles.legendColor}
                    style={{ backgroundColor: '#ffc107' }}
                  ></div>
                  <span>–ß–∞—Å—Ç–∏—á–Ω–æ ({animatedStats.partial})</span>
                </div>
                <div className={styles.legendItem}>
                  <div
                    className={styles.legendColor}
                    style={{ backgroundColor: '#dc3545' }}
                  ></div>
                  <span>–ù–µ –∑–Ω–∞–ª ({animatedStats.unknown})</span>
                </div>
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
          {totalEvaluated >= 3 && (
            <div className={styles.recommendations}>
              <div className={styles.recommendationTitle}>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</div>
              <div className={styles.recommendationText}>
                {getSuccessRate() >= 80
                  ? '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º —Ç–µ–º–∞–º.'
                  : getSuccessRate() >= 60
                  ? '–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
                  : '–°—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—é —ç—Ç–æ–π —Ç–µ–º—ã.'}
              </div>
            </div>
          )}
        </div>
      )}

      {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞) */}
      <div className={styles.quickStats}>
        <div className={styles.quickStatItem}>
          <span className={styles.quickStatLabel}>–û—Ü–µ–Ω–µ–Ω–æ:</span>
          <span className={styles.quickStatValue}>
            {totalEvaluated} / {currentIndex + 1}
          </span>
        </div>

        {totalEvaluated > 0 && (
          <div className={styles.quickStatItem}>
            <span className={styles.quickStatLabel}>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
            <span
              className={styles.quickStatValue}
              style={{
                color:
                  getSuccessRate() >= 70
                    ? '#28a745'
                    : getSuccessRate() >= 50
                    ? '#ffc107'
                    : '#dc3545',
              }}
            >
              {getSuccessRate()}%
            </span>
          </div>
        )}

        <div className={styles.quickStatItem}>
          <span className={styles.quickStatLabel}>–û—Å—Ç–∞–ª–æ—Å—å:</span>
          <span className={styles.quickStatValue}>
            {totalQuestions - currentIndex - 1}
          </span>
        </div>
      </div>
    </div>
  );
};

export default SessionProgress;
