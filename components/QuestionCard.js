import { useState } from 'react';
import styles from '../styles/QuestionCard.module.css';

export default function QuestionCard({
  question,
  onAnswer,
  onSearch,
  currentTime = 0,
  onFavoriteToggle,
}) {
  const [showAnswer, setShowAnswer] = useState(false);
  const [selectedOption, setSelectedOption] = useState(null);
  const [isFavorite, setIsFavorite] = useState(question.isFavorite || false);
  const [isTogglingFavorite, setIsTogglingFavorite] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userProgress = question.userProgress || null;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
  const hasOptions = question.options && question.options.length > 0;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞
  const handleAnswer = (answerType, optionIndex = null) => {
    let isCorrect = false;
    let selectedAnswer = answerType;

    if (hasOptions && optionIndex !== null) {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
      selectedAnswer = question.options[optionIndex];
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–µ—Ä–≤—ã–π –≤ –º–∞—Å—Å–∏–≤–µ options
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      isCorrect = optionIndex === 0;
      setSelectedOption(optionIndex);
    } else {
      // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ "–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é"
      isCorrect = answerType === 'known';
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    setShowAnswer(true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    setTimeout(() => {
      onAnswer(question.id, selectedAnswer, isCorrect);
    }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
  const handleSearch = () => {
    const searchQuery = question.question || question.text;
    onSearch(searchQuery);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(
      `https://yandex.ru/search/?text=${encodeURIComponent(searchQuery)}`,
      '_blank'
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleFavoriteToggle = async () => {
    if (isTogglingFavorite) return;

    setIsTogglingFavorite(true);

    try {
      const action = isFavorite ? 'remove' : 'add';
      const response = await fetch('/api/training/favorites', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          questionId: question.id,
          action,
        }),
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }

      const data = await response.json();
      setIsFavorite(data.isFavorite);

      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (onFavoriteToggle) {
        onFavoriteToggle(question.id, data.isFavorite);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    } finally {
      setIsTogglingFavorite(false);
    }
  };

  return (
    <div className={styles.container}>
      {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ */}
      <div className={styles.questionMeta}>
        {question.topic && (
          <span className={styles.topicTag}>{question.topic}</span>
        )}
        {question.difficulty && (
          <span
            className={`${styles.difficultyTag} ${styles[question.difficulty]}`}
          >
            {question.difficulty === 'easy'
              ? '–õ–µ–≥–∫–∏–π'
              : question.difficulty === 'medium'
              ? '–°—Ä–µ–¥–Ω–∏–π'
              : '–°–ª–æ–∂–Ω—ã–π'}
          </span>
        )}
        {question.estimatedTime && (
          <span className={styles.timeTag}>
            ~{Math.round(question.estimatedTime / 60)} –º–∏–Ω
          </span>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      {userProgress && (
        <div className={styles.progressInfo}>
          <div className={styles.progressItem}>
            <span className={styles.progressLabel}>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:</span>
            <span
              className={`${styles.progressValue} ${
                userProgress.isCorrect ? styles.correct : styles.incorrect
              }`}
            >
              {userProgress.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
            </span>
          </div>
          {userProgress.timeSpent && (
            <div className={styles.progressItem}>
              <span className={styles.progressLabel}>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</span>
              <span className={styles.progressValue}>
                {userProgress.timeSpent}—Å
              </span>
            </div>
          )}
          {currentTime > 0 && (
            <div className={styles.progressItem}>
              <span className={styles.progressLabel}>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</span>
              <span className={`${styles.progressValue} ${styles.currentTime}`}>
                {currentTime}—Å
              </span>
            </div>
          )}
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
      <div className={styles.card}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
        <div className={styles.cardHeader}>
          <div className={styles.questionSection}>
            <h3 className={styles.questionTitle}>–í–æ–ø—Ä–æ—Å:</h3>
            <p className={styles.questionText}>
              {question.question || question.text}
            </p>
          </div>

          <button
            className={`${styles.favoriteButton} ${
              isFavorite ? styles.active : styles.inactive
            }`}
            onClick={handleFavoriteToggle}
            disabled={isTogglingFavorite}
            title={
              isFavorite ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
            }
          >
            <span className={styles.favoriteIcon}>
              {isFavorite ? '‚òÖ' : '‚òÜ'}
            </span>
          </button>
        </div>

        <div className={styles.cardContent}>
          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º */}
          {hasOptions && !showAnswer && (
            <div className={styles.optionsSection}>
              <h4 className={styles.optionsTitle}>
                –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
              </h4>
              <div className={styles.optionsList}>
                {question.options.map((option, index) => (
                  <button
                    key={index}
                    className={`${styles.optionButton} ${
                      selectedOption === index ? styles.selected : ''
                    }`}
                    onClick={() => handleAnswer('option', index)}
                  >
                    {String.fromCharCode(65 + index)}. {option}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ */}
          {showAnswer && (
            <div className={styles.answerSection}>
              <h4 className={styles.answerTitle}>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</h4>
              <div className={styles.answerContent}>{question.answer}</div>
              {hasOptions && selectedOption !== null && (
                <div className={styles.resultFeedback}>
                  {selectedOption === 0 ? (
                    <span className={styles.correctFeedback}>‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</span>
                  ) : (
                    <span className={styles.incorrectFeedback}>
                      ‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    </span>
                  )}
                </div>
              )}
            </div>
          )}

          {/* –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          {!hasOptions && !showAnswer && (
            <div className={styles.actionsSection}>
              <p className={styles.actionsPrompt}>
                –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?
              </p>
              <div className={styles.actionButtons}>
                <button
                  className={`${styles.actionButton} ${styles.knowButton}`}
                  onClick={() => handleAnswer('known')}
                >
                  ‚úì –ó–Ω–∞—é
                </button>
                <button
                  className={`${styles.actionButton} ${styles.dontKnowButton}`}
                  onClick={() => handleAnswer('unknown')}
                >
                  ‚úó –ù–µ –∑–Ω–∞—é
                </button>
                <button
                  className={`${styles.actionButton} ${styles.repeatButton}`}
                  onClick={() => handleAnswer('repeat')}
                >
                  ‚Üª –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ
                </button>
              </div>
            </div>
          )}

          {/* –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          {!hasOptions && showAnswer && (
            <div className={styles.answerSection}>
              <h4 className={styles.answerTitle}>–û—Ç–≤–µ—Ç:</h4>
              <div className={styles.answerContent}>{question.answer}</div>
            </div>
          )}
        </div>

        {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
        <div className={styles.cardFooter}>
          <button
            className={styles.searchButton}
            onClick={handleSearch}
            title="–ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ"
          >
            üîç –ü–æ–∏—Å–∫
          </button>

          {question.tags && question.tags.length > 0 && (
            <div className={styles.tagsContainer}>
              {question.tags.map((tag, index) => (
                <span key={index} className={styles.tag}>
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
