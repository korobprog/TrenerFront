import { useState, useRef } from 'react';
import { useSession, signOut } from 'next-auth/react';
import { useRouter } from 'next/router';
import SignInModal from './SignInModal';
import styles from '../../styles/AuthButton.module.css';

export default function AuthButton() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [isModalOpen, setIsModalOpen] = useState(false);

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ fallback –∞–≤–∞—Ç–∞—Ä–∞
  const fallbackAppliedRef = useRef(new Set());

  if (status === 'loading') {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (session) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getDefaultAvatar = (name) => {
      const timestamp = new Date().toISOString();
      try {
        console.log(`[AVATAR_DEBUG] ${timestamp} getDefaultAvatar() –≤—ã–∑–≤–∞–Ω–∞`, {
          name,
          sessionUser: session?.user?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          sessionEmail: session?.user?.email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          sessionImage: session?.user?.image || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          reason: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –≤ AuthButton',
        });
      } catch (logError) {
        console.error(
          `[AVATAR_DEBUG] ${timestamp} –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ getDefaultAvatar:`,
          logError
        );
      }

      if (!name) {
        console.log(
          `[AVATAR_DEBUG] ${timestamp} getDefaultAvatar() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback /default-avatar.svg`
        );
        return '/default-avatar.svg';
      }

      const initials = name
        .split(' ')
        .map((word) => word.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);

      console.log(
        `[AVATAR_DEBUG] ${timestamp} getDefaultAvatar() —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª—ã: ${initials}`
      );

      // –°–æ–∑–¥–∞–µ–º SVG –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
      const uniqueId = `${initials}_${Date.now()}_${Math.random()
        .toString(36)
        .substr(2, 5)}`;
      const svg = `
        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="avatarGradient${uniqueId}" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
            </linearGradient>
          </defs>
          <circle cx="20" cy="20" r="20" fill="url(#avatarGradient${uniqueId})"/>
          <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="14" font-weight="600">${initials}</text>
        </svg>
      `;
      const result = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(
        svg
      )}`;

      console.log(
        `[AVATAR_DEBUG] ${timestamp} getDefaultAvatar() —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤`,
        {
          initials,
          svgLength: svg.length,
          resultLength: result.length,
        }
      );

      return result;
    };

    const userImage =
      session?.user?.image || getDefaultAvatar(session?.user?.name);

    return (
      <div className={styles.authContainer}>
        <div className={styles.userInfo}>
          <img
            src={userImage}
            alt={session?.user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            className={styles.userImage}
            onError={(e) => {
              const timestamp = new Date().toISOString();
              const originalSrc = e.target.src;

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏ –ª–∏ –º—ã —É–∂–µ fallback –¥–ª—è —ç—Ç–æ–≥–æ src
              if (fallbackAppliedRef.current.has(originalSrc)) {
                console.log(
                  `[AVATAR_DEBUG] ${timestamp} onError –ø—Ä–æ–ø—É—â–µ–Ω - fallback —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω`,
                  {
                    originalSrc,
                    reason: '–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ fallback',
                  }
                );
                return;
              }

              // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ fallback –∞–≤–∞—Ç–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π SVG
              if (
                originalSrc.startsWith('data:image/svg') ||
                originalSrc.includes('/default-avatar.svg')
              ) {
                console.log(
                  `[AVATAR_DEBUG] ${timestamp} onError –¥–ª—è fallback –∞–≤–∞—Ç–∞—Ä–∞`,
                  {
                    originalSrc,
                    reason: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π SVG',
                  }
                );
                e.target.src = '/default-avatar.svg';
                fallbackAppliedRef.current.add(originalSrc);
                return;
              }

              try {
                console.log(
                  `[AVATAR_DEBUG] ${timestamp} onError –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω –≤ AuthButton`,
                  {
                    originalSrc,
                    sessionUser: session?.user?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                    sessionEmail: session?.user?.email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                    sessionImage: session?.user?.image || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                    reason: '404 –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                    userAgent:
                      typeof navigator !== 'undefined'
                        ? navigator.userAgent.substring(0, 50)
                        : '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ',
                  }
                );
              } catch (logError) {
                console.error(
                  `[AVATAR_DEBUG] ${timestamp} –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ onError:`,
                  logError
                );
              }

              console.log(
                'üî¥ AuthButton: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
                originalSrc
              );
              console.log('üîÑ AuthButton: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä');

              const fallbackAvatar = getDefaultAvatar(session?.user?.name);
              e.target.src = fallbackAvatar;

              // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ src —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω fallback
              fallbackAppliedRef.current.add(originalSrc);

              console.log(
                `[AVATAR_DEBUG] ${timestamp} onError –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω`,
                {
                  newSrc: fallbackAvatar,
                  operation: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                }
              );
            }}
          />
          <span className={styles.userName}>
            {session?.user?.name || session?.user?.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
          </span>
        </div>
        <button onClick={() => signOut()} className={styles.signOutButton}>
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16,17 21,12 16,7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          <span>–í—ã–π—Ç–∏</span>
        </button>
      </div>
    );
  }

  return (
    <>
      <div className={styles.signInContainer}>
        <p className={styles.signInText}>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</p>
        <div className={styles.authOptions}>
          <button
            onClick={() => router.push('/auth/signin')}
            className={styles.modernSignInButton}
          >
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
              <polyline points="10,17 15,12 10,7"></polyline>
              <line x1="15" y1="12" x2="3" y2="12"></line>
            </svg>
            <span>–í–æ–π—Ç–∏</span>
          </button>
        </div>
      </div>

      <SignInModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </>
  );
}
