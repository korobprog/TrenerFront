import { useState } from 'react';
import { useRouter } from 'next/router';
import AdminTable from './AdminTable';
import AdminPagination from './AdminPagination';
import styles from '../../styles/admin/InterviewsList.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Array} props.interviews - –ú–∞—Å—Å–∏–≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
 * @param {Object} props.pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @param {Object} props.sorting - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
 * @param {Function} props.onPageChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Function} props.onPageSizeChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Function} props.onSortChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
 */
export default function InterviewsList({
  interviews,
  pagination,
  sorting,
  onPageChange,
  onPageSizeChange,
  onSortChange,
}) {
  const router = useRouter();

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const columns = [
    {
      field: 'scheduledTime',
      title: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
      sortable: true,
      width: '20%',
      format: (value) => {
        const date = new Date(value);
        return date.toLocaleString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });
      },
    },
    {
      field: 'interviewer',
      title: '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä',
      sortable: false,
      width: '20%',
      format: (value) => (
        <div className={styles.userCell}>
          {value.image && (
            <img
              src={value.image}
              alt={value.name}
              className={styles.userAvatar}
            />
          )}
          <div className={styles.userInfo}>
            <div className={styles.userName}>{value.name}</div>
            <div className={styles.userEmail}>{value.email}</div>
          </div>
        </div>
      ),
    },
    {
      field: 'interviewee',
      title: '–ò–Ω—Ç–µ—Ä–≤—å—é–∏—Ä—É–µ–º—ã–π',
      sortable: false,
      width: '20%',
      format: (value) => {
        if (!value)
          return <span className={styles.emptyValue}>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>;

        return (
          <div className={styles.userCell}>
            {value.image && (
              <img
                src={value.image}
                alt={value.name}
                className={styles.userAvatar}
              />
            )}
            <div className={styles.userInfo}>
              <div className={styles.userName}>{value.name}</div>
              <div className={styles.userEmail}>{value.email}</div>
            </div>
          </div>
        );
      },
    },
    {
      field: 'status',
      title: '–°—Ç–∞—Ç—É—Å',
      sortable: true,
      width: '15%',
      format: (value) => {
        const statusLabels = {
          scheduled: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
          completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
          cancelled: '–û—Ç–º–µ–Ω–µ–Ω–æ',
          no_show: '–ù–µ—è–≤–∫–∞',
        };

        const statusClasses = {
          scheduled: styles.statusScheduled,
          completed: styles.statusCompleted,
          cancelled: styles.statusCancelled,
          no_show: styles.statusNoShow,
        };

        return (
          <span
            className={`${styles.statusLabel} ${statusClasses[value] || ''}`}
          >
            {statusLabels[value] || value}
          </span>
        );
      },
    },
    {
      field: 'interviewFeedback',
      title: '–û—Ç–∑—ã–≤',
      sortable: false,
      width: '10%',
      format: (value) => {
        if (!value || value.length === 0) {
          return <span className={styles.emptyValue}>–ù–µ—Ç</span>;
        }

        const feedback = value[0];
        return (
          <div className={styles.feedbackInfo}>
            <div className={styles.feedbackScore}>
              –û—Ü–µ–Ω–∫–∞: {feedback.technicalScore}/10
            </div>
            <div className={styles.feedbackRating}>
              –†–µ–π—Ç–∏–Ω–≥: {feedback.interviewerRating}/5
            </div>
          </div>
        );
      },
    },
    {
      field: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      sortable: false,
      width: '15%',
      format: (_, interview) => (
        <div className={styles.actionButtons}>
          <button
            className={`${styles.actionButton} ${styles.viewButton}`}
            onClick={(e) => {
              e.stopPropagation();
              router.push(`/admin/interviews/${interview.id}`);
            }}
            title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
          >
            üëÅÔ∏è
          </button>
          <button
            className={`${styles.actionButton} ${styles.editButton}`}
            onClick={(e) => {
              e.stopPropagation();
              router.push(`/admin/interviews/${interview.id}?edit=true`);
            }}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            className={`${styles.actionButton} ${styles.deleteButton}`}
            onClick={(e) => {
              e.stopPropagation();
              handleDelete(interview);
            }}
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      ),
    },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
  const handleRowClick = (interview) => {
    router.push(`/admin/interviews/${interview.id}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (field, order) => {
    if (onSortChange) {
      onSortChange(field, order);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
  const handleDelete = async (interview) => {
    if (
      !confirm(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç ${new Date(
          interview.scheduledTime
        ).toLocaleString('ru-RU')}?`
      )
    ) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/interviews/${interview.id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      router.reload();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
    }
  };

  return (
    <div className={styles.interviewsListContainer}>
      <AdminTable
        columns={columns}
        data={interviews}
        onRowClick={handleRowClick}
        sortBy={sorting?.sortBy}
        sortOrder={sorting?.sortOrder}
        onSort={handleSortChange}
      />

      <div className={styles.paginationWrapper}>
        <AdminPagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          totalItems={pagination.total}
          pageSize={pagination.limit}
          onPageChange={onPageChange}
          onPageSizeChange={onPageSizeChange}
        />
      </div>
    </div>
  );
}
