import { useState } from 'react';
import { useRouter } from 'next/router';
import AdminTable from './AdminTable';
import AdminPagination from './AdminPagination';
import styles from '../../styles/admin/UsersList.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Array} props.users - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} props.pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @param {Object} props.sorting - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
 * @param {Function} props.onPageChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Function} props.onPageSizeChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Function} props.onSortChange - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 * @param {Function} props.onRefresh - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export default function UsersList({
  users,
  pagination,
  sorting,
  onPageChange,
  onPageSizeChange,
  onSortChange,
  onRefresh,
}) {
  const router = useRouter();

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const columns = [
    {
      field: 'name',
      title: '–ò–º—è',
      sortable: true,
      width: '25%',
      format: (value, user) => (
        <div className={styles.userNameCell}>
          {user?.image && (
            <img
              src={user.image}
              alt={user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
              className={styles.userAvatar}
            />
          )}
          <div className={styles.userInfo}>
            <div className={styles.userName}>{value || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
            <div className={styles.userEmail}>{user?.email || '–ë–µ–∑ email'}</div>
          </div>
        </div>
      ),
    },
    {
      field: 'role',
      title: '–†–æ–ª—å',
      sortable: true,
      width: '15%',
      format: (value) => {
        const roleLabels = {
          user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          interviewer: '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä',
          admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        };

        const roleClasses = {
          user: styles.roleUser,
          interviewer: styles.roleInterviewer,
          admin: styles.roleAdmin,
        };

        return (
          <span className={`${styles.roleLabel} ${roleClasses[value] || ''}`}>
            {roleLabels[value] || value}
          </span>
        );
      },
    },
    {
      field: 'isBlocked',
      title: '–°—Ç–∞—Ç—É—Å',
      sortable: true,
      width: '15%',
      format: (value) => (
        <span
          className={`${styles.statusLabel} ${
            value ? styles.statusBlocked : styles.statusActive
          }`}
        >
          {value ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}
        </span>
      ),
    },
    {
      field: '_count',
      title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
      sortable: false,
      width: '15%',
      format: (value) => {
        const interviewerCount = value?.interviewerSessions || 0;
        const intervieweeCount = value?.intervieweeSessions || 0;
        return (
          <div className={styles.interviewsCount}>
            <div className={styles.interviewerCount}>
              –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {interviewerCount}
            </div>
            <div className={styles.intervieweeCount}>
              –ü—Ä–æ–π–¥–µ–Ω–æ: {intervieweeCount}
            </div>
          </div>
        );
      },
    },
    {
      field: 'createdAt',
      title: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      sortable: true,
      width: '15%',
      format: (value) => {
        if (!value) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const date = new Date(value);
        return isNaN(date.getTime())
          ? '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'
          : date.toLocaleDateString('ru-RU', {
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
            });
      },
    },
    {
      field: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      sortable: false,
      width: '15%',
      format: (_, user) => (
        <div className={styles.actionButtons}>
          <button
            className={`${styles.actionButton} ${styles.viewButton}`}
            onClick={(e) => {
              e.stopPropagation();
              if (user?.id) {
                router.push(`/admin/users/${user.id}`);
              }
            }}
            title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
            disabled={!user?.id}
          >
            üëÅÔ∏è
          </button>
          <button
            className={`${styles.actionButton} ${
              user?.isBlocked ? styles.unblockButton : styles.blockButton
            }`}
            onClick={(e) => {
              e.stopPropagation();
              if (user?.id) {
                handleToggleBlock(user);
              }
            }}
            title={user?.isBlocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
            disabled={!user?.id}
          >
            {user?.isBlocked ? 'üîì' : 'üîí'}
          </button>
        </div>
      ),
    },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
  const handleRowClick = (user) => {
    if (user?.id) {
      router.push(`/admin/users/${user.id}`);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (field, order) => {
    if (onSortChange) {
      onSortChange(field, order);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleToggleBlock = async (user) => {
    if (!user?.id) {
      console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    try {
      const response = await fetch(`/api/admin/users/${user.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isBlocked: !user.isBlocked,
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if (onRefresh) {
        onRefresh();
      } else {
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏—é –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        router.push(router.asPath, undefined, { shallow: true });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  };

  return (
    <div className={styles.usersListContainer}>
      <AdminTable
        columns={columns}
        data={users || []}
        onRowClick={handleRowClick}
        sortBy={sorting?.sortBy}
        sortOrder={sorting?.sortOrder}
        onSort={handleSortChange}
      />

      <div className={styles.paginationWrapper}>
        <AdminPagination
          currentPage={pagination?.page || 1}
          totalPages={pagination?.pages || pagination?.totalPages || 0}
          totalItems={pagination?.total || 0}
          pageSize={pagination?.limit || 10}
          onPageChange={onPageChange}
          onPageSizeChange={onPageSizeChange}
        />
      </div>
    </div>
  );
}
