import { useState } from 'react';
import styles from '../../styles/admin/PointsEditModal.module.css';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {boolean} props.isOpen - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 * @param {Function} props.onClose - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {Object} props.user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Function} props.onSave - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * @returns {JSX.Element|null} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
 */
export default function PointsEditModal({ isOpen, onClose, user, onSave }) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    amount: '',
    type: 'admin_adjustment',
    description: '',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [errors, setErrors] = useState({});

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –±–∞–ª–ª–æ–≤
    if (!formData.amount) {
      newErrors.amount = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–ª–æ–≤';
    } else if (isNaN(Number(formData.amount))) {
      newErrors.amount = '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (!formData.type) {
      newErrors.type = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if (!formData.description) {
      newErrors.description = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: –û–±—ä–µ–∫—Ç user:', user);
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: user.id:', user.id);
      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: typeof user.id:',
        typeof user.id
      );
      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: user === undefined:',
        user === undefined
      );
      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: user === null:',
        user === null
      );

      const pointsData = {
        userId: user.id,
        amount: Number(formData.amount),
        type: formData.type,
        description: formData.description,
      };

      console.log(
        'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PointsEditModal: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:',
        pointsData
      );

      // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
      await onSave(pointsData);

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      setFormData({
        amount: '',
        type: 'admin_adjustment',
        description: '',
      });
      onClose();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:', error);
      setErrors((prev) => ({
        ...prev,
        submit:
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      }));
    } finally {
      setIsSubmitting(false);
    }
  };

  // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!isOpen) return null;

  return (
    <div className={styles.overlay} onClick={onClose}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <div className={styles.modalHeader}>
          <h3 className={styles.modalTitle}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
          <button className={styles.closeButton} onClick={onClose}>
            √ó
          </button>
        </div>

        <form className={styles.form} onSubmit={handleSubmit}>
          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="amount">
              –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
            </label>
            <input
              id="amount"
              name="amount"
              type="text"
              className={styles.input}
              value={formData.amount}
              onChange={handleChange}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ -50"
            />
            {errors.amount && <p className={styles.error}>{errors.amount}</p>}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="type">
              –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            </label>
            <select
              id="type"
              name="type"
              className={styles.select}
              value={formData.type}
              onChange={handleChange}
            >
              <option value="admin_adjustment">
                –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
              </option>
              <option value="bonus">–ë–æ–Ω—É—Å</option>
              <option value="penalty">–®—Ç—Ä–∞—Ñ</option>
            </select>
            {errors.type && <p className={styles.error}>{errors.type}</p>}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="description">
              –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            </label>
            <textarea
              id="description"
              name="description"
              className={styles.textarea}
              value={formData.description}
              onChange={handleChange}
              placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"
            />
            {errors.description && (
              <p className={styles.error}>{errors.description}</p>
            )}
          </div>

          {errors.submit && <p className={styles.error}>{errors.submit}</p>}

          <div className={styles.buttonGroup}>
            <button
              type="button"
              className={styles.cancelButton}
              onClick={onClose}
              disabled={isSubmitting}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className={styles.saveButton}
              disabled={isSubmitting}
            >
              {isSubmitting && <span className={styles.loading}></span>}
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
