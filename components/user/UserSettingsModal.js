import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useNotification } from '../../contexts/NotificationContext';
import styles from '../../styles/user/UserSettingsModal.module.css';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} props - –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {boolean} props.isOpen - –û—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 * @param {Function} props.onClose - –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export default function UserSettingsModal({ isOpen, onClose }) {
  const { data: session } = useSession();
  const { showSuccess, showError } = useNotification();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const [activeTab, setActiveTab] = useState('profile');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
  const [profileSettings, setProfileSettings] = useState({
    name: '',
    email: '',
    avatar: null,
    avatarPreview: null,
    avatarUrl: '',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
  const [avatarLoading, setAvatarLoading] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const [passwordSettings, setPasswordSettings] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [authSettings, setAuthSettings] = useState({
    enableEmailAuth: true,
    enableGoogleAuth: true,
    enableGithubAuth: true,
    enableCredentialsAuth: true,
    requireTwoFactor: false,
    sessionTimeout: 24,
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
  const [apiSettings, setApiSettings] = useState({
    apiKey: '',
    baseUrl: 'https://api.anthropic.com',
    usePersonalSettings: false,
    apiType: 'anthropic',
    langdockApiKey: '',
    langdockAssistantId: '',
    langdockBaseUrl: 'https://api.langdock.com/assistant/v1/chat/completions',
    langdockRegion: 'eu',
    geminiApiKey: '',
    geminiModel: 'gemini-1.5-pro',
    geminiBaseUrl: 'https://generativelanguage.googleapis.com',
    geminiTemperature: 0.7,
    huggingfaceApiKey: '',
    huggingfaceModel: 'meta-llama/Llama-2-7b-chat-hf',
    huggingfaceBaseUrl: 'https://api-inference.huggingface.co/models',
    huggingfaceTemperature: 0.7,
    huggingfaceMaxTokens: 4000,
    openRouterApiKey: '',
    openRouterModel: 'google/gemma-3-12b-it:free',
    openRouterBaseUrl: 'https://openrouter.ai/api/v1',
    openRouterTemperature: 0.7,
    openRouterMaxTokens: 4000,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && session?.user) {
      loadUserSettings();
    }
  }, [isOpen, session]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (session?.user) {
      setProfileSettings((prev) => ({
        ...prev,
        name: session.user.name || '',
        email: session.user.email || '',
        avatarPreview: session.user.image || null,
      }));

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!session.user.image) {
        console.log('üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏...');
        generateDefaultAvatar();
      }
    }
  }, [session]);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
  const generateDefaultAvatar = async () => {
    try {
      console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');

      const response = await fetch('/api/user/avatar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'generate',
          name: session?.user?.name || session?.user?.email || 'User',
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.avatarUrl) {
          console.log('‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', data.avatarUrl);
          setProfileSettings((prev) => ({
            ...prev,
            avatarPreview: data.avatarUrl,
          }));
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserSettings = async () => {
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authResponse = await fetch('/api/user/auth-settings');
      if (authResponse.ok) {
        const authData = await authResponse.json();
        if (authData.success) {
          setAuthSettings(authData.data);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
      const apiResponse = await fetch('/api/user/api-settings');
      if (apiResponse.ok) {
        const apiData = await apiResponse.json();
        setApiSettings({
          apiKey: apiData.apiKey || '',
          baseUrl: apiData.baseUrl || 'https://api.anthropic.com',
          usePersonalSettings: apiData.usePersonalSettings === true,
          apiType: apiData.apiType || 'anthropic',
          langdockApiKey: apiData.langdockApiKey || '',
          langdockAssistantId: apiData.langdockAssistantId || '',
          langdockBaseUrl:
            apiData.langdockBaseUrl ||
            'https://api.langdock.com/assistant/v1/chat/completions',
          langdockRegion: apiData.langdockRegion || 'eu',
          geminiApiKey: apiData.geminiApiKey || '',
          geminiModel: apiData.geminiModel || 'gemini-1.5-pro',
          geminiBaseUrl:
            apiData.geminiBaseUrl ||
            'https://generativelanguage.googleapis.com',
          geminiTemperature: apiData.geminiTemperature || 0.7,
          huggingfaceApiKey: apiData.huggingfaceApiKey || '',
          huggingfaceModel:
            apiData.huggingfaceModel || 'meta-llama/Llama-2-7b-chat-hf',
          huggingfaceBaseUrl:
            apiData.huggingfaceBaseUrl ||
            'https://api-inference.huggingface.co/models',
          huggingfaceTemperature: apiData.huggingfaceTemperature || 0.7,
          huggingfaceMaxTokens: apiData.huggingfaceMaxTokens || 4000,
          openRouterApiKey: apiData.openRouterApiKey || '',
          openRouterModel:
            apiData.openRouterModel || 'google/gemma-3-12b-it:free',
          openRouterBaseUrl:
            apiData.openRouterBaseUrl || 'https://openrouter.ai/api/v1',
          openRouterTemperature: apiData.openRouterTemperature || 0.7,
          openRouterMaxTokens: apiData.openRouterMaxTokens || 4000,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        // 5MB
        showError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setProfileSettings((prev) => ({
          ...prev,
          avatar: file,
          avatarPreview: e.target.result,
          avatarUrl: '', // –û—á–∏—â–∞–µ–º URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∞–≤–∞—Ç–∞—Ä–∫–∏
  const handleAvatarUrlChange = (e) => {
    const url = e.target.value;
    setProfileSettings((prev) => ({
      ...prev,
      avatarUrl: url,
      avatar: null, // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –≤–≤–æ–¥–µ URL
      avatarPreview: url || prev.avatarPreview,
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
  const handleGenerateAvatar = async () => {
    setAvatarLoading(true);
    try {
      console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∫–∏...');
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        name: profileSettings.name || session?.user?.name || 'User',
        method: 'POST',
        action: 'generate',
      });

      const response = await fetch('/api/user/avatar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'generate',
          name: profileSettings.name || session?.user?.name || 'User',
        }),
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        if (data.success && data.avatarUrl) {
          setProfileSettings((prev) => ({
            ...prev,
            avatarPreview: data.avatarUrl,
            avatarUrl: data.avatarUrl,
            avatar: null,
          }));
          showSuccess('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
          throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
        }
      } else {
        const data = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data);
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
      showError(error.message);
    } finally {
      setAvatarLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
  const handleSaveAvatar = async () => {
    setAvatarLoading(true);
    try {
      let response;

      if (profileSettings.avatar) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        const formData = new FormData();
        formData.append('avatar', profileSettings.avatar);
        formData.append('action', 'upload');

        response = await fetch('/api/user/avatar', {
          method: 'POST',
          body: formData,
        });
      } else if (profileSettings.avatarUrl) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
        response = await fetch('/api/user/avatar', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'url',
            avatarUrl: profileSettings.avatarUrl,
          }),
        });
      } else {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –∞–≤–∞—Ç–∞—Ä–∫–∏');
        return;
      }

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          showSuccess('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
          window.location.reload();
        } else {
          throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
        }
      } else {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
      showError(error.message);
    } finally {
      setAvatarLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Ç–æ–ª—å–∫–æ –∏–º—è)
  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      const response = await fetch('/api/user/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: profileSettings.name,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        showSuccess('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        window.location.reload();
      } else {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      showError(error.message);
    } finally {
      setSaving(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const handleChangePassword = async () => {
    if (passwordSettings.newPassword !== passwordSettings.confirmPassword) {
      showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (passwordSettings.newPassword.length < 6) {
      showError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setSaving(true);
    try {
      const response = await fetch('/api/user/change-password', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentPassword: passwordSettings.currentPassword,
          newPassword: passwordSettings.newPassword,
        }),
      });

      if (response.ok) {
        showSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
        setPasswordSettings({
          currentPassword: '',
          newPassword: '',
          confirmPassword: '',
        });
      } else {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', error);
      showError(error.message);
    } finally {
      setSaving(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleSaveAuthSettings = async () => {
    setSaving(true);
    try {
      const response = await fetch('/api/user/auth-settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(authSettings),
      });

      if (response.ok) {
        const data = await response.json();
        showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        setAuthSettings(data.data);
      } else {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      showError(error.message);
    } finally {
      setSaving(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
  const handleSaveApiSettings = async () => {
    setSaving(true);
    try {
      const apiData = {
        useCustomApi: apiSettings.usePersonalSettings,
        apiType: apiSettings.apiType,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ API
      if (apiSettings.apiType === 'anthropic') {
        apiData.apiKey = apiSettings.apiKey;
        apiData.baseUrl = apiSettings.baseUrl;
      } else if (apiSettings.apiType === 'langdock') {
        apiData.langdockApiKey = apiSettings.langdockApiKey;
        apiData.langdockAssistantId = apiSettings.langdockAssistantId;
        apiData.langdockBaseUrl = apiSettings.langdockBaseUrl;
      } else if (apiSettings.apiType === 'gemini') {
        apiData.geminiApiKey = apiSettings.geminiApiKey;
        apiData.geminiModel = apiSettings.geminiModel;
        apiData.geminiBaseUrl = apiSettings.geminiBaseUrl;
        apiData.geminiTemperature = apiSettings.geminiTemperature;
      } else if (apiSettings.apiType === 'huggingface') {
        apiData.huggingfaceApiKey = apiSettings.huggingfaceApiKey;
        apiData.huggingfaceModel = apiSettings.huggingfaceModel;
        apiData.huggingfaceBaseUrl = apiSettings.huggingfaceBaseUrl;
        apiData.huggingfaceTemperature = apiSettings.huggingfaceTemperature;
        apiData.huggingfaceMaxTokens = apiSettings.huggingfaceMaxTokens;
      } else if (apiSettings.apiType === 'openrouter') {
        apiData.openRouterApiKey = apiSettings.openRouterApiKey;
        apiData.openRouterModel = apiSettings.openRouterModel;
        apiData.openRouterBaseUrl = apiSettings.openRouterBaseUrl;
        apiData.openRouterTemperature = apiSettings.openRouterTemperature;
        apiData.openRouterMaxTokens = apiSettings.openRouterMaxTokens;
      }

      const response = await fetch('/api/user/api-settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiData),
      });

      if (response.ok) {
        const data = await response.json();
        showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API');
    } finally {
      setSaving(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleClose = () => {
    setActiveTab('profile');
    setPasswordSettings({
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    });
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
    setProfileSettings((prev) => ({
      ...prev,
      avatar: null,
      avatarUrl: '',
      avatarPreview: session?.user?.image || null,
    }));
    onClose();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–≤–µ—Ä–ª–µ—é
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.overlay} onClick={handleOverlayClick}>
      <div className={styles.modal}>
        <div className={styles.header}>
          <h2 className={styles.title}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button className={styles.closeButton} onClick={handleClose}>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>

        <div className={styles.content}>
          {/* –í–∫–ª–∞–¥–∫–∏ */}
          <div className={styles.tabs}>
            <button
              className={`${styles.tab} ${
                activeTab === 'profile' ? styles.active : ''
              }`}
              onClick={() => setActiveTab('profile')}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
              –ü—Ä–æ—Ñ–∏–ª—å
            </button>
            <button
              className={`${styles.tab} ${
                activeTab === 'password' ? styles.active : ''
              }`}
              onClick={() => setActiveTab('password')}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                <circle cx="12" cy="16" r="1"></circle>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
              </svg>
              –ü–∞—Ä–æ–ª—å
            </button>
            <button
              className={`${styles.tab} ${
                activeTab === 'auth' ? styles.active : ''
              }`}
              onClick={() => setActiveTab('auth')}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path d="M9 12l2 2 4-4"></path>
                <path d="M21 12c.552 0 1-.448 1-1V8c0-.552-.448-1-1-1h-1V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v1H3c-.552 0-1 .448-1 1v3c0 .552.448 1 1 1h1v1a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-1h1z"></path>
              </svg>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </button>
            <button
              className={`${styles.tab} ${
                activeTab === 'api' ? styles.active : ''
              }`}
              onClick={() => setActiveTab('api')}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <circle cx="12" cy="12" r="3"></circle>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
              </svg>
              API
            </button>
            {(session?.user?.role === 'admin' ||
              session?.user?.role === 'superadmin') && (
              <button
                className={`${styles.tab} ${
                  activeTab === 'admin' ? styles.active : ''
                }`}
                onClick={() => setActiveTab('admin')}
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                >
                  <path d="M12 1l3 6 6 3-6 3-3 6-3-6-6-3 6-3z"></path>
                </svg>
                –ê–¥–º–∏–Ω
              </button>
            )}
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
          <div className={styles.tabContent}>
            {loading ? (
              <div className={styles.loading}>
                <div className={styles.spinner}></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
              </div>
            ) : (
              <>
                {/* –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
                {activeTab === 'profile' && (
                  <div className={styles.section}>
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h3>

                    <div className={styles.avatarSection}>
                      <div className={styles.avatarContainer}>
                        {profileSettings.avatarPreview ? (
                          <img
                            src={profileSettings.avatarPreview}
                            alt="–ê–≤–∞—Ç–∞—Ä"
                            className={styles.avatar}
                          />
                        ) : (
                          <div className={styles.avatarPlaceholder}>
                            {profileSettings.name
                              ? profileSettings.name[0]
                              : 'U'}
                          </div>
                        )}
                        <label className={styles.avatarUpload}>
                          <input
                            type="file"
                            accept="image/*"
                            onChange={handleAvatarChange}
                            className={styles.avatarInput}
                            disabled={avatarLoading}
                          />
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                          >
                            <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path>
                            <circle cx="12" cy="13" r="4"></circle>
                          </svg>
                          {avatarLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'}
                        </label>
                      </div>
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>URL –∞–≤–∞—Ç–∞—Ä–∫–∏</label>
                      <input
                        type="url"
                        value={profileSettings.avatarUrl}
                        onChange={handleAvatarUrlChange}
                        className={styles.input}
                        placeholder="https://example.com/avatar.jpg"
                        disabled={avatarLoading}
                      />
                      <small className={styles.hint}>
                        –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤—ã—à–µ
                      </small>
                    </div>

                    <div className={styles.avatarActions}>
                      <button
                        onClick={handleGenerateAvatar}
                        disabled={avatarLoading}
                        className={styles.generateButton}
                      >
                        {avatarLoading
                          ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'
                          : 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É'}
                      </button>
                      <button
                        onClick={handleSaveAvatar}
                        disabled={
                          avatarLoading ||
                          (!profileSettings.avatar &&
                            !profileSettings.avatarUrl)
                        }
                        className={styles.saveAvatarButton}
                      >
                        {avatarLoading
                          ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...'
                          : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É'}
                      </button>
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>–ò–º—è</label>
                      <input
                        type="text"
                        value={profileSettings.name}
                        onChange={(e) =>
                          setProfileSettings((prev) => ({
                            ...prev,
                            name: e.target.value,
                          }))
                        }
                        className={styles.input}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      />
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>Email</label>
                      <input
                        type="email"
                        value={profileSettings.email}
                        disabled
                        className={`${styles.input} ${styles.disabled}`}
                      />
                      <small className={styles.hint}>
                        Email –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
                      </small>
                    </div>

                    <div className={styles.actions}>
                      <button
                        onClick={handleSaveProfile}
                        disabled={saving}
                        className={styles.saveButton}
                      >
                        {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}
                      </button>
                    </div>
                  </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */}
                {activeTab === 'password' && (
                  <div className={styles.section}>
                    <h3>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>

                    <div className={styles.infoBlock}>
                      <h4>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h4>
                      <p>
                        –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏
                        —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                      </p>
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å *</label>
                      <input
                        type="password"
                        value={passwordSettings.currentPassword}
                        onChange={(e) =>
                          setPasswordSettings((prev) => ({
                            ...prev,
                            currentPassword: e.target.value,
                          }))
                        }
                        className={styles.input}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                        required
                      />
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                      <input
                        type="password"
                        value={passwordSettings.newPassword}
                        onChange={(e) =>
                          setPasswordSettings((prev) => ({
                            ...prev,
                            newPassword: e.target.value,
                          }))
                        }
                        className={styles.input}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                        minLength="6"
                        required
                      />
                      {passwordSettings.newPassword &&
                        passwordSettings.newPassword.length < 6 && (
                          <small className={styles.error}>
                            –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
                          </small>
                        )}
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>
                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è *
                      </label>
                      <input
                        type="password"
                        value={passwordSettings.confirmPassword}
                        onChange={(e) =>
                          setPasswordSettings((prev) => ({
                            ...prev,
                            confirmPassword: e.target.value,
                          }))
                        }
                        className={styles.input}
                        placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                        required
                      />
                      {passwordSettings.confirmPassword &&
                        passwordSettings.newPassword !==
                          passwordSettings.confirmPassword && (
                          <small className={styles.error}>
                            –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                          </small>
                        )}
                    </div>

                    <div className={styles.actions}>
                      <button
                        onClick={handleChangePassword}
                        disabled={
                          saving ||
                          !passwordSettings.currentPassword ||
                          !passwordSettings.newPassword ||
                          !passwordSettings.confirmPassword ||
                          passwordSettings.newPassword.length < 6 ||
                          passwordSettings.newPassword !==
                            passwordSettings.confirmPassword
                        }
                        className={styles.saveButton}
                      >
                        {saving ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : 'üîí –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
                      </button>
                    </div>
                  </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
                {activeTab === 'auth' && (
                  <div className={styles.section}>
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>

                    <div className={styles.infoBlock}>
                      <h4>–ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h4>
                      <p>
                        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                      </p>
                    </div>

                    <div className={styles.checkboxGroup}>
                      <label className={styles.checkboxLabel}>
                        <input
                          type="checkbox"
                          checked={authSettings.enableEmailAuth}
                          onChange={(e) =>
                            setAuthSettings((prev) => ({
                              ...prev,
                              enableEmailAuth: e.target.checked,
                            }))
                          }
                          className={styles.checkbox}
                        />
                        <div className={styles.checkboxText}>
                          <strong>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email</strong>
                          <small>–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email –∏ –ø–∞—Ä–æ–ª—å</small>
                        </div>
                      </label>

                      <label className={styles.checkboxLabel}>
                        <input
                          type="checkbox"
                          checked={authSettings.enableGoogleAuth}
                          onChange={(e) =>
                            setAuthSettings((prev) => ({
                              ...prev,
                              enableGoogleAuth: e.target.checked,
                            }))
                          }
                          className={styles.checkbox}
                        />
                        <div className={styles.checkboxText}>
                          <strong>Google OAuth</strong>
                          <small>–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç</small>
                        </div>
                      </label>

                      <label className={styles.checkboxLabel}>
                        <input
                          type="checkbox"
                          checked={authSettings.enableGithubAuth}
                          onChange={(e) =>
                            setAuthSettings((prev) => ({
                              ...prev,
                              enableGithubAuth: e.target.checked,
                            }))
                          }
                          className={styles.checkbox}
                        />
                        <div className={styles.checkboxText}>
                          <strong>GitHub OAuth</strong>
                          <small>–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub –∞–∫–∫–∞—É–Ω—Ç</small>
                        </div>
                      </label>

                      <label className={styles.checkboxLabel}>
                        <input
                          type="checkbox"
                          checked={authSettings.requireTwoFactor}
                          onChange={(e) =>
                            setAuthSettings((prev) => ({
                              ...prev,
                              requireTwoFactor: e.target.checked,
                            }))
                          }
                          className={styles.checkbox}
                        />
                        <div className={styles.checkboxText}>
                          <strong>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</strong>
                          <small>
                            –¢—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
                          </small>
                        </div>
                      </label>
                    </div>

                    <div className={styles.formGroup}>
                      <label className={styles.label}>
                        –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ (—á–∞—Å—ã)
                      </label>
                      <input
                        type="number"
                        min="1"
                        max="168"
                        value={authSettings.sessionTimeout}
                        onChange={(e) =>
                          setAuthSettings((prev) => ({
                            ...prev,
                            sessionTimeout: parseInt(e.target.value) || 24,
                          }))
                        }
                        className={styles.input}
                        style={{ width: '120px' }}
                      />
                      <small className={styles.hint}>
                        –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ—Ç 1 –¥–æ 168
                        —á–∞—Å–æ–≤)
                      </small>
                    </div>

                    <div className={styles.actions}>
                      <button
                        onClick={handleSaveAuthSettings}
                        disabled={saving}
                        className={styles.saveButton}
                      >
                        {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                      </button>
                    </div>
                  </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API */}
                {activeTab === 'api' && (
                  <div className={styles.section}>
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –ò–ò</h3>

                    <div className={styles.infoBlock}>
                      <h4>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API</h4>
                      <p>
                        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
                        —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ò–ò. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏
                        –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
                      </p>
                    </div>

                    <div className={styles.checkboxGroup}>
                      <label className={styles.checkboxLabel}>
                        <input
                          type="checkbox"
                          checked={apiSettings.usePersonalSettings}
                          onChange={(e) =>
                            setApiSettings((prev) => ({
                              ...prev,
                              usePersonalSettings: e.target.checked,
                            }))
                          }
                          className={styles.checkbox}
                        />
                        <div className={styles.checkboxText}>
                          <strong>
                            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
                          </strong>
                          <small>
                            –í–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π –≤–º–µ—Å—Ç–æ
                            —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
                          </small>
                        </div>
                      </label>
                    </div>

                    {apiSettings.usePersonalSettings && (
                      <>
                        <div className={styles.formGroup}>
                          <label className={styles.label}>–¢–∏–ø API</label>
                          <div className={styles.radioGroup}>
                            <label className={styles.radioOption}>
                              <input
                                type="radio"
                                name="apiType"
                                value="anthropic"
                                checked={apiSettings.apiType === 'anthropic'}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    apiType: e.target.value,
                                  }))
                                }
                                className={styles.radioInput}
                              />
                              <span className={styles.radioLabel}>
                                Anthropic Claude
                              </span>
                            </label>
                            <label className={styles.radioOption}>
                              <input
                                type="radio"
                                name="apiType"
                                value="openrouter"
                                checked={apiSettings.apiType === 'openrouter'}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    apiType: e.target.value,
                                  }))
                                }
                                className={styles.radioInput}
                              />
                              <span className={styles.radioLabel}>
                                OpenRouter
                              </span>
                            </label>
                            <label className={styles.radioOption}>
                              <input
                                type="radio"
                                name="apiType"
                                value="gemini"
                                checked={apiSettings.apiType === 'gemini'}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    apiType: e.target.value,
                                  }))
                                }
                                className={styles.radioInput}
                              />
                              <span className={styles.radioLabel}>
                                Google Gemini
                              </span>
                            </label>
                          </div>
                        </div>

                        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Anthropic */}
                        {apiSettings.apiType === 'anthropic' && (
                          <>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>
                                API –∫–ª—é—á Anthropic
                              </label>
                              <input
                                type="password"
                                value={apiSettings.apiKey}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    apiKey: e.target.value,
                                  }))
                                }
                                className={styles.input}
                                placeholder="sk-ant-..."
                              />
                            </div>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>Base URL</label>
                              <input
                                type="url"
                                value={apiSettings.baseUrl}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    baseUrl: e.target.value,
                                  }))
                                }
                                className={styles.input}
                                placeholder="https://api.anthropic.com"
                              />
                            </div>
                          </>
                        )}

                        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter */}
                        {apiSettings.apiType === 'openrouter' && (
                          <>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>
                                API –∫–ª—é—á OpenRouter
                              </label>
                              <input
                                type="password"
                                value={apiSettings.openRouterApiKey}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    openRouterApiKey: e.target.value,
                                  }))
                                }
                                className={styles.input}
                                placeholder="sk-or-..."
                              />
                            </div>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>–ú–æ–¥–µ–ª—å</label>
                              <input
                                type="text"
                                value={apiSettings.openRouterModel}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    openRouterModel: e.target.value,
                                  }))
                                }
                                className={styles.input}
                                placeholder="google/gemma-3-12b-it:free"
                              />
                            </div>
                          </>
                        )}

                        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini */}
                        {apiSettings.apiType === 'gemini' && (
                          <>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>
                                API –∫–ª—é—á Gemini
                              </label>
                              <input
                                type="password"
                                value={apiSettings.geminiApiKey}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    geminiApiKey: e.target.value,
                                  }))
                                }
                                className={styles.input}
                                placeholder="AIza..."
                              />
                            </div>
                            <div className={styles.formGroup}>
                              <label className={styles.label}>–ú–æ–¥–µ–ª—å</label>
                              <select
                                value={apiSettings.geminiModel}
                                onChange={(e) =>
                                  setApiSettings((prev) => ({
                                    ...prev,
                                    geminiModel: e.target.value,
                                  }))
                                }
                                className={styles.select}
                              >
                                <option value="gemini-1.5-pro">
                                  Gemini 1.5 Pro
                                </option>
                                <option value="gemini-1.5-flash">
                                  Gemini 1.5 Flash
                                </option>
                                <option value="gemini-pro">Gemini Pro</option>
                              </select>
                            </div>
                          </>
                        )}
                      </>
                    )}

                    <div className={styles.actions}>
                      <button
                        onClick={handleSaveApiSettings}
                        disabled={saving}
                        className={styles.saveButton}
                      >
                        {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                      </button>
                    </div>
                  </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {(session?.user?.role === 'admin' ||
                  session?.user?.role === 'superadmin') &&
                  activeTab === 'admin' && (
                    <div className={styles.section}>
                      <h3>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>

                      <div className={styles.warningBlock}>
                        <h4>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h4>
                        <p>
                          –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                          —Å–∏—Å—Ç–µ–º—ã. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
                        </p>
                      </div>

                      <div className={styles.infoBlock}>
                        <h4>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
                        <p>
                          –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏
                          –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                        </p>
                      </div>

                      <div className={styles.formGroup}>
                        <label className={styles.label}>
                          –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </label>
                        <input
                          type="text"
                          value={session?.user?.role || 'user'}
                          disabled
                          className={`${styles.input} ${styles.disabled}`}
                        />
                        <small className={styles.hint}>
                          –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
                        </small>
                      </div>

                      <div className={styles.formGroup}>
                        <label className={styles.label}>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                        <input
                          type="text"
                          value={session?.user?.id || ''}
                          disabled
                          className={`${styles.input} ${styles.disabled}`}
                        />
                        <small className={styles.hint}>
                          –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ
                        </small>
                      </div>

                      <div className={styles.actions}>
                        <button
                          onClick={() => window.open('/admin', '_blank')}
                          className={styles.saveButton}
                        >
                          –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        </button>
                      </div>
                    </div>
                  )}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
