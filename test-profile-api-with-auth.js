/**
 * –¢–µ—Å—Ç API –ø—Ä–æ—Ñ–∏–ª—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É API
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ API –ø—Ä–æ—Ñ–∏–ª—è
async function simulateProfileAPI() {
  log('\n=== –°–ò–ú–£–õ–Ø–¶–ò–Ø –õ–û–ì–ò–ö–ò API –ü–†–û–§–ò–õ–Ø ===', 'cyan');

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'blue');

    const testUser = await prisma.user.findFirst({
      where: {
        email: {
          contains: '@example.com',
        },
      },
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
        userPoints: {
          select: {
            points: true,
          },
        },
        pointsTransactions: {
          select: {
            amount: true,
            type: true,
            createdAt: true,
          },
          orderBy: {
            createdAt: 'desc',
          },
          take: 5,
        },
        _count: {
          select: {
            interviewerSessions: true,
            intervieweeSessions: true,
            pointsTransactions: true,
          },
        },
      },
    });

    if (!testUser) {
      log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
      return false;
    }

    log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email}`, 'green');
    log(`   ID: ${testUser.id}`, 'yellow');
    log(`   –ò–º—è: ${testUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`, 'yellow');
    log(`   –†–æ–ª—å: ${testUser.role}`, 'yellow');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API
    log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', 'blue');

    const fields = [
      { name: 'id', value: testUser.id },
      { name: 'name', value: testUser.name },
      { name: 'email', value: testUser.email },
      { name: 'image', value: testUser.image },
      { name: 'role', value: testUser.role },
      { name: 'createdAt', value: testUser.createdAt },
      { name: 'lastLoginAt', value: testUser.lastLoginAt },
      {
        name: 'conductedInterviewsCount',
        value: testUser.conductedInterviewsCount,
      },
      { name: 'userPoints', value: testUser.userPoints },
      { name: 'pointsTransactions', value: testUser.pointsTransactions },
      { name: '_count', value: testUser._count },
    ];

    let hasErrors = false;
    fields.forEach((field) => {
      if (field.value === undefined) {
        log(`   ‚ùå ${field.name}: undefined`, 'red');
        hasErrors = true;
      } else if (field.value === null) {
        log(`   ‚ö†Ô∏è ${field.name}: null`, 'yellow');
      } else {
        log(
          `   ‚úÖ ${field.name}: ${
            typeof field.value === 'object' ? '–æ–±—ä–µ–∫—Ç' : field.value
          }`,
          'green'
        );
      }
    });

    if (hasErrors) {
      log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è!', 'red');
      return false;
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
    log('\nüîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...', 'blue');

    try {
      const profileData = {
        id: testUser.id,
        name: testUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        email: testUser.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        image: testUser.image,
        role: testUser.role,
        createdAt: testUser.createdAt,
        lastLoginAt: testUser.lastLoginAt,
        conductedInterviewsCount: testUser.conductedInterviewsCount,

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats: {
          currentPoints: testUser.userPoints?.points || 0,
          totalInterviews:
            testUser._count.interviewerSessions +
            testUser._count.intervieweeSessions,
          conductedInterviews: testUser._count.interviewerSessions,
          participatedInterviews: testUser._count.intervieweeSessions,
          totalTransactions: testUser._count.pointsTransactions,
        },

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–ª–æ–≤
        recentTransactions: testUser.pointsTransactions.map((transaction) => ({
          amount: transaction.amount,
          type: transaction.type,
          createdAt: transaction.createdAt,
        })),
      };

      log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'green');
      log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, 'yellow');
      log(`   üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: ${profileData.stats.currentPoints}`, 'yellow');
      log(
        `   üìà –í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${profileData.stats.totalInterviews}`,
        'yellow'
      );
      log(
        `   üéØ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${profileData.stats.conductedInterviews}`,
        'yellow'
      );
      log(`   üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${profileData.stats.totalTransactions}`, 'yellow');
      log(
        `   üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${profileData.recentTransactions.length}`,
        'yellow'
      );

      return true;
    } catch (formattingError) {
      log(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: ${formattingError.message}`,
        'red'
      );
      log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${formattingError.stack}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ API: ${error.message}`, 'red');
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
async function checkRelatedTables() {
  log('\n=== –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶ ===', 'cyan');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API
    const tables = [
      { name: 'User', model: prisma.user },
      { name: 'UserPoints', model: prisma.userPoints },
      { name: 'PointsTransaction', model: prisma.pointsTransaction },
      { name: 'MockInterview', model: prisma.mockInterview },
    ];

    for (const table of tables) {
      try {
        const count = await table.model.count();
        log(`‚úÖ ${table.name}: ${count} –∑–∞–ø–∏—Å–µ–π`, 'green');
      } catch (error) {
        log(`‚ùå ${table.name}: –æ—à–∏–±–∫–∞ - ${error.message}`, 'red');
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:', 'blue');

    const usersWithPoints = await prisma.user.findMany({
      include: {
        userPoints: true,
        _count: {
          select: {
            pointsTransactions: true,
          },
        },
      },
    });

    log(
      `üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–ª–∞–º–∏: ${
        usersWithPoints.filter((u) => u.userPoints).length
      }/${usersWithPoints.length}`,
      'yellow'
    );

    const usersWithoutPoints = usersWithPoints.filter((u) => !u.userPoints);
    if (usersWithoutPoints.length > 0) {
      log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–ø–∏—Å–∏ UserPoints:`, 'yellow');
      usersWithoutPoints.forEach((user) => {
        log(`   - ${user.email} (ID: ${user.id})`, 'yellow');
      });
    }

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: ${error.message}`, 'red');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseSchema() {
  log('\n=== –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===', 'cyan');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã User...', 'blue');

    const sampleUser = await prisma.user.findFirst({
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        createdAt: true,
        lastLoginAt: true,
        conductedInterviewsCount: true,
      },
    });

    if (!sampleUser) {
      log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'yellow');
      return false;
    }

    const requiredFields = ['id', 'name', 'email', 'role', 'createdAt'];

    const optionalFields = ['image', 'lastLoginAt', 'conductedInterviewsCount'];

    requiredFields.forEach((field) => {
      if (sampleUser[field] !== undefined) {
        log(`   ‚úÖ ${field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'green');
      } else {
        log(`   ‚ùå ${field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!)`, 'red');
      }
    });

    optionalFields.forEach((field) => {
      if (sampleUser[field] !== undefined) {
        log(`   ‚úÖ ${field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'green');
      } else {
        log(`   ‚ö†Ô∏è ${field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ)`, 'yellow');
      }
    });

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã: ${error.message}`, 'red');
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnostics() {
  log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ü–†–û–§–ò–õ–Ø –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô', 'magenta');
  log('=' * 60, 'magenta');

  const results = {
    schemaCheck: false,
    relatedTables: false,
    apiSimulation: false,
  };

  try {
    results.schemaCheck = await checkDatabaseSchema();
    results.relatedTables = await checkRelatedTables();
    results.apiSimulation = await simulateProfileAPI();

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log('\n' + '=' * 60, 'magenta');
    log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò', 'magenta');
    log('=' * 60, 'magenta');

    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù';
      const color = passed ? 'green' : 'red';
      log(`${test}: ${status}`, color);
    });

    const passedCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;

    log(
      `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`,
      passedCount === totalCount ? 'green' : 'yellow'
    );

    if (passedCount === totalCount) {
      log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.', 'green');
      log(
        'üí° –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 500 –≤—Å–µ –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:',
        'blue'
      );
      log('   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NextAuth —Å–µ—Å—Å–∏–π', 'blue');
      log('   - Middleware –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö', 'blue');
      log('   - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å cookies/—Å–µ—Å—Å–∏—è–º–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'blue');
    } else {
      log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ö–µ–º–µ.', 'yellow');
    }
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'red');
    log(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'red');
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (require.main === module) {
  runDiagnostics().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  runDiagnostics,
  simulateProfileAPI,
  checkRelatedTables,
  checkDatabaseSchema,
};
