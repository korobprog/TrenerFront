/**
 * –¢–µ—Å—Ç API –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É endpoint /api/user/profile
 */

const fetch = require('node-fetch');

async function testProfileAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–æ—Ñ–∏–ª—è
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ /api/user/profile...');

    const response = await fetch('http://localhost:3000/api/user/profile', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      },
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç: ${response.statusText}`);

    const data = await response.json();
    console.log('üìä –û—Ç–≤–µ—Ç API:');
    console.log(JSON.stringify(data, null, 2));

    if (response.status === 401) {
      console.log('\n‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ —Å–µ—Å—Å–∏–∏');
    } else if (response.status === 200) {
      console.log('\n‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);

    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    }
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ API
function checkAPIFile() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ API...');

  const fs = require('fs');
  const path = './pages/api/user/profile.js';

  if (fs.existsSync(path)) {
    console.log('‚úÖ –§–∞–π–ª API —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    const content = fs.readFileSync(path, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const checks = [
      { name: '–ò–º–ø–æ—Ä—Ç getServerSession', pattern: /getServerSession/ },
      { name: '–ò–º–ø–æ—Ä—Ç authOptions', pattern: /authOptions/ },
      { name: '–ò–º–ø–æ—Ä—Ç prisma', pattern: /prisma/ },
      { name: '–≠–∫—Å–ø–æ—Ä—Ç handler', pattern: /export default.*handler/ },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ GET', pattern: /req\.method.*GET/ },
      { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ PUT', pattern: /req\.method.*PUT/ },
    ];

    checks.forEach((check) => {
      if (check.pattern.test(content)) {
        console.log(`‚úÖ ${check.name}`);
      } else {
        console.log(`‚ùå ${check.name}`);
      }
    });
  } else {
    console.log('‚ùå –§–∞–π–ª API –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabase() {
  console.log('\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const userCount = await prisma.user.count();
    console.log(
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${userCount}`
    );

    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
  }
}

async function runTests() {
  checkAPIFile();
  await checkDatabase();
  await testProfileAPI();

  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
}

if (require.main === module) {
  runTests();
}

module.exports = { testProfileAPI, checkAPIFile, checkDatabase };
