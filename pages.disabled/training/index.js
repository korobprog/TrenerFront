import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { useNotification } from '../../contexts/NotificationContext';
import QuestionCard from '../../components/QuestionCard';
import Timer from '../../components/Timer';
import FlashcardContainer from '../../components/flashcards/FlashcardContainer';
import styles from '../../styles/Training.module.css';
import flashcardStyles from '../../styles/Flashcards.module.css';

export default function TrainingPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { showError, showSuccess } = useNotification();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
  const [activeMode, setActiveMode] = useState('questions'); // 'questions' –∏–ª–∏ 'flashcards'

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [currentQuestionTime, setCurrentQuestionTime] = useState(0);
  const [sessionTime, setSessionTime] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState({
    topic: 'all',
    difficulty: 'all',
    status: 'all',
    search: '',
    mode: 'study', // study, review, exam, sprint
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [stats, setStats] = useState({
    totalQuestions: 0,
    answeredQuestions: 0,
    correctAnswers: 0,
    streak: 0,
    timeSpent: 0,
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0,
  });

  // –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin?callbackUrl=/training');
    }
  }, [status, router]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (session) {
      fetchQuestions();
    }
  }, [session, filters, pagination.page]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (session) {
      fetchStats();
    }
  }, [session]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  const fetchQuestions = async () => {
    setIsLoading(true);
    setError(null);

    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –í–û–ü–†–û–°–û–í ===');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫...');

    try {
      const queryParams = new URLSearchParams({
        topic: filters.topic,
        difficulty: filters.difficulty,
        status: filters.status,
        search: filters.search,
        mode: filters.mode,
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
      });

      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', Object.fromEntries(queryParams));

      // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫...');
      try {
        const flashcardsResponse = await fetch(
          '/api/flashcards/questions?limit=5'
        );
        console.log('üîç –°—Ç–∞—Ç—É—Å API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫:', flashcardsResponse.status);
        if (flashcardsResponse.ok) {
          const flashcardsData = await flashcardsResponse.json();
          console.log(
            '‚úÖ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:',
            flashcardsData.questions?.length || 0
          );
        } else {
          console.log(
            '‚ùå API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:',
            flashcardsResponse.statusText
          );
        }
      } catch (flashcardsError) {
        console.log(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫:',
          flashcardsError.message
        );
      }

      const response = await fetch(`/api/training/questions?${queryParams}`);

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
      }

      const data = await response.json();
      console.log(
        'üîç –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ training API:',
        data.questions?.length || 0
      );

      setQuestions(data.questions);
      setPagination(data.pagination);

      if (data.questions.length > 0) {
        setCurrentQuestion(0);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
      setError(err.message);
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
    } finally {
      setIsLoading(false);
      console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ó–ê–ì–†–£–ó–ö–ò ===');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fetchStats = async () => {
    try {
      const response = await fetch('/api/training/stats');

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }

      const data = await response.json();
      setStats(data.overall);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  const handleAnswer = async (questionId, selectedAnswer, isCorrect) => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    setIsTimerRunning(false);

    try {
      const response = await fetch('/api/progress', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          questionId,
          selectedAnswer,
          isCorrect,
          timeSpent: currentQuestionTime, // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ API:', data);
        throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
      }

      console.log('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      showSuccess(isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω' : '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await fetchStats();

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        setIsTimerRunning(true);
      } else {
        showSuccess('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', err);
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç: ' + err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
  const handleSearch = (searchTerm) => {
    setFilters((prev) => ({ ...prev, search: searchTerm }));
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFilterChange = (filterType, value) => {
    setFilters((prev) => ({ ...prev, [filterType]: value }));
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setFilters({
      topic: 'all',
      difficulty: 'all',
      status: 'all',
      search: '',
      mode: 'study',
    });
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–π–º–µ—Ä–∞
  const handleTimerUpdate = (currentTime, totalSessionTime) => {
    setCurrentQuestionTime(currentTime);
    setSessionTime(totalSessionTime);
  };

  const handleTimerStop = (finalTime, totalSessionTime) => {
    setCurrentQuestionTime(finalTime);
    setSessionTime(totalSessionTime);
  };

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (questions.length > 0 && !isLoading) {
      setIsTimerRunning(true);
    }
  }, [currentQuestion, questions.length, isLoading]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (isLoading) {
      setIsTimerRunning(false);
    }
  }, [isLoading]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (status === 'loading') {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã)
  if (!session) {
    return null;
  }

  return (
    <>
      <Head>
        <title>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - SuperMock</title>
        <meta
          name="description"
          content="–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º"
        />
      </Head>

      <div className={styles.container}>
        <main className={styles.main}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <div className={styles.header}>
            <h1 className={styles.title}>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</h1>
            <p className={styles.subtitle}>
              –ò–∑—É—á–∞–π—Ç–µ —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á
            </p>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
            <div className={styles.modeToggle}>
              <button
                className={`${styles.modeButton} ${
                  activeMode === 'questions' ? styles.active : ''
                }`}
                onClick={() => setActiveMode('questions')}
              >
                üìù –û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
              </button>
              <button
                className={`${styles.modeButton} ${
                  activeMode === 'flashcards' ? styles.active : ''
                }`}
                onClick={() => setActiveMode('flashcards')}
              >
                üéØ –§–ª–µ—à-–∫–∞—Ä—Ç–æ—á–∫–∏
              </button>
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className={styles.statsSection}>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{stats.totalQuestions}</div>
              <div className={styles.statLabel}>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{stats.answeredQuestions}</div>
              <div className={styles.statLabel}>–û—Ç–≤–µ—á–µ–Ω–æ</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{stats.correctAnswers}</div>
              <div className={styles.statLabel}>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>
                {stats.answeredQuestions > 0
                  ? Math.round(
                      (stats.correctAnswers / stats.answeredQuestions) * 100
                    )
                  : 0}
                %
              </div>
              <div className={styles.statLabel}>–¢–æ—á–Ω–æ—Å—Ç—å</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{stats.streak}</div>
              <div className={styles.statLabel}>–°–µ—Ä–∏—è</div>
            </div>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className={styles.filtersSection}>
            <div className={styles.filtersRow}>
              <select
                value={filters.mode}
                onChange={(e) => handleFilterChange('mode', e.target.value)}
                className={styles.filterSelect}
              >
                <option value="study">–ò–∑—É—á–µ–Ω–∏–µ</option>
                <option value="review">–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</option>
                <option value="exam">–≠–∫–∑–∞–º–µ–Ω</option>
                <option value="sprint">–°–ø—Ä–∏–Ω—Ç</option>
              </select>

              <select
                value={filters.topic}
                onChange={(e) => handleFilterChange('topic', e.target.value)}
                className={styles.filterSelect}
              >
                <option value="all">–í—Å–µ —Ç–µ–º—ã</option>
                <option value="javascript">JavaScript</option>
                <option value="react">React</option>
                <option value="html">HTML</option>
                <option value="css">CSS</option>
                <option value="nodejs">Node.js</option>
              </select>

              <select
                value={filters.difficulty}
                onChange={(e) =>
                  handleFilterChange('difficulty', e.target.value)
                }
                className={styles.filterSelect}
              >
                <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
                <option value="easy">–õ–µ–≥–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="hard">–°–ª–æ–∂–Ω—ã–π</option>
              </select>

              <select
                value={filters.status}
                onChange={(e) => handleFilterChange('status', e.target.value)}
                className={styles.filterSelect}
              >
                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="new">–ù–æ–≤—ã–µ</option>
                <option value="known">–ó–Ω–∞—é</option>
                <option value="unknown">–ù–µ –∑–Ω–∞—é</option>
                <option value="repeat">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</option>
              </select>

              <button
                onClick={handleResetFilters}
                className={styles.resetButton}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>

            <div className={styles.searchRow}>
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞..."
                value={filters.search}
                onChange={(e) => handleFilterChange('search', e.target.value)}
                className={styles.searchInput}
              />
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
          <div className={styles.content}>
            {activeMode === 'questions' ? (
              <>
                {error && <div className={styles.error}>{error}</div>}

                {isLoading ? (
                  <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...</div>
                ) : questions.length > 0 ? (
                  <div className={styles.questionSection}>
                    <div className={styles.progressBar}>
                      <div className={styles.progressInfo}>
                        –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                      </div>
                      <div className={styles.progressTrack}>
                        <div
                          className={styles.progressFill}
                          style={{
                            width: `${
                              ((currentQuestion + 1) / questions.length) * 100
                            }%`,
                          }}
                        />
                      </div>
                    </div>

                    {/* –¢–∞–π–º–µ—Ä */}
                    <Timer
                      isRunning={isTimerRunning}
                      onTimeUpdate={handleTimerUpdate}
                      onStop={handleTimerStop}
                      showSessionTime={true}
                      className={styles.questionTimer}
                    />

                    <QuestionCard
                      question={questions[currentQuestion]}
                      onAnswer={handleAnswer}
                      onSearch={handleSearch}
                      currentTime={currentQuestionTime}
                    />

                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ */}
                    <div className={styles.navigation}>
                      <button
                        onClick={() =>
                          setCurrentQuestion(Math.max(0, currentQuestion - 1))
                        }
                        disabled={currentQuestion === 0}
                        className={styles.navButton}
                      >
                        ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
                      </button>

                      <span className={styles.questionCounter}>
                        {currentQuestion + 1} / {questions.length}
                      </span>

                      <button
                        onClick={() =>
                          setCurrentQuestion(
                            Math.min(questions.length - 1, currentQuestion + 1)
                          )
                        }
                        disabled={currentQuestion === questions.length - 1}
                        className={styles.navButton}
                      >
                        –°–ª–µ–¥—É—é—â–∏–π ‚Üí
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className={styles.noQuestions}>
                    <h3>–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö</p>
                    <button
                      onClick={handleResetFilters}
                      className={styles.resetButton}
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                  </div>
                )}
              </>
            ) : (
              /* –†–µ–∂–∏–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ—á–µ–∫ */
              <div className={styles.flashcardsSection}>
                <div className={flashcardStyles.container}>
                  <FlashcardContainer
                    topic={filters.topic !== 'all' ? filters.topic : null}
                    difficulty={
                      filters.difficulty !== 'all' ? filters.difficulty : null
                    }
                    mode={filters.mode}
                    limit={10}
                  />
                </div>
              </div>
            )}
          </div>

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          {pagination.totalPages > 1 && (
            <div className={styles.pagination}>
              <button
                onClick={() =>
                  setPagination((prev) => ({
                    ...prev,
                    page: Math.max(1, prev.page - 1),
                  }))
                }
                disabled={pagination.page === 1}
                className={styles.paginationButton}
              >
                ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
              </button>

              <span className={styles.paginationInfo}>
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.page} –∏–∑ {pagination.totalPages}
              </span>

              <button
                onClick={() =>
                  setPagination((prev) => ({
                    ...prev,
                    page: Math.min(prev.totalPages, prev.page + 1),
                  }))
                }
                disabled={pagination.page === pagination.totalPages}
                className={styles.paginationButton}
              >
                –°–ª–µ–¥—É—é—â–∞—è ‚Üí
              </button>
            </div>
          )}
        </main>
      </div>
    </>
  );
}
