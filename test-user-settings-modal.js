/**
 * –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ UserSettingsModal
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { SessionProvider } from 'next-auth/react';
import UserSettingsModal from './components/user/UserSettingsModal';
import { NotificationProvider } from './contexts/NotificationContext';

// –ú–æ–∫ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockSession = {
  user: {
    id: '1',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    image: null,
    role: 'user',
  },
};

// –ú–æ–∫ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const mockAdminSession = {
  user: {
    id: '1',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    email: 'admin@example.com',
    image: null,
    role: 'admin',
  },
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TestWrapper = ({ children, session = mockSession }) => (
  <SessionProvider session={session}>
    <NotificationProvider>{children}</NotificationProvider>
  </SessionProvider>
);

describe('UserSettingsModal', () => {
  const mockOnClose = jest.fn();

  beforeEach(() => {
    mockOnClose.mockClear();
    // –ú–æ–∫–∞–µ–º fetch –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({ success: true, data: {} }),
      })
    );
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–æ', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    expect(screen.getByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')).toBeInTheDocument();
    expect(screen.getByText('–ü—Ä–æ—Ñ–∏–ª—å')).toBeInTheDocument();
    expect(screen.getByText('–ü–∞—Ä–æ–ª—å')).toBeInTheDocument();
    expect(screen.getByText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')).toBeInTheDocument();
    expect(screen.getByText('API')).toBeInTheDocument();
  });

  test('–Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç–æ', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={false} onClose={mockOnClose} />
      </TestWrapper>
    );

    expect(
      screen.queryByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    ).not.toBeInTheDocument();
  });

  test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤', () => {
    render(
      <TestWrapper session={mockAdminSession}>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    expect(screen.getByText('–ê–¥–º–∏–Ω')).toBeInTheDocument();
  });

  test('–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    expect(screen.queryByText('–ê–¥–º–∏–Ω')).not.toBeInTheDocument();
  });

  test('–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    expect(screen.getByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è')).toBeInTheDocument();

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–∞—Ä–æ–ª—è
    fireEvent.click(screen.getByText('–ü–∞—Ä–æ–ª—å'));
    expect(screen.getByText('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è')).toBeInTheDocument();

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    fireEvent.click(screen.getByText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
    expect(screen.getByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')).toBeInTheDocument();

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É API
    fireEvent.click(screen.getByText('API'));
    expect(screen.getByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –ò–ò')).toBeInTheDocument();
  });

  test('–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(closeButton);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–µ –ø—Ä–æ—Ñ–∏–ª—è', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    const nameInput = screen.getByDisplayValue('–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    const emailInput = screen.getByDisplayValue('test@example.com');

    expect(nameInput).toBeInTheDocument();
    expect(emailInput).toBeInTheDocument();
    expect(emailInput).toBeDisabled();
  });

  test('—Ñ–æ—Ä–º–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–∞—Ä–æ–ª—è
    fireEvent.click(screen.getByText('–ü–∞—Ä–æ–ª—å'));

    expect(
      screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å')
    ).toBeInTheDocument();
    expect(
      screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    ).toBeInTheDocument();
    expect(
      screen.getByPlaceholderText('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    ).toBeInTheDocument();
  });

  test('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫', () => {
    render(
      <TestWrapper>
        <UserSettingsModal isOpen={true} onClose={mockOnClose} />
      </TestWrapper>
    );

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É API
    fireEvent.click(screen.getByText('API'));

    // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const personalSettingsCheckbox = screen.getByLabelText(
      /–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API/i
    );
    fireEvent.click(personalSettingsCheckbox);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    expect(screen.getByText('–¢–∏–ø API')).toBeInTheDocument();
    expect(screen.getByText('Anthropic Claude')).toBeInTheDocument();
    expect(screen.getByText('OpenRouter')).toBeInTheDocument();
    expect(screen.getByText('Google Gemini')).toBeInTheDocument();
  });
});

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export function testUserSettingsModal() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ UserSettingsModal...');

  const tests = [
    {
      name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
      test: () => {
        console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏');
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å overlay');
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"');
        console.log(
          '‚úÖ –í–∫–ª–∞–¥–∫–∏: –ü—Ä–æ—Ñ–∏–ª—å, –ü–∞—Ä–æ–ª—å, –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, API, –ê–¥–º–∏–Ω (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'
        );
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–ó–∞–∫—Ä—ã—Ç—å"');
      },
    },
    {
      name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫',
      test: () => {
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: –∞–≤–∞—Ç–∞—Ä–∫–∞, –∏–º—è, email');
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å: —Ç–µ–∫—É—â–∏–π, –Ω–æ–≤—ã–π, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –º–µ—Ç–æ–¥—ã –≤—Ö–æ–¥–∞, 2FA, –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏');
        console.log('‚úÖ API: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–∏–ø—ã API');
        console.log('‚úÖ –ê–¥–º–∏–Ω: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å');
      },
    },
    {
      name: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
      test: () => {
        console.log('‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
        console.log(
          '‚úÖ –í–∫–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö'
        );
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö');
      },
    },
    {
      name: '–°–æ—Å—Ç–æ—è–Ω–∏—è',
      test: () => {
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–ø–∏–Ω–Ω–µ—Ä–æ–º');
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫');
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º');
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ');
      },
    },
  ];

  tests.forEach(({ name, test }) => {
    console.log(`\nüìã ${name}:`);
    test();
  });

  console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('\nüìù –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
  console.log(
    '   - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: import UserSettingsModal from "./components/user/UserSettingsModal"'
  );
  console.log(
    '   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <UserSettingsModal isOpen={isOpen} onClose={handleClose} />'
  );
  console.log('   - –¢—Ä–µ–±—É–µ—Ç: SessionProvider –∏ NotificationProvider');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined' && require.main === module) {
  testUserSettingsModal();
}
