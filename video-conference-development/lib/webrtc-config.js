// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
// –í–∫–ª—é—á–∞–µ—Ç STUN/TURN —Å–µ—Ä–≤–µ—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @param {boolean} options.includeTurn - –í–∫–ª—é—á–∏—Ç—å TURN —Å–µ—Ä–≤–µ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 * @param {string} options.turnUsername - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è TURN —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} options.turnCredential - –ü–∞—Ä–æ–ª—å –¥–ª—è TURN —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Object} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ICE —Å–µ—Ä–≤–µ—Ä–æ–≤
 */
export function getIceServersConfig(options = {}) {
  const { includeTurn = false, turnUsername, turnCredential } = options;

  // –ë–∞–∑–æ–≤—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã Google (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
  const iceServers = [
    { urls: 'stun:stun.l.google.com:19302' },
    { urls: 'stun:stun1.l.google.com:19302' },
    { urls: 'stun:stun2.l.google.com:19302' },
    { urls: 'stun:stun3.l.google.com:19302' },
    { urls: 'stun:stun4.l.google.com:19302' },
  ];

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  iceServers.push(
    { urls: 'stun:stun.stunprotocol.org:3478' },
    { urls: 'stun:stun.voiparound.com' },
    { urls: 'stun:stun.voipbuster.com' },
    { urls: 'stun:stun.voipstunt.com' },
    { urls: 'stun:stun.voxgratia.org' }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º TURN —Å–µ—Ä–≤–µ—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
  if (includeTurn && turnUsername && turnCredential) {
    iceServers.push({
      urls: [
        'turn:your-turn-server.com:3478',
        'turns:your-turn-server.com:5349',
      ],
      username: turnUsername,
      credential: turnCredential,
    });
  }

  return { iceServers };
}

/**
 * –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RTCPeerConnection
 * @param {Object} options - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * @returns {Object} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RTCPeerConnection
 */
export function getWebRTCConfig(options = {}) {
  const iceServersConfig = getIceServersConfig(options);

  return {
    ...iceServersConfig,
    iceCandidatePoolSize: 10,
    bundlePolicy: 'max-bundle',
    rtcpMuxPolicy: 'require',
    iceTransportPolicy: 'all', // 'relay' –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TURN
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤
 */
export const mediaConstraints = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
  video: {
    width: { min: 320, ideal: 1280, max: 1920 },
    height: { min: 240, ideal: 720, max: 1080 },
    frameRate: { min: 15, ideal: 30, max: 60 },
    facingMode: 'user', // 'environment' –¥–ª—è –∑–∞–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
  audio: {
    echoCancellation: true,
    noiseSuppression: true,
    autoGainControl: true,
    sampleRate: 48000,
    channelCount: 2,
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
 */
export const screenShareConstraints = {
  video: {
    mediaSource: 'screen',
    width: { max: 1920 },
    height: { max: 1080 },
    frameRate: { max: 30 },
  },
  audio: {
    echoCancellation: true,
    noiseSuppression: true,
    autoGainControl: false,
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */
export const videoQualityPresets = {
  low: {
    width: { ideal: 320 },
    height: { ideal: 240 },
    frameRate: { ideal: 15 },
  },
  medium: {
    width: { ideal: 640 },
    height: { ideal: 480 },
    frameRate: { ideal: 24 },
  },
  high: {
    width: { ideal: 1280 },
    height: { ideal: 720 },
    frameRate: { ideal: 30 },
  },
  ultra: {
    width: { ideal: 1920 },
    height: { ideal: 1080 },
    frameRate: { ideal: 30 },
  },
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
 * @param {string} quality - –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (low, medium, high, ultra)
 * @param {boolean} includeAudio - –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ
 * @returns {Object} –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ–¥–∏–∞
 */
export function getMediaConstraints(quality = 'medium', includeAudio = true) {
  const videoConstraints = {
    ...mediaConstraints.video,
    ...videoQualityPresets[quality],
  };

  return {
    video: videoConstraints,
    audio: includeAudio ? mediaConstraints.audio : false,
  };
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const performanceConfig = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  maxPeerConnections: 8,

  // –¢–∞–π–º–∞—É—Ç—ã
  connectionTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
  iceGatheringTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  connectionCheckInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥
  statsCollectionInterval: 10000, // 10 —Å–µ–∫—É–Ω–¥

  // –ü–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  qualityThresholds: {
    excellent: { rtt: 50, packetLoss: 0.01 },
    good: { rtt: 150, packetLoss: 0.03 },
    fair: { rtt: 300, packetLoss: 0.05 },
    poor: { rtt: 500, packetLoss: 0.1 },
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–µ–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const codecPreferences = {
  video: ['video/VP9', 'video/VP8', 'video/H264'],
  audio: ['audio/opus', 'audio/PCMU', 'audio/PCMA'],
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebRTC –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ WebRTC
 */
export function checkWebRTCSupport() {
  const support = {
    webrtc: false,
    getUserMedia: false,
    getDisplayMedia: false,
    rtcPeerConnection: false,
    dataChannels: false,
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebRTC
  if (typeof RTCPeerConnection !== 'undefined') {
    support.rtcPeerConnection = true;
    support.webrtc = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ getUserMedia
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    support.getUserMedia = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ getDisplayMedia (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞)
  if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
    support.getDisplayMedia = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ data channels
  try {
    const pc = new RTCPeerConnection();
    const dc = pc.createDataChannel('test');
    if (dc) {
      support.dataChannels = true;
    }
    pc.close();
  } catch (e) {
    console.warn('Data channels –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:', e);
  }

  return support;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export function getBrowserInfo() {
  const userAgent = navigator.userAgent;
  let browserName = 'Unknown';
  let browserVersion = 'Unknown';

  if (userAgent.indexOf('Chrome') > -1) {
    browserName = 'Chrome';
    browserVersion = userAgent.match(/Chrome\/(\d+)/)?.[1] || 'Unknown';
  } else if (userAgent.indexOf('Firefox') > -1) {
    browserName = 'Firefox';
    browserVersion = userAgent.match(/Firefox\/(\d+)/)?.[1] || 'Unknown';
  } else if (userAgent.indexOf('Safari') > -1) {
    browserName = 'Safari';
    browserVersion = userAgent.match(/Version\/(\d+)/)?.[1] || 'Unknown';
  } else if (userAgent.indexOf('Edge') > -1) {
    browserName = 'Edge';
    browserVersion = userAgent.match(/Edge\/(\d+)/)?.[1] || 'Unknown';
  }

  return {
    name: browserName,
    version: browserVersion,
    userAgent,
    webrtcSupport: checkWebRTCSupport(),
  };
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function logWebRTCConfig() {
  const config = getWebRTCConfig();
  const browserInfo = getBrowserInfo();
  const support = checkWebRTCSupport();

  console.group('üé• WebRTC Configuration');
  console.log('ICE Servers:', config.iceServers);
  console.log('Browser Info:', browserInfo);
  console.log('WebRTC Support:', support);
  console.log('Media Constraints:', mediaConstraints);
  console.log('Performance Config:', performanceConfig);
  console.groupEnd();
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
 */
export const mediaDeviceUtils = {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø–∞–º
   */
  async getAvailableDevices() {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();

      return {
        videoInputs: devices.filter((device) => device.kind === 'videoinput'),
        audioInputs: devices.filter((device) => device.kind === 'audioinput'),
        audioOutputs: devices.filter((device) => device.kind === 'audiooutput'),
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
      return { videoInputs: [], audioInputs: [], audioOutputs: [] };
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
   */
  async checkPermissions() {
    const permissions = {
      camera: 'unknown',
      microphone: 'unknown',
    };

    try {
      if (navigator.permissions) {
        const cameraPermission = await navigator.permissions.query({
          name: 'camera',
        });
        const microphonePermission = await navigator.permissions.query({
          name: 'microphone',
        });

        permissions.camera = cameraPermission.state;
        permissions.microphone = microphonePermission.state;
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
    }

    return permissions;
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
  getIceServersConfig,
  getWebRTCConfig,
  getMediaConstraints,
  mediaConstraints,
  screenShareConstraints,
  videoQualityPresets,
  performanceConfig,
  codecPreferences,
  checkWebRTCSupport,
  getBrowserInfo,
  logWebRTCConfig,
  mediaDeviceUtils,
};
