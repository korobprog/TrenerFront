// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
// –í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –æ–±–º–µ–Ω–∞ –º–µ–¥–∏–∞ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞

import {
  getWebRTCConfig,
  getMediaConstraints,
  checkWebRTCSupport,
  getBrowserInfo,
  performanceConfig,
  mediaDeviceUtils,
} from '../lib/webrtc-config.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebRTC —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
class WebRTCTester {
  constructor() {
    this.testResults = [];
    this.peerConnections = new Map();
    this.localStreams = new Map();
    this.remoteStreams = new Map();
    this.dataChannels = new Map();
    this.testStartTime = null;
    this.testStats = {
      total: 0,
      passed: 0,
      failed: 0,
      skipped: 0,
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ WebRTC
   */
  async runAllTests() {
    console.log('üé• –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
    this.testStartTime = Date.now();

    try {
      // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await this.testWebRTCSupport();
      await this.testBrowserCompatibility();

      // –¢–µ—Å—Ç—ã –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      await this.testMediaDevices();
      await this.testMediaPermissions();

      // –¢–µ—Å—Ç—ã WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      await this.testPeerConnectionCreation();
      await this.testICEGathering();
      await this.testDataChannels();

      // –¢–µ—Å—Ç—ã –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤
      await this.testLocalMediaStream();
      await this.testScreenShare();

      // –¢–µ—Å—Ç—ã P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.testP2PConnection();
      await this.testOfferAnswerExchange();
      await this.testICECandidateExchange();

      // –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.testConnectionQuality();
      await this.testReconnection();

      // –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.testPerformanceMetrics();
    } catch (error) {
      this.addTestResult(
        'CRITICAL_ERROR',
        false,
        `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`
      );
    }

    this.printTestSummary();
    return this.generateTestReport();
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebRTC –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  async testWebRTCSupport() {
    const testName = 'WebRTC Support Check';
    try {
      const support = checkWebRTCSupport();

      if (!support.webrtc) {
        this.addTestResult(
          testName,
          false,
          'WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ'
        );
        return;
      }

      const requiredFeatures = ['rtcPeerConnection', 'getUserMedia'];
      const missingFeatures = requiredFeatures.filter(
        (feature) => !support[feature]
      );

      if (missingFeatures.length > 0) {
        this.addTestResult(
          testName,
          false,
          `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: ${missingFeatures.join(', ')}`
        );
        return;
      }

      this.addTestResult(
        testName,
        true,
        '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ WebRTC —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  async testBrowserCompatibility() {
    const testName = 'Browser Compatibility';
    try {
      const browserInfo = getBrowserInfo();
      const supportedBrowsers = {
        Chrome: 60,
        Firefox: 60,
        Safari: 11,
        Edge: 79,
      };

      const browserName = browserInfo.name;
      const browserVersion = parseInt(browserInfo.version);
      const minVersion = supportedBrowsers[browserName];

      if (!minVersion) {
        this.addTestResult(
          testName,
          false,
          `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: ${browserName}`
        );
        return;
      }

      if (browserVersion < minVersion) {
        this.addTestResult(
          testName,
          false,
          `–í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${browserVersion} –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${minVersion}`
        );
        return;
      }

      this.addTestResult(
        testName,
        true,
        `–ë—Ä–∞—É–∑–µ—Ä ${browserName} ${browserVersion} —Å–æ–≤–º–µ—Å—Ç–∏–º`
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async testMediaDevices() {
    const testName = 'Media Devices Availability';
    try {
      const devices = await mediaDeviceUtils.getAvailableDevices();

      if (devices.videoInputs.length === 0) {
        this.addTestResult(testName, false, '–í–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      if (devices.audioInputs.length === 0) {
        this.addTestResult(testName, false, '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      this.addTestResult(
        testName,
        true,
        `–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.videoInputs.length} –≤–∏–¥–µ–æ, ${devices.audioInputs.length} –∞—É–¥–∏–æ`
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –º–µ–¥–∏–∞
   */
  async testMediaPermissions() {
    const testName = 'Media Permissions';
    try {
      const permissions = await mediaDeviceUtils.checkPermissions();

      if (
        permissions.camera === 'denied' ||
        permissions.microphone === 'denied'
      ) {
        this.addTestResult(
          testName,
          false,
          '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω'
        );
        return;
      }

      this.addTestResult(
        testName,
        true,
        `–†–∞–∑—Ä–µ—à–µ–Ω–∏—è: –∫–∞–º–µ—Ä–∞=${permissions.camera}, –º–∏–∫—Ä–æ—Ñ–æ–Ω=${permissions.microphone}`
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è RTCPeerConnection
   */
  async testPeerConnectionCreation() {
    const testName = 'PeerConnection Creation';
    try {
      const config = getWebRTCConfig();
      const pc = new RTCPeerConnection(config);

      if (!pc) {
        this.addTestResult(
          testName,
          false,
          '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RTCPeerConnection'
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (pc.connectionState === undefined) {
        this.addTestResult(
          testName,
          false,
          'connectionState –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        );
        pc.close();
        return;
      }

      this.peerConnections.set('test', pc);
      this.addTestResult(testName, true, 'RTCPeerConnection —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PeerConnection: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–±–æ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   */
  async testICEGathering() {
    const testName = 'ICE Gathering';
    return new Promise((resolve) => {
      try {
        const pc = this.peerConnections.get('test');
        if (!pc) {
          this.addTestResult(testName, false, 'PeerConnection –Ω–µ –Ω–∞–π–¥–µ–Ω');
          resolve();
          return;
        }

        let iceCandidatesCount = 0;
        const timeout = setTimeout(() => {
          if (iceCandidatesCount === 0) {
            this.addTestResult(
              testName,
              false,
              'ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è'
            );
          } else {
            this.addTestResult(
              testName,
              true,
              `–°–æ–±—Ä–∞–Ω–æ ${iceCandidatesCount} ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`
            );
          }
          resolve();
        }, performanceConfig.iceGatheringTimeout);

        pc.onicecandidate = (event) => {
          if (event.candidate) {
            iceCandidatesCount++;
            console.log(`ICE –∫–∞–Ω–¥–∏–¥–∞—Ç: ${event.candidate.candidate}`);
          } else {
            // –°–±–æ—Ä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω
            clearTimeout(timeout);
            this.addTestResult(
              testName,
              true,
              `–°–æ–±—Ä–∞–Ω–æ ${iceCandidatesCount} ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`
            );
            resolve();
          }
        };

        // –°–æ–∑–¥–∞–µ–º offer –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        pc.createOffer()
          .then((offer) => {
            return pc.setLocalDescription(offer);
          })
          .catch((error) => {
            clearTimeout(timeout);
            this.addTestResult(
              testName,
              false,
              `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer: ${error.message}`
            );
            resolve();
          });
      } catch (error) {
        this.addTestResult(
          testName,
          false,
          `–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ ICE: ${error.message}`
        );
        resolve();
      }
    });
  }

  /**
   * –¢–µ—Å—Ç data channels
   */
  async testDataChannels() {
    const testName = 'Data Channels';
    try {
      const pc = this.peerConnections.get('test');
      if (!pc) {
        this.addTestResult(testName, false, 'PeerConnection –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const dataChannel = pc.createDataChannel('test', {
        ordered: true,
        maxRetransmits: 3,
      });

      if (!dataChannel) {
        this.addTestResult(testName, false, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å data channel');
        return;
      }

      this.dataChannels.set('test', dataChannel);
      this.addTestResult(testName, true, 'Data channel —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è data channel: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
   */
  async testLocalMediaStream() {
    const testName = 'Local Media Stream';
    try {
      const constraints = getMediaConstraints('medium', true);
      const stream = await navigator.mediaDevices.getUserMedia(constraints);

      if (!stream) {
        this.addTestResult(testName, false, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫');
        return;
      }

      const videoTracks = stream.getVideoTracks();
      const audioTracks = stream.getAudioTracks();

      if (videoTracks.length === 0) {
        this.addTestResult(testName, false, '–í–∏–¥–µ–æ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (audioTracks.length === 0) {
        this.addTestResult(testName, false, '–ê—É–¥–∏–æ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      this.localStreams.set('camera', stream);
      this.addTestResult(
        testName,
        true,
        `–ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫: ${videoTracks.length} –≤–∏–¥–µ–æ, ${audioTracks.length} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤`
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
   */
  async testScreenShare() {
    const testName = 'Screen Share';
    try {
      if (!navigator.mediaDevices.getDisplayMedia) {
        this.addTestResult(
          testName,
          false,
          'getDisplayMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        );
        return;
      }

      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–∞—Ö –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω
      this.addTestResult(
        testName,
        true,
        'getDisplayMedia API –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)'
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ screen share: ${error.message}`
      );
    }
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
   */
  async testP2PConnection() {
    const testName = 'P2P Connection Simulation';
    try {
      const config = getWebRTCConfig();

      // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ peer connection (—Å–∏–º—É–ª—è—Ü–∏—è –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
      const pc1 = new RTCPeerConnection(config);
      const pc2 = new RTCPeerConnection(config);

      this.peerConnections.set('peer1', pc1);
      this.peerConnections.set('peer2', pc2);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–º–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
      pc1.onicecandidate = (event) => {
        if (event.candidate) {
          pc2.addIceCandidate(event.candidate);
        }
      };

      pc2.onicecandidate = (event) => {
        if (event.candidate) {
          pc1.addIceCandidate(event.candidate);
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∫ –ø–µ—Ä–≤–æ–º—É peer
      const stream = this.localStreams.get('camera');
      if (stream) {
        stream.getTracks().forEach((track) => {
          pc1.addTrack(track, stream);
        });
      }

      this.addTestResult(
        testName,
        true,
        'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏'
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ P2P: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–±–º–µ–Ω–∞ offer/answer
   */
  async testOfferAnswerExchange() {
    const testName = 'Offer/Answer Exchange';
    try {
      const pc1 = this.peerConnections.get('peer1');
      const pc2 = this.peerConnections.get('peer2');

      if (!pc1 || !pc2) {
        this.addTestResult(testName, false, 'Peer connections –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º offer
      const offer = await pc1.createOffer();
      await pc1.setLocalDescription(offer);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offer –∫–∞–∫ remote description –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ peer
      await pc2.setRemoteDescription(offer);

      // –°–æ–∑–¥–∞–µ–º answer
      const answer = await pc2.createAnswer();
      await pc2.setLocalDescription(answer);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º answer –∫–∞–∫ remote description –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ peer
      await pc1.setRemoteDescription(answer);

      this.addTestResult(testName, true, '–û–±–º–µ–Ω offer/answer –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ offer/answer: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–±–º–µ–Ω–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
   */
  async testICECandidateExchange() {
    const testName = 'ICE Candidate Exchange';
    return new Promise((resolve) => {
      try {
        const pc1 = this.peerConnections.get('peer1');
        const pc2 = this.peerConnections.get('peer2');

        if (!pc1 || !pc2) {
          this.addTestResult(testName, false, 'Peer connections –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          resolve();
          return;
        }

        let exchangedCandidates = 0;
        const timeout = setTimeout(() => {
          if (exchangedCandidates > 0) {
            this.addTestResult(
              testName,
              true,
              `–û–±–º–µ–Ω—è–ª–∏—Å—å ${exchangedCandidates} ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏`
            );
          } else {
            this.addTestResult(testName, false, 'ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –æ–±–º–µ–Ω—è–ª–∏—Å—å');
          }
          resolve();
        }, 5000);

        const originalOnIceCandidate1 = pc1.onicecandidate;
        const originalOnIceCandidate2 = pc2.onicecandidate;

        pc1.onicecandidate = (event) => {
          if (originalOnIceCandidate1) originalOnIceCandidate1(event);
          if (event.candidate) exchangedCandidates++;
        };

        pc2.onicecandidate = (event) => {
          if (originalOnIceCandidate2) originalOnIceCandidate2(event);
          if (event.candidate) exchangedCandidates++;
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pc1.onconnectionstatechange = () => {
          if (pc1.connectionState === 'connected') {
            clearTimeout(timeout);
            this.addTestResult(testName, true, 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            resolve();
          }
        };
      } catch (error) {
        this.addTestResult(
          testName,
          false,
          `–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏: ${error.message}`
        );
        resolve();
      }
    });
  }

  /**
   * –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async testConnectionQuality() {
    const testName = 'Connection Quality';
    try {
      const pc1 = this.peerConnections.get('peer1');
      if (!pc1) {
        this.addTestResult(testName, false, 'PeerConnection –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const stats = await pc1.getStats();
      let hasVideoStats = false;
      let hasAudioStats = false;

      stats.forEach((report) => {
        if (report.type === 'outbound-rtp' && report.mediaType === 'video') {
          hasVideoStats = true;
        }
        if (report.type === 'outbound-rtp' && report.mediaType === 'audio') {
          hasAudioStats = true;
        }
      });

      if (hasVideoStats && hasAudioStats) {
        this.addTestResult(
          testName,
          true,
          '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞'
        );
      } else {
        this.addTestResult(
          testName,
          false,
          '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        );
      }
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–±–æ—è—Ö
   */
  async testReconnection() {
    const testName = 'Reconnection Handling';
    try {
      const pc = this.peerConnections.get('test');
      if (!pc) {
        this.addTestResult(testName, false, 'PeerConnection –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      let reconnectionAttempted = false;

      pc.onconnectionstatechange = () => {
        if (
          pc.connectionState === 'failed' ||
          pc.connectionState === 'disconnected'
        ) {
          reconnectionAttempted = true;
          console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        }
      };

      // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.addTestResult(
        testName,
        true,
        '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async testPerformanceMetrics() {
    const testName = 'Performance Metrics';
    try {
      const pc = this.peerConnections.get('peer1');
      if (!pc) {
        this.addTestResult(testName, false, 'PeerConnection –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const stats = await pc.getStats();
      const metrics = {
        packetsLost: 0,
        packetsReceived: 0,
        bytesReceived: 0,
        jitter: 0,
        roundTripTime: 0,
      };

      stats.forEach((report) => {
        if (report.type === 'inbound-rtp') {
          metrics.packetsLost += report.packetsLost || 0;
          metrics.packetsReceived += report.packetsReceived || 0;
          metrics.bytesReceived += report.bytesReceived || 0;
          metrics.jitter = report.jitter || 0;
        }
        if (report.type === 'candidate-pair' && report.state === 'succeeded') {
          metrics.roundTripTime = report.currentRoundTripTime || 0;
        }
      });

      this.addTestResult(
        testName,
        true,
        `–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: RTT=${metrics.roundTripTime}ms, –ø–æ—Ç–µ—Ä—è–Ω–æ –ø–∞–∫–µ—Ç–æ–≤=${metrics.packetsLost}`
      );
    } catch (error) {
      this.addTestResult(
        testName,
        false,
        `–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: ${error.message}`
      );
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  addTestResult(testName, passed, message) {
    const result = {
      name: testName,
      passed,
      message,
      timestamp: new Date(),
      duration: Date.now() - this.testStartTime,
    };

    this.testResults.push(result);
    this.testStats.total++;

    if (passed) {
      this.testStats.passed++;
      console.log(`‚úÖ ${testName}: ${message}`);
    } else {
      this.testStats.failed++;
      console.log(`‚ùå ${testName}: ${message}`);
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤
   */
  printTestSummary() {
    const duration = Date.now() - this.testStartTime;
    console.log('\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebRTC:');
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testStats.total}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testStats.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testStats.failed}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.testStats.skipped}`);
    console.log(
      `üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(
        (this.testStats.passed / this.testStats.total) *
        100
      ).toFixed(1)}%`
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  generateTestReport() {
    const duration = Date.now() - this.testStartTime;

    return {
      summary: {
        totalTests: this.testStats.total,
        passed: this.testStats.passed,
        failed: this.testStats.failed,
        skipped: this.testStats.skipped,
        successRate: (this.testStats.passed / this.testStats.total) * 100,
        duration: duration,
        timestamp: new Date(),
      },
      results: this.testResults,
      browserInfo: getBrowserInfo(),
      webrtcSupport: checkWebRTCSupport(),
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  cleanup() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer connections
    this.peerConnections.forEach((pc) => {
      pc.close();
    });
    this.peerConnections.clear();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
    this.localStreams.forEach((stream) => {
      stream.getTracks().forEach((track) => track.stop());
    });
    this.localStreams.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º data channels
    this.dataChannels.forEach((channel) => {
      channel.close();
    });
    this.dataChannels.clear();

    console.log('üßπ –†–µ—Å—É—Ä—Å—ã WebRTC —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default WebRTCTester;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
export async function runWebRTCTests() {
  const tester = new WebRTCTester();
  try {
    const report = await tester.runAllTests();
    return report;
  } finally {
    tester.cleanup();
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (
  typeof window !== 'undefined' &&
  window.location.search.includes('test=webrtc')
) {
  runWebRTCTests().then((report) => {
    console.log('üìã –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ WebRTC:', report);
  });
}
